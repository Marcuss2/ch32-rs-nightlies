#![doc = "Peripheral access API for CH32V103XX microcontrollers (generated using svd2rust v0.23.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.23.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[allow(unused_imports)]
use generic::*;
#[doc = "Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PVD();
    fn TAMPER();
    fn RTC();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn DMA1_CHANNEL1();
    fn DMA1_CHANNEL2();
    fn DMA1_CHANNEL3();
    fn DMA1_CHANNEL4();
    fn DMA1_CHANNEL5();
    fn DMA1_CHANNEL6();
    fn DMA1_CHANNEL7();
    fn ADC();
    fn EXTI9_5();
    fn TIM1_BRK();
    fn TIM1_UP_();
    fn TIM1_TRG_COM();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXTI15_10();
    fn RTCALARM();
    fn USBHD();
}
#[doc(hidden)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 60] = [
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: WWDG },
    Vector { _handler: PVD },
    Vector { _handler: TAMPER },
    Vector { _handler: RTC },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector {
        _handler: DMA1_CHANNEL1,
    },
    Vector {
        _handler: DMA1_CHANNEL2,
    },
    Vector {
        _handler: DMA1_CHANNEL3,
    },
    Vector {
        _handler: DMA1_CHANNEL4,
    },
    Vector {
        _handler: DMA1_CHANNEL5,
    },
    Vector {
        _handler: DMA1_CHANNEL6,
    },
    Vector {
        _handler: DMA1_CHANNEL7,
    },
    Vector { _handler: ADC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: EXTI9_5 },
    Vector { _handler: TIM1_BRK },
    Vector { _handler: TIM1_UP_ },
    Vector {
        _handler: TIM1_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXTI15_10,
    },
    Vector { _handler: RTCALARM },
    Vector { _reserved: 0 },
    Vector { _handler: USBHD },
];
#[doc(hidden)]
pub mod interrupt {
    #[doc = r"Enumeration of all the interrupts."]
    #[derive(Copy, Clone, Debug, PartialEq, Eq)]
    #[repr(u16)]
    pub enum Interrupt {
        #[doc = "16 - Window Watchdog interrupt"]
        WWDG = 16,
        #[doc = "17 - PVD through EXTI line detection interrupt"]
        PVD = 17,
        #[doc = "18 - Tamper interrupt"]
        TAMPER = 18,
        #[doc = "19 - RTC global interrupt"]
        RTC = 19,
        #[doc = "20 - Flash global interrupt"]
        FLASH = 20,
        #[doc = "21 - RCC global interrupt"]
        RCC = 21,
        #[doc = "22 - EXTI Line0 interrupt"]
        EXTI0 = 22,
        #[doc = "23 - EXTI Line1 interrupt"]
        EXTI1 = 23,
        #[doc = "24 - EXTI Line2 interrupt"]
        EXTI2 = 24,
        #[doc = "25 - EXTI Line3 interrupt"]
        EXTI3 = 25,
        #[doc = "26 - EXTI Line4 interrupt"]
        EXTI4 = 26,
        #[doc = "27 - DMA1 Channel1 global interrupt"]
        DMA1_CHANNEL1 = 27,
        #[doc = "28 - DMA1 Channel2 global interrupt"]
        DMA1_CHANNEL2 = 28,
        #[doc = "29 - DMA1 Channel3 global interrupt"]
        DMA1_CHANNEL3 = 29,
        #[doc = "30 - DMA1 Channel4 global interrupt"]
        DMA1_CHANNEL4 = 30,
        #[doc = "31 - DMA1 Channel5 global interrupt"]
        DMA1_CHANNEL5 = 31,
        #[doc = "32 - DMA1 Channel6 global interrupt"]
        DMA1_CHANNEL6 = 32,
        #[doc = "33 - DMA1 Channel7 global interrupt"]
        DMA1_CHANNEL7 = 33,
        #[doc = "34 - ADC global interrupt"]
        ADC = 34,
        #[doc = "39 - EXTI Line\\[9:5\\]
interrupts"]
        EXTI9_5 = 39,
        #[doc = "40 - TIM1 Break interrupt"]
        TIM1_BRK = 40,
        #[doc = "41 - TIM1 Update interrupt"]
        TIM1_UP_ = 41,
        #[doc = "42 - TIM1 Trigger and Commutation interrupts"]
        TIM1_TRG_COM = 42,
        #[doc = "43 - TIM1 Capture Compare interrupt"]
        TIM1_CC = 43,
        #[doc = "44 - TIM2 global interrupt"]
        TIM2 = 44,
        #[doc = "45 - TIM3 global interrupt"]
        TIM3 = 45,
        #[doc = "46 - TIM4 global interrupt"]
        TIM4 = 46,
        #[doc = "47 - I2C1 event interrupt"]
        I2C1_EV = 47,
        #[doc = "48 - I2C1 error interrupt"]
        I2C1_ER = 48,
        #[doc = "49 - I2C2 event interrupt"]
        I2C2_EV = 49,
        #[doc = "50 - I2C2 error interrupt"]
        I2C2_ER = 50,
        #[doc = "51 - SPI1 global interrupt"]
        SPI1 = 51,
        #[doc = "52 - SPI2 global interrupt"]
        SPI2 = 52,
        #[doc = "53 - USART1 global interrupt"]
        USART1 = 53,
        #[doc = "54 - USART2 global interrupt"]
        USART2 = 54,
        #[doc = "55 - USART3 global interrupt"]
        USART3 = 55,
        #[doc = "56 - EXTI Line\\[15:10\\]
interrupts"]
        EXTI15_10 = 56,
        #[doc = "57 - RTC Alarms through EXTI line interrupt"]
        RTCALARM = 57,
        #[doc = "59 - USBHD_IRQHandler"]
        USBHD = 59,
    }
    #[doc = r" TryFromInterruptError"]
    #[derive(Debug, Copy, Clone)]
    pub struct TryFromInterruptError(());
    impl Interrupt {
        #[doc = r" Attempt to convert a given value into an `Interrupt`"]
        #[inline]
        pub fn try_from(value: u8) -> Result<Self, TryFromInterruptError> {
            match value {
                16 => Ok(Interrupt::WWDG),
                17 => Ok(Interrupt::PVD),
                18 => Ok(Interrupt::TAMPER),
                19 => Ok(Interrupt::RTC),
                20 => Ok(Interrupt::FLASH),
                21 => Ok(Interrupt::RCC),
                22 => Ok(Interrupt::EXTI0),
                23 => Ok(Interrupt::EXTI1),
                24 => Ok(Interrupt::EXTI2),
                25 => Ok(Interrupt::EXTI3),
                26 => Ok(Interrupt::EXTI4),
                27 => Ok(Interrupt::DMA1_CHANNEL1),
                28 => Ok(Interrupt::DMA1_CHANNEL2),
                29 => Ok(Interrupt::DMA1_CHANNEL3),
                30 => Ok(Interrupt::DMA1_CHANNEL4),
                31 => Ok(Interrupt::DMA1_CHANNEL5),
                32 => Ok(Interrupt::DMA1_CHANNEL6),
                33 => Ok(Interrupt::DMA1_CHANNEL7),
                34 => Ok(Interrupt::ADC),
                39 => Ok(Interrupt::EXTI9_5),
                40 => Ok(Interrupt::TIM1_BRK),
                41 => Ok(Interrupt::TIM1_UP_),
                42 => Ok(Interrupt::TIM1_TRG_COM),
                43 => Ok(Interrupt::TIM1_CC),
                44 => Ok(Interrupt::TIM2),
                45 => Ok(Interrupt::TIM3),
                46 => Ok(Interrupt::TIM4),
                47 => Ok(Interrupt::I2C1_EV),
                48 => Ok(Interrupt::I2C1_ER),
                49 => Ok(Interrupt::I2C2_EV),
                50 => Ok(Interrupt::I2C2_ER),
                51 => Ok(Interrupt::SPI1),
                52 => Ok(Interrupt::SPI2),
                53 => Ok(Interrupt::USART1),
                54 => Ok(Interrupt::USART2),
                55 => Ok(Interrupt::USART3),
                56 => Ok(Interrupt::EXTI15_10),
                57 => Ok(Interrupt::RTCALARM),
                59 => Ok(Interrupt::USBHD),
                _ => Err(TryFromInterruptError(())),
            }
        }
    }
    #[cfg(feature = "rt")]
    #[macro_export]
    #[doc = r" Assigns a handler to an interrupt"]
    #[doc = r""]
    #[doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
    #[doc = r" function that will be used as the handler of that interrupt. That function"]
    #[doc = r" must have signature `fn()`."]
    #[doc = r""]
    #[doc = r" Optionally, a third argument may be used to declare interrupt local data."]
    #[doc = r" The handler will have exclusive access to these *local* variables on each"]
    #[doc = r" invocation. If the third argument is used then the signature of the handler"]
    #[doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
    #[doc = r" passed to the macro."]
    #[doc = r""]
    #[doc = r" # Example"]
    #[doc = r""]
    #[doc = r" ``` ignore"]
    #[doc = r" interrupt!(TIM2, periodic);"]
    #[doc = r""]
    #[doc = r" fn periodic() {"]
    #[doc = r#"     print!(".");"#]
    #[doc = r" }"]
    #[doc = r""]
    #[doc = r" interrupt!(TIM3, tick, locals: {"]
    #[doc = r"     tick: bool = false;"]
    #[doc = r" });"]
    #[doc = r""]
    #[doc = r" fn tick(locals: &mut TIM3::Locals) {"]
    #[doc = r"     locals.tick = !locals.tick;"]
    #[doc = r""]
    #[doc = r"     if locals.tick {"]
    #[doc = r#"         println!("Tick");"#]
    #[doc = r"     } else {"]
    #[doc = r#"         println!("Tock");"#]
    #[doc = r"     }"]
    #[doc = r" }"]
    #[doc = r" ```"]
    macro_rules ! interrupt { ($ NAME : ident , $ path : path , locals : { $ ($ lvar : ident : $ lty : ty = $ lval : expr ;) * }) => { # [allow (non_snake_case)]
mod $ NAME { pub struct Locals { $ (pub $ lvar : $ lty ,) * } } # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ($ lvar : $ lval ,) * } ; let f : fn (& mut self :: $ NAME :: Locals) = $ path ; f (unsafe { & mut LOCALS }) ; } } ; ($ NAME : ident , $ path : path) => { # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn () = $ path ; f () ; } } }
}
pub use self::interrupt::Interrupt;
#[doc = "Power control"]
pub struct PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWR {}
impl PWR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwr::RegisterBlock = 0x4000_7000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
#[doc = "Power control"]
pub mod pwr {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Power control register (PWR_CTRL)"]
        pub ctlr: crate::Reg<ctlr::CTLR_SPEC>,
        #[doc = "0x04 - Power control register (PWR_CSR)"]
        pub csr: crate::Reg<csr::CSR_SPEC>,
    }
    #[doc = "CTLR register accessor: an alias for `Reg<CTLR_SPEC>`"]
    pub type CTLR = crate::Reg<ctlr::CTLR_SPEC>;
    #[doc = "Power control register (PWR_CTRL)"]
    pub mod ctlr {
        #[doc = "Register `CTLR` reader"]
        pub struct R(crate::R<CTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR` writer"]
        pub struct W(crate::W<CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LPDS` reader - Low Power Deep Sleep"]
        pub struct LPDS_R(crate::FieldReader<bool>);
        impl LPDS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LPDS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LPDS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LPDS` writer - Low Power Deep Sleep"]
        pub struct LPDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `PDDS` reader - Power Down Deep Sleep"]
        pub struct PDDS_R(crate::FieldReader<bool>);
        impl PDDS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PDDS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PDDS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PDDS` writer - Power Down Deep Sleep"]
        pub struct PDDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `CWUF` reader - Clear Wake-up Flag"]
        pub struct CWUF_R(crate::FieldReader<bool>);
        impl CWUF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CWUF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CWUF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CWUF` writer - Clear Wake-up Flag"]
        pub struct CWUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CSBF` reader - Clear STANDBY Flag"]
        pub struct CSBF_R(crate::FieldReader<bool>);
        impl CSBF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSBF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSBF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSBF` writer - Clear STANDBY Flag"]
        pub struct CSBF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSBF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `PVDE` reader - Power Voltage Detector Enable"]
        pub struct PVDE_R(crate::FieldReader<bool>);
        impl PVDE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PVDE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PVDE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PVDE` writer - Power Voltage Detector Enable"]
        pub struct PVDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PVDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `PLS` reader - PVD Level Selection"]
        pub struct PLS_R(crate::FieldReader<u8>);
        impl PLS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PLS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PLS` writer - PVD Level Selection"]
        pub struct PLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 5)) | ((value as u32 & 7) << 5);
                self.w
            }
        }
        #[doc = "Field `DBP` reader - Disable Backup Domain write protection"]
        pub struct DBP_R(crate::FieldReader<bool>);
        impl DBP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DBP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBP` writer - Disable Backup Domain write protection"]
        pub struct DBP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Low Power Deep Sleep"]
            #[inline(always)]
            pub fn lpds(&self) -> LPDS_R {
                LPDS_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Power Down Deep Sleep"]
            #[inline(always)]
            pub fn pdds(&self) -> PDDS_R {
                PDDS_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Clear Wake-up Flag"]
            #[inline(always)]
            pub fn cwuf(&self) -> CWUF_R {
                CWUF_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Clear STANDBY Flag"]
            #[inline(always)]
            pub fn csbf(&self) -> CSBF_R {
                CSBF_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Power Voltage Detector Enable"]
            #[inline(always)]
            pub fn pvde(&self) -> PVDE_R {
                PVDE_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bits 5:7 - PVD Level Selection"]
            #[inline(always)]
            pub fn pls(&self) -> PLS_R {
                PLS_R::new(((self.bits >> 5) & 7) as u8)
            }
            #[doc = "Bit 8 - Disable Backup Domain write protection"]
            #[inline(always)]
            pub fn dbp(&self) -> DBP_R {
                DBP_R::new(((self.bits >> 8) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Low Power Deep Sleep"]
            #[inline(always)]
            pub fn lpds(&mut self) -> LPDS_W {
                LPDS_W { w: self }
            }
            #[doc = "Bit 1 - Power Down Deep Sleep"]
            #[inline(always)]
            pub fn pdds(&mut self) -> PDDS_W {
                PDDS_W { w: self }
            }
            #[doc = "Bit 2 - Clear Wake-up Flag"]
            #[inline(always)]
            pub fn cwuf(&mut self) -> CWUF_W {
                CWUF_W { w: self }
            }
            #[doc = "Bit 3 - Clear STANDBY Flag"]
            #[inline(always)]
            pub fn csbf(&mut self) -> CSBF_W {
                CSBF_W { w: self }
            }
            #[doc = "Bit 4 - Power Voltage Detector Enable"]
            #[inline(always)]
            pub fn pvde(&mut self) -> PVDE_W {
                PVDE_W { w: self }
            }
            #[doc = "Bits 5:7 - PVD Level Selection"]
            #[inline(always)]
            pub fn pls(&mut self) -> PLS_W {
                PLS_W { w: self }
            }
            #[doc = "Bit 8 - Disable Backup Domain write protection"]
            #[inline(always)]
            pub fn dbp(&mut self) -> DBP_W {
                DBP_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Power control register (PWR_CTRL)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr](index.html) module"]
        pub struct CTLR_SPEC;
        impl crate::RegisterSpec for CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr::R](R) reader structure"]
        impl crate::Readable for CTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr::W](W) writer structure"]
        impl crate::Writable for CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR to value 0"]
        impl crate::Resettable for CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CSR register accessor: an alias for `Reg<CSR_SPEC>`"]
    pub type CSR = crate::Reg<csr::CSR_SPEC>;
    #[doc = "Power control register (PWR_CSR)"]
    pub mod csr {
        #[doc = "Register `CSR` reader"]
        pub struct R(crate::R<CSR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CSR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CSR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CSR` writer"]
        pub struct W(crate::W<CSR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CSR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CSR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `WUF` reader - Wake-Up Flag"]
        pub struct WUF_R(crate::FieldReader<bool>);
        impl WUF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WUF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WUF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SBF` reader - STANDBY Flag"]
        pub struct SBF_R(crate::FieldReader<bool>);
        impl SBF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SBF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SBF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PVDO` reader - PVD Output"]
        pub struct PVDO_R(crate::FieldReader<bool>);
        impl PVDO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PVDO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PVDO_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EWUP` reader - Enable WKUP pin"]
        pub struct EWUP_R(crate::FieldReader<bool>);
        impl EWUP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EWUP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EWUP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EWUP` writer - Enable WKUP pin"]
        pub struct EWUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Wake-Up Flag"]
            #[inline(always)]
            pub fn wuf(&self) -> WUF_R {
                WUF_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - STANDBY Flag"]
            #[inline(always)]
            pub fn sbf(&self) -> SBF_R {
                SBF_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - PVD Output"]
            #[inline(always)]
            pub fn pvdo(&self) -> PVDO_R {
                PVDO_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 8 - Enable WKUP pin"]
            #[inline(always)]
            pub fn ewup(&self) -> EWUP_R {
                EWUP_R::new(((self.bits >> 8) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Enable WKUP pin"]
            #[inline(always)]
            pub fn ewup(&mut self) -> EWUP_W {
                EWUP_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Power control register (PWR_CSR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](index.html) module"]
        pub struct CSR_SPEC;
        impl crate::RegisterSpec for CSR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [csr::R](R) reader structure"]
        impl crate::Readable for CSR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [csr::W](W) writer structure"]
        impl crate::Writable for CSR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CSR to value 0"]
        impl crate::Resettable for CSR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Reset and clock control"]
pub struct RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RCC {}
impl RCC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rcc::RegisterBlock = 0x4002_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
#[doc = "Reset and clock control"]
pub mod rcc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Clock control register"]
        pub ctlr: crate::Reg<ctlr::CTLR_SPEC>,
        #[doc = "0x04 - Clock configuration register (RCC_CFGR0)"]
        pub cfgr0: crate::Reg<cfgr0::CFGR0_SPEC>,
        #[doc = "0x08 - Clock interrupt register (RCC_INTR)"]
        pub intr: crate::Reg<intr::INTR_SPEC>,
        #[doc = "0x0c - APB2 peripheral reset register (RCC_APB2PRSTR)"]
        pub apb2prstr: crate::Reg<apb2prstr::APB2PRSTR_SPEC>,
        #[doc = "0x10 - APB1 peripheral reset register (RCC_APB1PRSTR)"]
        pub apb1prstr: crate::Reg<apb1prstr::APB1PRSTR_SPEC>,
        #[doc = "0x14 - AHB Peripheral Clock enable register (RCC_AHBPCENR)"]
        pub ahbpcenr: crate::Reg<ahbpcenr::AHBPCENR_SPEC>,
        #[doc = "0x18 - APB2 peripheral clock enable register (RCC_APB2PCENR)"]
        pub apb2pcenr: crate::Reg<apb2pcenr::APB2PCENR_SPEC>,
        #[doc = "0x1c - APB1 peripheral clock enable register (RCC_APB1PCENR)"]
        pub apb1pcenr: crate::Reg<apb1pcenr::APB1PCENR_SPEC>,
        #[doc = "0x20 - Backup domain control register (RCC_BDCTLR)"]
        pub bdctlr: crate::Reg<bdctlr::BDCTLR_SPEC>,
        #[doc = "0x24 - Control/status register (RCC_RSTSCKR)"]
        pub rstsckr: crate::Reg<rstsckr::RSTSCKR_SPEC>,
        #[doc = "0x28 - AHB reset register (RCC_APHBRSTR)"]
        pub ahbrstr: crate::Reg<ahbrstr::AHBRSTR_SPEC>,
    }
    #[doc = "CTLR register accessor: an alias for `Reg<CTLR_SPEC>`"]
    pub type CTLR = crate::Reg<ctlr::CTLR_SPEC>;
    #[doc = "Clock control register"]
    pub mod ctlr {
        #[doc = "Register `CTLR` reader"]
        pub struct R(crate::R<CTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR` writer"]
        pub struct W(crate::W<CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HSION` reader - Internal High Speed clock enable"]
        pub struct HSION_R(crate::FieldReader<bool>);
        impl HSION_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSION_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSION_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSION` writer - Internal High Speed clock enable"]
        pub struct HSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `HSIRDY` reader - Internal High Speed clock ready flag"]
        pub struct HSIRDY_R(crate::FieldReader<bool>);
        impl HSIRDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSIRDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSIRDY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSITRIM` reader - Internal High Speed clock trimming"]
        pub struct HSITRIM_R(crate::FieldReader<u8>);
        impl HSITRIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                HSITRIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSITRIM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSITRIM` writer - Internal High Speed clock trimming"]
        pub struct HSITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 3)) | ((value as u32 & 0x1f) << 3);
                self.w
            }
        }
        #[doc = "Field `HSICAL` reader - Internal High Speed clock Calibration"]
        pub struct HSICAL_R(crate::FieldReader<u8>);
        impl HSICAL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                HSICAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSICAL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSEON` reader - External High Speed clock enable"]
        pub struct HSEON_R(crate::FieldReader<bool>);
        impl HSEON_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSEON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSEON_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSEON` writer - External High Speed clock enable"]
        pub struct HSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `HSERDY` reader - External High Speed clock ready flag"]
        pub struct HSERDY_R(crate::FieldReader<bool>);
        impl HSERDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSERDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSERDY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSEBYP` reader - External High Speed clock Bypass"]
        pub struct HSEBYP_R(crate::FieldReader<bool>);
        impl HSEBYP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSEBYP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSEBYP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSEBYP` writer - External High Speed clock Bypass"]
        pub struct HSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEBYP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        #[doc = "Field `CSSON` reader - Clock Security System enable"]
        pub struct CSSON_R(crate::FieldReader<bool>);
        impl CSSON_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSSON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSSON_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSSON` writer - Clock Security System enable"]
        pub struct CSSON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 19)) | ((value as u32 & 1) << 19);
                self.w
            }
        }
        #[doc = "Field `PLLON` reader - PLL enable"]
        pub struct PLLON_R(crate::FieldReader<bool>);
        impl PLLON_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PLLON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLLON_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PLLON` writer - PLL enable"]
        pub struct PLLON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 24)) | ((value as u32 & 1) << 24);
                self.w
            }
        }
        #[doc = "Field `PLLRDY` reader - PLL clock ready flag"]
        pub struct PLLRDY_R(crate::FieldReader<bool>);
        impl PLLRDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PLLRDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLLRDY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Internal High Speed clock enable"]
            #[inline(always)]
            pub fn hsion(&self) -> HSION_R {
                HSION_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Internal High Speed clock ready flag"]
            #[inline(always)]
            pub fn hsirdy(&self) -> HSIRDY_R {
                HSIRDY_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bits 3:7 - Internal High Speed clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&self) -> HSITRIM_R {
                HSITRIM_R::new(((self.bits >> 3) & 0x1f) as u8)
            }
            #[doc = "Bits 8:15 - Internal High Speed clock Calibration"]
            #[inline(always)]
            pub fn hsical(&self) -> HSICAL_R {
                HSICAL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 16 - External High Speed clock enable"]
            #[inline(always)]
            pub fn hseon(&self) -> HSEON_R {
                HSEON_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - External High Speed clock ready flag"]
            #[inline(always)]
            pub fn hserdy(&self) -> HSERDY_R {
                HSERDY_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - External High Speed clock Bypass"]
            #[inline(always)]
            pub fn hsebyp(&self) -> HSEBYP_R {
                HSEBYP_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Clock Security System enable"]
            #[inline(always)]
            pub fn csson(&self) -> CSSON_R {
                CSSON_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&self) -> PLLON_R {
                PLLON_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - PLL clock ready flag"]
            #[inline(always)]
            pub fn pllrdy(&self) -> PLLRDY_R {
                PLLRDY_R::new(((self.bits >> 25) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Internal High Speed clock enable"]
            #[inline(always)]
            pub fn hsion(&mut self) -> HSION_W {
                HSION_W { w: self }
            }
            #[doc = "Bits 3:7 - Internal High Speed clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&mut self) -> HSITRIM_W {
                HSITRIM_W { w: self }
            }
            #[doc = "Bit 16 - External High Speed clock enable"]
            #[inline(always)]
            pub fn hseon(&mut self) -> HSEON_W {
                HSEON_W { w: self }
            }
            #[doc = "Bit 18 - External High Speed clock Bypass"]
            #[inline(always)]
            pub fn hsebyp(&mut self) -> HSEBYP_W {
                HSEBYP_W { w: self }
            }
            #[doc = "Bit 19 - Clock Security System enable"]
            #[inline(always)]
            pub fn csson(&mut self) -> CSSON_W {
                CSSON_W { w: self }
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&mut self) -> PLLON_W {
                PLLON_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr](index.html) module"]
        pub struct CTLR_SPEC;
        impl crate::RegisterSpec for CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr::R](R) reader structure"]
        impl crate::Readable for CTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr::W](W) writer structure"]
        impl crate::Writable for CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR to value 0x83"]
        impl crate::Resettable for CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x83
            }
        }
    }
    #[doc = "CFGR0 register accessor: an alias for `Reg<CFGR0_SPEC>`"]
    pub type CFGR0 = crate::Reg<cfgr0::CFGR0_SPEC>;
    #[doc = "Clock configuration register (RCC_CFGR0)"]
    pub mod cfgr0 {
        #[doc = "Register `CFGR0` reader"]
        pub struct R(crate::R<CFGR0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR0` writer"]
        pub struct W(crate::W<CFGR0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SW` reader - System clock Switch"]
        pub struct SW_R(crate::FieldReader<u8>);
        impl SW_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SW_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SW_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SW` writer - System clock Switch"]
        pub struct SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        #[doc = "Field `SWS` reader - System Clock Switch Status"]
        pub struct SWS_R(crate::FieldReader<u8>);
        impl SWS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SWS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HPRE` reader - AHB prescaler"]
        pub struct HPRE_R(crate::FieldReader<u8>);
        impl HPRE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                HPRE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HPRE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HPRE` writer - AHB prescaler"]
        pub struct HPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `PPRE1` reader - APB Low speed prescaler (APB1)"]
        pub struct PPRE1_R(crate::FieldReader<u8>);
        impl PPRE1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PPRE1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PPRE1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PPRE1` writer - APB Low speed prescaler (APB1)"]
        pub struct PPRE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PPRE1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 8)) | ((value as u32 & 7) << 8);
                self.w
            }
        }
        #[doc = "Field `PPRE2` reader - APB High speed prescaler (APB2)"]
        pub struct PPRE2_R(crate::FieldReader<u8>);
        impl PPRE2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PPRE2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PPRE2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PPRE2` writer - APB High speed prescaler (APB2)"]
        pub struct PPRE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PPRE2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 11)) | ((value as u32 & 7) << 11);
                self.w
            }
        }
        #[doc = "Field `ADCPRE` reader - ADC prescaler"]
        pub struct ADCPRE_R(crate::FieldReader<u8>);
        impl ADCPRE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ADCPRE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADCPRE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADCPRE` writer - ADC prescaler"]
        pub struct ADCPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCPRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 14)) | ((value as u32 & 3) << 14);
                self.w
            }
        }
        #[doc = "Field `PLLSRC` reader - PLL entry clock source"]
        pub struct PLLSRC_R(crate::FieldReader<bool>);
        impl PLLSRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PLLSRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLLSRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PLLSRC` writer - PLL entry clock source"]
        pub struct PLLSRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLSRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `PLLXTPRE` reader - HSE divider for PLL entry"]
        pub struct PLLXTPRE_R(crate::FieldReader<bool>);
        impl PLLXTPRE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PLLXTPRE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLLXTPRE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PLLXTPRE` writer - HSE divider for PLL entry"]
        pub struct PLLXTPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLXTPRE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `PLLMUL` reader - PLL Multiplication Factor"]
        pub struct PLLMUL_R(crate::FieldReader<u8>);
        impl PLLMUL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PLLMUL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLLMUL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PLLMUL` writer - PLL Multiplication Factor"]
        pub struct PLLMUL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLMUL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 18)) | ((value as u32 & 0x0f) << 18);
                self.w
            }
        }
        #[doc = "Field `USBPRE` reader - USB prescaler"]
        pub struct USBPRE_R(crate::FieldReader<bool>);
        impl USBPRE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBPRE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBPRE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBPRE` writer - USB prescaler"]
        pub struct USBPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBPRE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 22)) | ((value as u32 & 1) << 22);
                self.w
            }
        }
        #[doc = "Field `MCO` reader - Microcontroller clock output"]
        pub struct MCO_R(crate::FieldReader<u8>);
        impl MCO_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MCO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MCO_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MCO` writer - Microcontroller clock output"]
        pub struct MCO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 24)) | ((value as u32 & 7) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - System clock Switch"]
            #[inline(always)]
            pub fn sw(&self) -> SW_R {
                SW_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - System Clock Switch Status"]
            #[inline(always)]
            pub fn sws(&self) -> SWS_R {
                SWS_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:7 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&self) -> HPRE_R {
                HPRE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:10 - APB Low speed prescaler (APB1)"]
            #[inline(always)]
            pub fn ppre1(&self) -> PPRE1_R {
                PPRE1_R::new(((self.bits >> 8) & 7) as u8)
            }
            #[doc = "Bits 11:13 - APB High speed prescaler (APB2)"]
            #[inline(always)]
            pub fn ppre2(&self) -> PPRE2_R {
                PPRE2_R::new(((self.bits >> 11) & 7) as u8)
            }
            #[doc = "Bits 14:15 - ADC prescaler"]
            #[inline(always)]
            pub fn adcpre(&self) -> ADCPRE_R {
                ADCPRE_R::new(((self.bits >> 14) & 3) as u8)
            }
            #[doc = "Bit 16 - PLL entry clock source"]
            #[inline(always)]
            pub fn pllsrc(&self) -> PLLSRC_R {
                PLLSRC_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - HSE divider for PLL entry"]
            #[inline(always)]
            pub fn pllxtpre(&self) -> PLLXTPRE_R {
                PLLXTPRE_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bits 18:21 - PLL Multiplication Factor"]
            #[inline(always)]
            pub fn pllmul(&self) -> PLLMUL_R {
                PLLMUL_R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bit 22 - USB prescaler"]
            #[inline(always)]
            pub fn usbpre(&self) -> USBPRE_R {
                USBPRE_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bits 24:26 - Microcontroller clock output"]
            #[inline(always)]
            pub fn mco(&self) -> MCO_R {
                MCO_R::new(((self.bits >> 24) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - System clock Switch"]
            #[inline(always)]
            pub fn sw(&mut self) -> SW_W {
                SW_W { w: self }
            }
            #[doc = "Bits 4:7 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&mut self) -> HPRE_W {
                HPRE_W { w: self }
            }
            #[doc = "Bits 8:10 - APB Low speed prescaler (APB1)"]
            #[inline(always)]
            pub fn ppre1(&mut self) -> PPRE1_W {
                PPRE1_W { w: self }
            }
            #[doc = "Bits 11:13 - APB High speed prescaler (APB2)"]
            #[inline(always)]
            pub fn ppre2(&mut self) -> PPRE2_W {
                PPRE2_W { w: self }
            }
            #[doc = "Bits 14:15 - ADC prescaler"]
            #[inline(always)]
            pub fn adcpre(&mut self) -> ADCPRE_W {
                ADCPRE_W { w: self }
            }
            #[doc = "Bit 16 - PLL entry clock source"]
            #[inline(always)]
            pub fn pllsrc(&mut self) -> PLLSRC_W {
                PLLSRC_W { w: self }
            }
            #[doc = "Bit 17 - HSE divider for PLL entry"]
            #[inline(always)]
            pub fn pllxtpre(&mut self) -> PLLXTPRE_W {
                PLLXTPRE_W { w: self }
            }
            #[doc = "Bits 18:21 - PLL Multiplication Factor"]
            #[inline(always)]
            pub fn pllmul(&mut self) -> PLLMUL_W {
                PLLMUL_W { w: self }
            }
            #[doc = "Bit 22 - USB prescaler"]
            #[inline(always)]
            pub fn usbpre(&mut self) -> USBPRE_W {
                USBPRE_W { w: self }
            }
            #[doc = "Bits 24:26 - Microcontroller clock output"]
            #[inline(always)]
            pub fn mco(&mut self) -> MCO_W {
                MCO_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock configuration register (RCC_CFGR0)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr0](index.html) module"]
        pub struct CFGR0_SPEC;
        impl crate::RegisterSpec for CFGR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr0::R](R) reader structure"]
        impl crate::Readable for CFGR0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr0::W](W) writer structure"]
        impl crate::Writable for CFGR0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR0 to value 0"]
        impl crate::Resettable for CFGR0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "INTR register accessor: an alias for `Reg<INTR_SPEC>`"]
    pub type INTR = crate::Reg<intr::INTR_SPEC>;
    #[doc = "Clock interrupt register (RCC_INTR)"]
    pub mod intr {
        #[doc = "Register `INTR` reader"]
        pub struct R(crate::R<INTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `INTR` writer"]
        pub struct W(crate::W<INTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<INTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<INTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<INTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LSIRDYF` reader - LSI Ready Interrupt flag"]
        pub struct LSIRDYF_R(crate::FieldReader<bool>);
        impl LSIRDYF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSIRDYF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSIRDYF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSERDYF` reader - LSE Ready Interrupt flag"]
        pub struct LSERDYF_R(crate::FieldReader<bool>);
        impl LSERDYF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSERDYF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSERDYF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSIRDYF` reader - HSI Ready Interrupt flag"]
        pub struct HSIRDYF_R(crate::FieldReader<bool>);
        impl HSIRDYF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSIRDYF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSIRDYF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSERDYF` reader - HSE Ready Interrupt flag"]
        pub struct HSERDYF_R(crate::FieldReader<bool>);
        impl HSERDYF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSERDYF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSERDYF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PLLRDYF` reader - PLL Ready Interrupt flag"]
        pub struct PLLRDYF_R(crate::FieldReader<bool>);
        impl PLLRDYF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PLLRDYF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLLRDYF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSSF` reader - Clock Security System Interrupt flag"]
        pub struct CSSF_R(crate::FieldReader<bool>);
        impl CSSF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSSF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSSF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSIRDYIE` reader - LSI Ready Interrupt Enable"]
        pub struct LSIRDYIE_R(crate::FieldReader<bool>);
        impl LSIRDYIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSIRDYIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSIRDYIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSIRDYIE` writer - LSI Ready Interrupt Enable"]
        pub struct LSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `LSERDYIE` reader - LSE Ready Interrupt Enable"]
        pub struct LSERDYIE_R(crate::FieldReader<bool>);
        impl LSERDYIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSERDYIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSERDYIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSERDYIE` writer - LSE Ready Interrupt Enable"]
        pub struct LSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `HSIRDYIE` reader - HSI Ready Interrupt Enable"]
        pub struct HSIRDYIE_R(crate::FieldReader<bool>);
        impl HSIRDYIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSIRDYIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSIRDYIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSIRDYIE` writer - HSI Ready Interrupt Enable"]
        pub struct HSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `HSERDYIE` reader - HSE Ready Interrupt Enable"]
        pub struct HSERDYIE_R(crate::FieldReader<bool>);
        impl HSERDYIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSERDYIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSERDYIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSERDYIE` writer - HSE Ready Interrupt Enable"]
        pub struct HSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `PLLRDYIE` reader - PLL Ready Interrupt Enable"]
        pub struct PLLRDYIE_R(crate::FieldReader<bool>);
        impl PLLRDYIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PLLRDYIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLLRDYIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PLLRDYIE` writer - PLL Ready Interrupt Enable"]
        pub struct PLLRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `LSIRDYC` writer - LSI Ready Interrupt Clear"]
        pub struct LSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `LSERDYC` writer - LSE Ready Interrupt Clear"]
        pub struct LSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `HSIRDYC` writer - HSI Ready Interrupt Clear"]
        pub struct HSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        #[doc = "Field `HSERDYC` writer - HSE Ready Interrupt Clear"]
        pub struct HSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 19)) | ((value as u32 & 1) << 19);
                self.w
            }
        }
        #[doc = "Field `PLLRDYC` writer - PLL Ready Interrupt Clear"]
        pub struct PLLRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 20)) | ((value as u32 & 1) << 20);
                self.w
            }
        }
        #[doc = "Field `CSSC` writer - Clock security system interrupt clear"]
        pub struct CSSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 23)) | ((value as u32 & 1) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - LSI Ready Interrupt flag"]
            #[inline(always)]
            pub fn lsirdyf(&self) -> LSIRDYF_R {
                LSIRDYF_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - LSE Ready Interrupt flag"]
            #[inline(always)]
            pub fn lserdyf(&self) -> LSERDYF_R {
                LSERDYF_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - HSI Ready Interrupt flag"]
            #[inline(always)]
            pub fn hsirdyf(&self) -> HSIRDYF_R {
                HSIRDYF_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - HSE Ready Interrupt flag"]
            #[inline(always)]
            pub fn hserdyf(&self) -> HSERDYF_R {
                HSERDYF_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - PLL Ready Interrupt flag"]
            #[inline(always)]
            pub fn pllrdyf(&self) -> PLLRDYF_R {
                PLLRDYF_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 7 - Clock Security System Interrupt flag"]
            #[inline(always)]
            pub fn cssf(&self) -> CSSF_R {
                CSSF_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - LSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lsirdyie(&self) -> LSIRDYIE_R {
                LSIRDYIE_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - LSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lserdyie(&self) -> LSERDYIE_R {
                LSERDYIE_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - HSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hsirdyie(&self) -> HSIRDYIE_R {
                HSIRDYIE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - HSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hserdyie(&self) -> HSERDYIE_R {
                HSERDYIE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - PLL Ready Interrupt Enable"]
            #[inline(always)]
            pub fn pllrdyie(&self) -> PLLRDYIE_R {
                PLLRDYIE_R::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - LSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lsirdyie(&mut self) -> LSIRDYIE_W {
                LSIRDYIE_W { w: self }
            }
            #[doc = "Bit 9 - LSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lserdyie(&mut self) -> LSERDYIE_W {
                LSERDYIE_W { w: self }
            }
            #[doc = "Bit 10 - HSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hsirdyie(&mut self) -> HSIRDYIE_W {
                HSIRDYIE_W { w: self }
            }
            #[doc = "Bit 11 - HSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hserdyie(&mut self) -> HSERDYIE_W {
                HSERDYIE_W { w: self }
            }
            #[doc = "Bit 12 - PLL Ready Interrupt Enable"]
            #[inline(always)]
            pub fn pllrdyie(&mut self) -> PLLRDYIE_W {
                PLLRDYIE_W { w: self }
            }
            #[doc = "Bit 16 - LSI Ready Interrupt Clear"]
            #[inline(always)]
            pub fn lsirdyc(&mut self) -> LSIRDYC_W {
                LSIRDYC_W { w: self }
            }
            #[doc = "Bit 17 - LSE Ready Interrupt Clear"]
            #[inline(always)]
            pub fn lserdyc(&mut self) -> LSERDYC_W {
                LSERDYC_W { w: self }
            }
            #[doc = "Bit 18 - HSI Ready Interrupt Clear"]
            #[inline(always)]
            pub fn hsirdyc(&mut self) -> HSIRDYC_W {
                HSIRDYC_W { w: self }
            }
            #[doc = "Bit 19 - HSE Ready Interrupt Clear"]
            #[inline(always)]
            pub fn hserdyc(&mut self) -> HSERDYC_W {
                HSERDYC_W { w: self }
            }
            #[doc = "Bit 20 - PLL Ready Interrupt Clear"]
            #[inline(always)]
            pub fn pllrdyc(&mut self) -> PLLRDYC_W {
                PLLRDYC_W { w: self }
            }
            #[doc = "Bit 23 - Clock security system interrupt clear"]
            #[inline(always)]
            pub fn cssc(&mut self) -> CSSC_W {
                CSSC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock interrupt register (RCC_INTR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intr](index.html) module"]
        pub struct INTR_SPEC;
        impl crate::RegisterSpec for INTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [intr::R](R) reader structure"]
        impl crate::Readable for INTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [intr::W](W) writer structure"]
        impl crate::Writable for INTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets INTR to value 0"]
        impl crate::Resettable for INTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "APB2PRSTR register accessor: an alias for `Reg<APB2PRSTR_SPEC>`"]
    pub type APB2PRSTR = crate::Reg<apb2prstr::APB2PRSTR_SPEC>;
    #[doc = "APB2 peripheral reset register (RCC_APB2PRSTR)"]
    pub mod apb2prstr {
        #[doc = "Register `APB2PRSTR` reader"]
        pub struct R(crate::R<APB2PRSTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<APB2PRSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<APB2PRSTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<APB2PRSTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `APB2PRSTR` writer"]
        pub struct W(crate::W<APB2PRSTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<APB2PRSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<APB2PRSTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<APB2PRSTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `AFIORST` reader - Alternate function I/O reset"]
        pub struct AFIORST_R(crate::FieldReader<bool>);
        impl AFIORST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFIORST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFIORST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFIORST` writer - Alternate function I/O reset"]
        pub struct AFIORST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFIORST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `IOPARST` reader - IO port A reset"]
        pub struct IOPARST_R(crate::FieldReader<bool>);
        impl IOPARST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPARST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPARST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPARST` writer - IO port A reset"]
        pub struct IOPARST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPARST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `IOPBRST` reader - IO port B reset"]
        pub struct IOPBRST_R(crate::FieldReader<bool>);
        impl IOPBRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPBRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPBRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPBRST` writer - IO port B reset"]
        pub struct IOPBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPBRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `IOPCRST` reader - IO port C reset"]
        pub struct IOPCRST_R(crate::FieldReader<bool>);
        impl IOPCRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPCRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPCRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPCRST` writer - IO port C reset"]
        pub struct IOPCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `IOPDRST` reader - IO port D reset"]
        pub struct IOPDRST_R(crate::FieldReader<bool>);
        impl IOPDRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPDRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPDRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPDRST` writer - IO port D reset"]
        pub struct IOPDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `ADCRST` reader - ADC interface reset"]
        pub struct ADCRST_R(crate::FieldReader<bool>);
        impl ADCRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADCRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADCRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADCRST` writer - ADC interface reset"]
        pub struct ADCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `TIM1RST` reader - TIM1 timer reset"]
        pub struct TIM1RST_R(crate::FieldReader<bool>);
        impl TIM1RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM1RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM1RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM1RST` writer - TIM1 timer reset"]
        pub struct TIM1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `SPI1RST` reader - SPI 1 reset"]
        pub struct SPI1RST_R(crate::FieldReader<bool>);
        impl SPI1RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI1RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI1RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI1RST` writer - SPI 1 reset"]
        pub struct SPI1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `USART1RST` reader - USART1 reset"]
        pub struct USART1RST_R(crate::FieldReader<bool>);
        impl USART1RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART1RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART1RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART1RST` writer - USART1 reset"]
        pub struct USART1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Alternate function I/O reset"]
            #[inline(always)]
            pub fn afiorst(&self) -> AFIORST_R {
                AFIORST_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - IO port A reset"]
            #[inline(always)]
            pub fn ioparst(&self) -> IOPARST_R {
                IOPARST_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - IO port B reset"]
            #[inline(always)]
            pub fn iopbrst(&self) -> IOPBRST_R {
                IOPBRST_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - IO port C reset"]
            #[inline(always)]
            pub fn iopcrst(&self) -> IOPCRST_R {
                IOPCRST_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - IO port D reset"]
            #[inline(always)]
            pub fn iopdrst(&self) -> IOPDRST_R {
                IOPDRST_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 9 - ADC interface reset"]
            #[inline(always)]
            pub fn adcrst(&self) -> ADCRST_R {
                ADCRST_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 11 - TIM1 timer reset"]
            #[inline(always)]
            pub fn tim1rst(&self) -> TIM1RST_R {
                TIM1RST_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - SPI 1 reset"]
            #[inline(always)]
            pub fn spi1rst(&self) -> SPI1RST_R {
                SPI1RST_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 14 - USART1 reset"]
            #[inline(always)]
            pub fn usart1rst(&self) -> USART1RST_R {
                USART1RST_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Alternate function I/O reset"]
            #[inline(always)]
            pub fn afiorst(&mut self) -> AFIORST_W {
                AFIORST_W { w: self }
            }
            #[doc = "Bit 2 - IO port A reset"]
            #[inline(always)]
            pub fn ioparst(&mut self) -> IOPARST_W {
                IOPARST_W { w: self }
            }
            #[doc = "Bit 3 - IO port B reset"]
            #[inline(always)]
            pub fn iopbrst(&mut self) -> IOPBRST_W {
                IOPBRST_W { w: self }
            }
            #[doc = "Bit 4 - IO port C reset"]
            #[inline(always)]
            pub fn iopcrst(&mut self) -> IOPCRST_W {
                IOPCRST_W { w: self }
            }
            #[doc = "Bit 5 - IO port D reset"]
            #[inline(always)]
            pub fn iopdrst(&mut self) -> IOPDRST_W {
                IOPDRST_W { w: self }
            }
            #[doc = "Bit 9 - ADC interface reset"]
            #[inline(always)]
            pub fn adcrst(&mut self) -> ADCRST_W {
                ADCRST_W { w: self }
            }
            #[doc = "Bit 11 - TIM1 timer reset"]
            #[inline(always)]
            pub fn tim1rst(&mut self) -> TIM1RST_W {
                TIM1RST_W { w: self }
            }
            #[doc = "Bit 12 - SPI 1 reset"]
            #[inline(always)]
            pub fn spi1rst(&mut self) -> SPI1RST_W {
                SPI1RST_W { w: self }
            }
            #[doc = "Bit 14 - USART1 reset"]
            #[inline(always)]
            pub fn usart1rst(&mut self) -> USART1RST_W {
                USART1RST_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "APB2 peripheral reset register (RCC_APB2PRSTR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2prstr](index.html) module"]
        pub struct APB2PRSTR_SPEC;
        impl crate::RegisterSpec for APB2PRSTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [apb2prstr::R](R) reader structure"]
        impl crate::Readable for APB2PRSTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [apb2prstr::W](W) writer structure"]
        impl crate::Writable for APB2PRSTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets APB2PRSTR to value 0"]
        impl crate::Resettable for APB2PRSTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "APB1PRSTR register accessor: an alias for `Reg<APB1PRSTR_SPEC>`"]
    pub type APB1PRSTR = crate::Reg<apb1prstr::APB1PRSTR_SPEC>;
    #[doc = "APB1 peripheral reset register (RCC_APB1PRSTR)"]
    pub mod apb1prstr {
        #[doc = "Register `APB1PRSTR` reader"]
        pub struct R(crate::R<APB1PRSTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<APB1PRSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<APB1PRSTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<APB1PRSTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `APB1PRSTR` writer"]
        pub struct W(crate::W<APB1PRSTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<APB1PRSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<APB1PRSTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<APB1PRSTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TIM2RST` reader - Timer 2 reset"]
        pub struct TIM2RST_R(crate::FieldReader<bool>);
        impl TIM2RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM2RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM2RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM2RST` writer - Timer 2 reset"]
        pub struct TIM2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TIM3RST` reader - Timer 3 reset"]
        pub struct TIM3RST_R(crate::FieldReader<bool>);
        impl TIM3RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM3RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM3RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM3RST` writer - Timer 3 reset"]
        pub struct TIM3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `TIM4RST` reader - Timer 4 reset"]
        pub struct TIM4RST_R(crate::FieldReader<bool>);
        impl TIM4RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM4RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM4RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM4RST` writer - Timer 4 reset"]
        pub struct TIM4RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM4RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `WWDGRST` reader - Window watchdog reset"]
        pub struct WWDGRST_R(crate::FieldReader<bool>);
        impl WWDGRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WWDGRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WWDGRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WWDGRST` writer - Window watchdog reset"]
        pub struct WWDGRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `SPI2RST` reader - SPI2 reset"]
        pub struct SPI2RST_R(crate::FieldReader<bool>);
        impl SPI2RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI2RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI2RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI2RST` writer - SPI2 reset"]
        pub struct SPI2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `USART2RST` reader - USART 2 reset"]
        pub struct USART2RST_R(crate::FieldReader<bool>);
        impl USART2RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART2RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART2RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART2RST` writer - USART 2 reset"]
        pub struct USART2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `USART3RST` reader - USART 3 reset"]
        pub struct USART3RST_R(crate::FieldReader<bool>);
        impl USART3RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART3RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART3RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART3RST` writer - USART 3 reset"]
        pub struct USART3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        #[doc = "Field `I2C1RST` reader - I2C1 reset"]
        pub struct I2C1RST_R(crate::FieldReader<bool>);
        impl I2C1RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C1RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C1RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C1RST` writer - I2C1 reset"]
        pub struct I2C1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 21)) | ((value as u32 & 1) << 21);
                self.w
            }
        }
        #[doc = "Field `I2C2RST` reader - I2C2 reset"]
        pub struct I2C2RST_R(crate::FieldReader<bool>);
        impl I2C2RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C2RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C2RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C2RST` writer - I2C2 reset"]
        pub struct I2C2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 22)) | ((value as u32 & 1) << 22);
                self.w
            }
        }
        #[doc = "Field `USBDRST` reader - USBD reset"]
        pub struct USBDRST_R(crate::FieldReader<bool>);
        impl USBDRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBDRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBDRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBDRST` writer - USBD reset"]
        pub struct USBDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 23)) | ((value as u32 & 1) << 23);
                self.w
            }
        }
        #[doc = "Field `CANRST` reader - CAN reset"]
        pub struct CANRST_R(crate::FieldReader<bool>);
        impl CANRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CANRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CANRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CANRST` writer - CAN reset"]
        pub struct CANRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CANRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 25)) | ((value as u32 & 1) << 25);
                self.w
            }
        }
        #[doc = "Field `BKPRST` reader - Backup interface reset"]
        pub struct BKPRST_R(crate::FieldReader<bool>);
        impl BKPRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BKPRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BKPRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BKPRST` writer - Backup interface reset"]
        pub struct BKPRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKPRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 27)) | ((value as u32 & 1) << 27);
                self.w
            }
        }
        #[doc = "Field `PWRRST` reader - Power interface reset"]
        pub struct PWRRST_R(crate::FieldReader<bool>);
        impl PWRRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PWRRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PWRRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PWRRST` writer - Power interface reset"]
        pub struct PWRRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 28)) | ((value as u32 & 1) << 28);
                self.w
            }
        }
        #[doc = "Field `DACRST` reader - DAC interface reset"]
        pub struct DACRST_R(crate::FieldReader<bool>);
        impl DACRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DACRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DACRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DACRST` writer - DAC interface reset"]
        pub struct DACRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 29)) | ((value as u32 & 1) << 29);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer 2 reset"]
            #[inline(always)]
            pub fn tim2rst(&self) -> TIM2RST_R {
                TIM2RST_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Timer 3 reset"]
            #[inline(always)]
            pub fn tim3rst(&self) -> TIM3RST_R {
                TIM3RST_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Timer 4 reset"]
            #[inline(always)]
            pub fn tim4rst(&self) -> TIM4RST_R {
                TIM4RST_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 11 - Window watchdog reset"]
            #[inline(always)]
            pub fn wwdgrst(&self) -> WWDGRST_R {
                WWDGRST_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 14 - SPI2 reset"]
            #[inline(always)]
            pub fn spi2rst(&self) -> SPI2RST_R {
                SPI2RST_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 17 - USART 2 reset"]
            #[inline(always)]
            pub fn usart2rst(&self) -> USART2RST_R {
                USART2RST_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - USART 3 reset"]
            #[inline(always)]
            pub fn usart3rst(&self) -> USART3RST_R {
                USART3RST_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 21 - I2C1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&self) -> I2C1RST_R {
                I2C1RST_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - I2C2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&self) -> I2C2RST_R {
                I2C2RST_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - USBD reset"]
            #[inline(always)]
            pub fn usbdrst(&self) -> USBDRST_R {
                USBDRST_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 25 - CAN reset"]
            #[inline(always)]
            pub fn canrst(&self) -> CANRST_R {
                CANRST_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 27 - Backup interface reset"]
            #[inline(always)]
            pub fn bkprst(&self) -> BKPRST_R {
                BKPRST_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&self) -> PWRRST_R {
                PWRRST_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - DAC interface reset"]
            #[inline(always)]
            pub fn dacrst(&self) -> DACRST_R {
                DACRST_R::new(((self.bits >> 29) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Timer 2 reset"]
            #[inline(always)]
            pub fn tim2rst(&mut self) -> TIM2RST_W {
                TIM2RST_W { w: self }
            }
            #[doc = "Bit 1 - Timer 3 reset"]
            #[inline(always)]
            pub fn tim3rst(&mut self) -> TIM3RST_W {
                TIM3RST_W { w: self }
            }
            #[doc = "Bit 2 - Timer 4 reset"]
            #[inline(always)]
            pub fn tim4rst(&mut self) -> TIM4RST_W {
                TIM4RST_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog reset"]
            #[inline(always)]
            pub fn wwdgrst(&mut self) -> WWDGRST_W {
                WWDGRST_W { w: self }
            }
            #[doc = "Bit 14 - SPI2 reset"]
            #[inline(always)]
            pub fn spi2rst(&mut self) -> SPI2RST_W {
                SPI2RST_W { w: self }
            }
            #[doc = "Bit 17 - USART 2 reset"]
            #[inline(always)]
            pub fn usart2rst(&mut self) -> USART2RST_W {
                USART2RST_W { w: self }
            }
            #[doc = "Bit 18 - USART 3 reset"]
            #[inline(always)]
            pub fn usart3rst(&mut self) -> USART3RST_W {
                USART3RST_W { w: self }
            }
            #[doc = "Bit 21 - I2C1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&mut self) -> I2C1RST_W {
                I2C1RST_W { w: self }
            }
            #[doc = "Bit 22 - I2C2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&mut self) -> I2C2RST_W {
                I2C2RST_W { w: self }
            }
            #[doc = "Bit 23 - USBD reset"]
            #[inline(always)]
            pub fn usbdrst(&mut self) -> USBDRST_W {
                USBDRST_W { w: self }
            }
            #[doc = "Bit 25 - CAN reset"]
            #[inline(always)]
            pub fn canrst(&mut self) -> CANRST_W {
                CANRST_W { w: self }
            }
            #[doc = "Bit 27 - Backup interface reset"]
            #[inline(always)]
            pub fn bkprst(&mut self) -> BKPRST_W {
                BKPRST_W { w: self }
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&mut self) -> PWRRST_W {
                PWRRST_W { w: self }
            }
            #[doc = "Bit 29 - DAC interface reset"]
            #[inline(always)]
            pub fn dacrst(&mut self) -> DACRST_W {
                DACRST_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "APB1 peripheral reset register (RCC_APB1PRSTR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1prstr](index.html) module"]
        pub struct APB1PRSTR_SPEC;
        impl crate::RegisterSpec for APB1PRSTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [apb1prstr::R](R) reader structure"]
        impl crate::Readable for APB1PRSTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [apb1prstr::W](W) writer structure"]
        impl crate::Writable for APB1PRSTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets APB1PRSTR to value 0"]
        impl crate::Resettable for APB1PRSTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "AHBPCENR register accessor: an alias for `Reg<AHBPCENR_SPEC>`"]
    pub type AHBPCENR = crate::Reg<ahbpcenr::AHBPCENR_SPEC>;
    #[doc = "AHB Peripheral Clock enable register (RCC_AHBPCENR)"]
    pub mod ahbpcenr {
        #[doc = "Register `AHBPCENR` reader"]
        pub struct R(crate::R<AHBPCENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<AHBPCENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<AHBPCENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<AHBPCENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `AHBPCENR` writer"]
        pub struct W(crate::W<AHBPCENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<AHBPCENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<AHBPCENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<AHBPCENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DMAEN` reader - DMA clock enable"]
        pub struct DMAEN_R(crate::FieldReader<bool>);
        impl DMAEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAEN` writer - DMA clock enable"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `SRAMEN` reader - SRAM interface clock enable"]
        pub struct SRAMEN_R(crate::FieldReader<bool>);
        impl SRAMEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRAMEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRAMEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRAMEN` writer - SRAM interface clock enable"]
        pub struct SRAMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `FLITFEN` reader - FLITF clock enable"]
        pub struct FLITFEN_R(crate::FieldReader<bool>);
        impl FLITFEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FLITFEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FLITFEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FLITFEN` writer - FLITF clock enable"]
        pub struct FLITFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLITFEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CRCEN` reader - CRC clock enable"]
        pub struct CRCEN_R(crate::FieldReader<bool>);
        impl CRCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CRCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CRCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CRCEN` writer - CRC clock enable"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `USBHDEN` reader - USBHD clock enable"]
        pub struct USBHDEN_R(crate::FieldReader<bool>);
        impl USBHDEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBHDEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBHDEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBHDEN` writer - USBHD clock enable"]
        pub struct USBHDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBHDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DMA clock enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - SRAM interface clock enable"]
            #[inline(always)]
            pub fn sramen(&self) -> SRAMEN_R {
                SRAMEN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - FLITF clock enable"]
            #[inline(always)]
            pub fn flitfen(&self) -> FLITFEN_R {
                FLITFEN_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 12 - USBHD clock enable"]
            #[inline(always)]
            pub fn usbhden(&self) -> USBHDEN_R {
                USBHDEN_R::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DMA clock enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 2 - SRAM interface clock enable"]
            #[inline(always)]
            pub fn sramen(&mut self) -> SRAMEN_W {
                SRAMEN_W { w: self }
            }
            #[doc = "Bit 4 - FLITF clock enable"]
            #[inline(always)]
            pub fn flitfen(&mut self) -> FLITFEN_W {
                FLITFEN_W { w: self }
            }
            #[doc = "Bit 6 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
            #[doc = "Bit 12 - USBHD clock enable"]
            #[inline(always)]
            pub fn usbhden(&mut self) -> USBHDEN_W {
                USBHDEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "AHB Peripheral Clock enable register (RCC_AHBPCENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbpcenr](index.html) module"]
        pub struct AHBPCENR_SPEC;
        impl crate::RegisterSpec for AHBPCENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ahbpcenr::R](R) reader structure"]
        impl crate::Readable for AHBPCENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ahbpcenr::W](W) writer structure"]
        impl crate::Writable for AHBPCENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets AHBPCENR to value 0x14"]
        impl crate::Resettable for AHBPCENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x14
            }
        }
    }
    #[doc = "APB2PCENR register accessor: an alias for `Reg<APB2PCENR_SPEC>`"]
    pub type APB2PCENR = crate::Reg<apb2pcenr::APB2PCENR_SPEC>;
    #[doc = "APB2 peripheral clock enable register (RCC_APB2PCENR)"]
    pub mod apb2pcenr {
        #[doc = "Register `APB2PCENR` reader"]
        pub struct R(crate::R<APB2PCENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<APB2PCENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<APB2PCENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<APB2PCENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `APB2PCENR` writer"]
        pub struct W(crate::W<APB2PCENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<APB2PCENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<APB2PCENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<APB2PCENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `AFIOEN` reader - Alternate function I/O clock enable"]
        pub struct AFIOEN_R(crate::FieldReader<bool>);
        impl AFIOEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFIOEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFIOEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFIOEN` writer - Alternate function I/O clock enable"]
        pub struct AFIOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFIOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `IOPAEN` reader - I/O port A clock enable"]
        pub struct IOPAEN_R(crate::FieldReader<bool>);
        impl IOPAEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPAEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPAEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPAEN` writer - I/O port A clock enable"]
        pub struct IOPAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `IOPBEN` reader - I/O port B clock enable"]
        pub struct IOPBEN_R(crate::FieldReader<bool>);
        impl IOPBEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPBEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPBEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPBEN` writer - I/O port B clock enable"]
        pub struct IOPBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `IOPCEN` reader - I/O port C clock enable"]
        pub struct IOPCEN_R(crate::FieldReader<bool>);
        impl IOPCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPCEN` writer - I/O port C clock enable"]
        pub struct IOPCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `IOPDEN` reader - I/O port D clock enable"]
        pub struct IOPDEN_R(crate::FieldReader<bool>);
        impl IOPDEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IOPDEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOPDEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOPDEN` writer - I/O port D clock enable"]
        pub struct IOPDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `ADCEN` reader - ADC interface clock enable"]
        pub struct ADCEN_R(crate::FieldReader<bool>);
        impl ADCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADCEN` writer - ADC interface clock enable"]
        pub struct ADCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `TIM1EN` reader - TIM1 Timer clock enable"]
        pub struct TIM1EN_R(crate::FieldReader<bool>);
        impl TIM1EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM1EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM1EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM1EN` writer - TIM1 Timer clock enable"]
        pub struct TIM1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `SPI1EN` reader - SPI 1 clock enable"]
        pub struct SPI1EN_R(crate::FieldReader<bool>);
        impl SPI1EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI1EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI1EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI1EN` writer - SPI 1 clock enable"]
        pub struct SPI1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `USART1EN` reader - USART1 clock enable"]
        pub struct USART1EN_R(crate::FieldReader<bool>);
        impl USART1EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART1EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART1EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART1EN` writer - USART1 clock enable"]
        pub struct USART1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Alternate function I/O clock enable"]
            #[inline(always)]
            pub fn afioen(&self) -> AFIOEN_R {
                AFIOEN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - I/O port A clock enable"]
            #[inline(always)]
            pub fn iopaen(&self) -> IOPAEN_R {
                IOPAEN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - I/O port B clock enable"]
            #[inline(always)]
            pub fn iopben(&self) -> IOPBEN_R {
                IOPBEN_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - I/O port C clock enable"]
            #[inline(always)]
            pub fn iopcen(&self) -> IOPCEN_R {
                IOPCEN_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - I/O port D clock enable"]
            #[inline(always)]
            pub fn iopden(&self) -> IOPDEN_R {
                IOPDEN_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 9 - ADC interface clock enable"]
            #[inline(always)]
            pub fn adcen(&self) -> ADCEN_R {
                ADCEN_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 11 - TIM1 Timer clock enable"]
            #[inline(always)]
            pub fn tim1en(&self) -> TIM1EN_R {
                TIM1EN_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - SPI 1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&self) -> SPI1EN_R {
                SPI1EN_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&self) -> USART1EN_R {
                USART1EN_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Alternate function I/O clock enable"]
            #[inline(always)]
            pub fn afioen(&mut self) -> AFIOEN_W {
                AFIOEN_W { w: self }
            }
            #[doc = "Bit 2 - I/O port A clock enable"]
            #[inline(always)]
            pub fn iopaen(&mut self) -> IOPAEN_W {
                IOPAEN_W { w: self }
            }
            #[doc = "Bit 3 - I/O port B clock enable"]
            #[inline(always)]
            pub fn iopben(&mut self) -> IOPBEN_W {
                IOPBEN_W { w: self }
            }
            #[doc = "Bit 4 - I/O port C clock enable"]
            #[inline(always)]
            pub fn iopcen(&mut self) -> IOPCEN_W {
                IOPCEN_W { w: self }
            }
            #[doc = "Bit 5 - I/O port D clock enable"]
            #[inline(always)]
            pub fn iopden(&mut self) -> IOPDEN_W {
                IOPDEN_W { w: self }
            }
            #[doc = "Bit 9 - ADC interface clock enable"]
            #[inline(always)]
            pub fn adcen(&mut self) -> ADCEN_W {
                ADCEN_W { w: self }
            }
            #[doc = "Bit 11 - TIM1 Timer clock enable"]
            #[inline(always)]
            pub fn tim1en(&mut self) -> TIM1EN_W {
                TIM1EN_W { w: self }
            }
            #[doc = "Bit 12 - SPI 1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&mut self) -> SPI1EN_W {
                SPI1EN_W { w: self }
            }
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&mut self) -> USART1EN_W {
                USART1EN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "APB2 peripheral clock enable register (RCC_APB2PCENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2pcenr](index.html) module"]
        pub struct APB2PCENR_SPEC;
        impl crate::RegisterSpec for APB2PCENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [apb2pcenr::R](R) reader structure"]
        impl crate::Readable for APB2PCENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [apb2pcenr::W](W) writer structure"]
        impl crate::Writable for APB2PCENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets APB2PCENR to value 0"]
        impl crate::Resettable for APB2PCENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "APB1PCENR register accessor: an alias for `Reg<APB1PCENR_SPEC>`"]
    pub type APB1PCENR = crate::Reg<apb1pcenr::APB1PCENR_SPEC>;
    #[doc = "APB1 peripheral clock enable register (RCC_APB1PCENR)"]
    pub mod apb1pcenr {
        #[doc = "Register `APB1PCENR` reader"]
        pub struct R(crate::R<APB1PCENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<APB1PCENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<APB1PCENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<APB1PCENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `APB1PCENR` writer"]
        pub struct W(crate::W<APB1PCENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<APB1PCENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<APB1PCENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<APB1PCENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TIM2EN` reader - Timer 2 clock enable"]
        pub struct TIM2EN_R(crate::FieldReader<bool>);
        impl TIM2EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM2EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM2EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM2EN` writer - Timer 2 clock enable"]
        pub struct TIM2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TIM3EN` reader - Timer 3 clock enable"]
        pub struct TIM3EN_R(crate::FieldReader<bool>);
        impl TIM3EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM3EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM3EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM3EN` writer - Timer 3 clock enable"]
        pub struct TIM3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `TIM4EN` reader - Timer 4 clock enable"]
        pub struct TIM4EN_R(crate::FieldReader<bool>);
        impl TIM4EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIM4EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM4EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM4EN` writer - Timer 4 clock enable"]
        pub struct TIM4EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM4EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `WWDGEN` reader - Window watchdog clock enable"]
        pub struct WWDGEN_R(crate::FieldReader<bool>);
        impl WWDGEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WWDGEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WWDGEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WWDGEN` writer - Window watchdog clock enable"]
        pub struct WWDGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `SPI2EN` reader - SPI 2 clock enable"]
        pub struct SPI2EN_R(crate::FieldReader<bool>);
        impl SPI2EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI2EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI2EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI2EN` writer - SPI 2 clock enable"]
        pub struct SPI2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `USART2EN` reader - USART 2 clock enable"]
        pub struct USART2EN_R(crate::FieldReader<bool>);
        impl USART2EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART2EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART2EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART2EN` writer - USART 2 clock enable"]
        pub struct USART2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `USART3EN` reader - USART 3 clock enable"]
        pub struct USART3EN_R(crate::FieldReader<bool>);
        impl USART3EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART3EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART3EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART3EN` writer - USART 3 clock enable"]
        pub struct USART3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        #[doc = "Field `I2C1EN` reader - I2C 1 clock enable"]
        pub struct I2C1EN_R(crate::FieldReader<bool>);
        impl I2C1EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C1EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C1EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C1EN` writer - I2C 1 clock enable"]
        pub struct I2C1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 21)) | ((value as u32 & 1) << 21);
                self.w
            }
        }
        #[doc = "Field `I2C2EN` reader - I2C 2 clock enable"]
        pub struct I2C2EN_R(crate::FieldReader<bool>);
        impl I2C2EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C2EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C2EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C2EN` writer - I2C 2 clock enable"]
        pub struct I2C2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 22)) | ((value as u32 & 1) << 22);
                self.w
            }
        }
        #[doc = "Field `USBDEN` reader - USBD clock enable"]
        pub struct USBDEN_R(crate::FieldReader<bool>);
        impl USBDEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBDEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBDEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBDEN` writer - USBD clock enable"]
        pub struct USBDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 23)) | ((value as u32 & 1) << 23);
                self.w
            }
        }
        #[doc = "Field `CANEN` reader - CAN clock enable"]
        pub struct CANEN_R(crate::FieldReader<bool>);
        impl CANEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CANEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CANEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CANEN` writer - CAN clock enable"]
        pub struct CANEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CANEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 25)) | ((value as u32 & 1) << 25);
                self.w
            }
        }
        #[doc = "Field `BKPEN` reader - Backup interface clock enable"]
        pub struct BKPEN_R(crate::FieldReader<bool>);
        impl BKPEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BKPEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BKPEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BKPEN` writer - Backup interface clock enable"]
        pub struct BKPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 27)) | ((value as u32 & 1) << 27);
                self.w
            }
        }
        #[doc = "Field `PWREN` reader - Power interface clock enable"]
        pub struct PWREN_R(crate::FieldReader<bool>);
        impl PWREN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PWREN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PWREN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PWREN` writer - Power interface clock enable"]
        pub struct PWREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 28)) | ((value as u32 & 1) << 28);
                self.w
            }
        }
        #[doc = "Field `DACEN` reader - DAC interface clock enable"]
        pub struct DACEN_R(crate::FieldReader<bool>);
        impl DACEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DACEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DACEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DACEN` writer - DAC interface clock enable"]
        pub struct DACEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 29)) | ((value as u32 & 1) << 29);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer 2 clock enable"]
            #[inline(always)]
            pub fn tim2en(&self) -> TIM2EN_R {
                TIM2EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Timer 3 clock enable"]
            #[inline(always)]
            pub fn tim3en(&self) -> TIM3EN_R {
                TIM3EN_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Timer 4 clock enable"]
            #[inline(always)]
            pub fn tim4en(&self) -> TIM4EN_R {
                TIM4EN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 11 - Window watchdog clock enable"]
            #[inline(always)]
            pub fn wwdgen(&self) -> WWDGEN_R {
                WWDGEN_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 14 - SPI 2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&self) -> SPI2EN_R {
                SPI2EN_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 17 - USART 2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&self) -> USART2EN_R {
                USART2EN_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - USART 3 clock enable"]
            #[inline(always)]
            pub fn usart3en(&self) -> USART3EN_R {
                USART3EN_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 21 - I2C 1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&self) -> I2C1EN_R {
                I2C1EN_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - I2C 2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&self) -> I2C2EN_R {
                I2C2EN_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - USBD clock enable"]
            #[inline(always)]
            pub fn usbden(&self) -> USBDEN_R {
                USBDEN_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 25 - CAN clock enable"]
            #[inline(always)]
            pub fn canen(&self) -> CANEN_R {
                CANEN_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 27 - Backup interface clock enable"]
            #[inline(always)]
            pub fn bkpen(&self) -> BKPEN_R {
                BKPEN_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&self) -> PWREN_R {
                PWREN_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - DAC interface clock enable"]
            #[inline(always)]
            pub fn dacen(&self) -> DACEN_R {
                DACEN_R::new(((self.bits >> 29) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Timer 2 clock enable"]
            #[inline(always)]
            pub fn tim2en(&mut self) -> TIM2EN_W {
                TIM2EN_W { w: self }
            }
            #[doc = "Bit 1 - Timer 3 clock enable"]
            #[inline(always)]
            pub fn tim3en(&mut self) -> TIM3EN_W {
                TIM3EN_W { w: self }
            }
            #[doc = "Bit 2 - Timer 4 clock enable"]
            #[inline(always)]
            pub fn tim4en(&mut self) -> TIM4EN_W {
                TIM4EN_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog clock enable"]
            #[inline(always)]
            pub fn wwdgen(&mut self) -> WWDGEN_W {
                WWDGEN_W { w: self }
            }
            #[doc = "Bit 14 - SPI 2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&mut self) -> SPI2EN_W {
                SPI2EN_W { w: self }
            }
            #[doc = "Bit 17 - USART 2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&mut self) -> USART2EN_W {
                USART2EN_W { w: self }
            }
            #[doc = "Bit 18 - USART 3 clock enable"]
            #[inline(always)]
            pub fn usart3en(&mut self) -> USART3EN_W {
                USART3EN_W { w: self }
            }
            #[doc = "Bit 21 - I2C 1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&mut self) -> I2C1EN_W {
                I2C1EN_W { w: self }
            }
            #[doc = "Bit 22 - I2C 2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&mut self) -> I2C2EN_W {
                I2C2EN_W { w: self }
            }
            #[doc = "Bit 23 - USBD clock enable"]
            #[inline(always)]
            pub fn usbden(&mut self) -> USBDEN_W {
                USBDEN_W { w: self }
            }
            #[doc = "Bit 25 - CAN clock enable"]
            #[inline(always)]
            pub fn canen(&mut self) -> CANEN_W {
                CANEN_W { w: self }
            }
            #[doc = "Bit 27 - Backup interface clock enable"]
            #[inline(always)]
            pub fn bkpen(&mut self) -> BKPEN_W {
                BKPEN_W { w: self }
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&mut self) -> PWREN_W {
                PWREN_W { w: self }
            }
            #[doc = "Bit 29 - DAC interface clock enable"]
            #[inline(always)]
            pub fn dacen(&mut self) -> DACEN_W {
                DACEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "APB1 peripheral clock enable register (RCC_APB1PCENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1pcenr](index.html) module"]
        pub struct APB1PCENR_SPEC;
        impl crate::RegisterSpec for APB1PCENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [apb1pcenr::R](R) reader structure"]
        impl crate::Readable for APB1PCENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [apb1pcenr::W](W) writer structure"]
        impl crate::Writable for APB1PCENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets APB1PCENR to value 0"]
        impl crate::Resettable for APB1PCENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BDCTLR register accessor: an alias for `Reg<BDCTLR_SPEC>`"]
    pub type BDCTLR = crate::Reg<bdctlr::BDCTLR_SPEC>;
    #[doc = "Backup domain control register (RCC_BDCTLR)"]
    pub mod bdctlr {
        #[doc = "Register `BDCTLR` reader"]
        pub struct R(crate::R<BDCTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BDCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BDCTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BDCTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BDCTLR` writer"]
        pub struct W(crate::W<BDCTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BDCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BDCTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BDCTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LSEON` reader - External Low Speed oscillator enable"]
        pub struct LSEON_R(crate::FieldReader<bool>);
        impl LSEON_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSEON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSEON_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSEON` writer - External Low Speed oscillator enable"]
        pub struct LSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `LSERDY` reader - External Low Speed oscillator ready"]
        pub struct LSERDY_R(crate::FieldReader<bool>);
        impl LSERDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSERDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSERDY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSEBYP` reader - External Low Speed oscillator bypass"]
        pub struct LSEBYP_R(crate::FieldReader<bool>);
        impl LSEBYP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSEBYP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSEBYP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSEBYP` writer - External Low Speed oscillator bypass"]
        pub struct LSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEBYP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RTCSEL` reader - RTC clock source selection"]
        pub struct RTCSEL_R(crate::FieldReader<u8>);
        impl RTCSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RTCSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTCSEL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTCSEL` writer - RTC clock source selection"]
        pub struct RTCSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `RTCEN` reader - RTC clock enable"]
        pub struct RTCEN_R(crate::FieldReader<bool>);
        impl RTCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTCEN` writer - RTC clock enable"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `BDRST` reader - Backup domain software reset"]
        pub struct BDRST_R(crate::FieldReader<bool>);
        impl BDRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BDRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BDRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BDRST` writer - Backup domain software reset"]
        pub struct BDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - External Low Speed oscillator enable"]
            #[inline(always)]
            pub fn lseon(&self) -> LSEON_R {
                LSEON_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - External Low Speed oscillator ready"]
            #[inline(always)]
            pub fn lserdy(&self) -> LSERDY_R {
                LSERDY_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - External Low Speed oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&self) -> LSEBYP_R {
                LSEBYP_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 8:9 - RTC clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&self) -> RTCSEL_R {
                RTCSEL_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Backup domain software reset"]
            #[inline(always)]
            pub fn bdrst(&self) -> BDRST_R {
                BDRST_R::new(((self.bits >> 16) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - External Low Speed oscillator enable"]
            #[inline(always)]
            pub fn lseon(&mut self) -> LSEON_W {
                LSEON_W { w: self }
            }
            #[doc = "Bit 2 - External Low Speed oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&mut self) -> LSEBYP_W {
                LSEBYP_W { w: self }
            }
            #[doc = "Bits 8:9 - RTC clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&mut self) -> RTCSEL_W {
                RTCSEL_W { w: self }
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bit 16 - Backup domain software reset"]
            #[inline(always)]
            pub fn bdrst(&mut self) -> BDRST_W {
                BDRST_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup domain control register (RCC_BDCTLR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdctlr](index.html) module"]
        pub struct BDCTLR_SPEC;
        impl crate::RegisterSpec for BDCTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bdctlr::R](R) reader structure"]
        impl crate::Readable for BDCTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bdctlr::W](W) writer structure"]
        impl crate::Writable for BDCTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BDCTLR to value 0"]
        impl crate::Resettable for BDCTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RSTSCKR register accessor: an alias for `Reg<RSTSCKR_SPEC>`"]
    pub type RSTSCKR = crate::Reg<rstsckr::RSTSCKR_SPEC>;
    #[doc = "Control/status register (RCC_RSTSCKR)"]
    pub mod rstsckr {
        #[doc = "Register `RSTSCKR` reader"]
        pub struct R(crate::R<RSTSCKR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RSTSCKR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RSTSCKR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RSTSCKR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RSTSCKR` writer"]
        pub struct W(crate::W<RSTSCKR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RSTSCKR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RSTSCKR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RSTSCKR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LSION` reader - Internal low speed oscillator enable"]
        pub struct LSION_R(crate::FieldReader<bool>);
        impl LSION_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSION_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSION_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSION` writer - Internal low speed oscillator enable"]
        pub struct LSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `LSIRDY` reader - Internal low speed oscillator ready"]
        pub struct LSIRDY_R(crate::FieldReader<bool>);
        impl LSIRDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSIRDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSIRDY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RMVF` reader - Remove reset flag"]
        pub struct RMVF_R(crate::FieldReader<bool>);
        impl RMVF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RMVF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RMVF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RMVF` writer - Remove reset flag"]
        pub struct RMVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 24)) | ((value as u32 & 1) << 24);
                self.w
            }
        }
        #[doc = "Field `PINRSTF` reader - PIN reset flag"]
        pub struct PINRSTF_R(crate::FieldReader<bool>);
        impl PINRSTF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINRSTF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINRSTF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PORRSTF` reader - POR/PDR reset flag"]
        pub struct PORRSTF_R(crate::FieldReader<bool>);
        impl PORRSTF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PORRSTF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PORRSTF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SFTRSTF` reader - Software reset flag"]
        pub struct SFTRSTF_R(crate::FieldReader<bool>);
        impl SFTRSTF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SFTRSTF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SFTRSTF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IWDGRSTF` reader - Independent watchdog reset flag"]
        pub struct IWDGRSTF_R(crate::FieldReader<bool>);
        impl IWDGRSTF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IWDGRSTF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IWDGRSTF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WWDGRSTF` reader - Window watchdog reset flag"]
        pub struct WWDGRSTF_R(crate::FieldReader<bool>);
        impl WWDGRSTF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WWDGRSTF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WWDGRSTF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LPWRRSTF` reader - Low-power reset flag"]
        pub struct LPWRRSTF_R(crate::FieldReader<bool>);
        impl LPWRRSTF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LPWRRSTF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LPWRRSTF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Internal low speed oscillator enable"]
            #[inline(always)]
            pub fn lsion(&self) -> LSION_R {
                LSION_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Internal low speed oscillator ready"]
            #[inline(always)]
            pub fn lsirdy(&self) -> LSIRDY_R {
                LSIRDY_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 24 - Remove reset flag"]
            #[inline(always)]
            pub fn rmvf(&self) -> RMVF_R {
                RMVF_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 26 - PIN reset flag"]
            #[inline(always)]
            pub fn pinrstf(&self) -> PINRSTF_R {
                PINRSTF_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - POR/PDR reset flag"]
            #[inline(always)]
            pub fn porrstf(&self) -> PORRSTF_R {
                PORRSTF_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn sftrstf(&self) -> SFTRSTF_R {
                SFTRSTF_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Independent watchdog reset flag"]
            #[inline(always)]
            pub fn iwdgrstf(&self) -> IWDGRSTF_R {
                IWDGRSTF_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Window watchdog reset flag"]
            #[inline(always)]
            pub fn wwdgrstf(&self) -> WWDGRSTF_R {
                WWDGRSTF_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lpwrrstf(&self) -> LPWRRSTF_R {
                LPWRRSTF_R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Internal low speed oscillator enable"]
            #[inline(always)]
            pub fn lsion(&mut self) -> LSION_W {
                LSION_W { w: self }
            }
            #[doc = "Bit 24 - Remove reset flag"]
            #[inline(always)]
            pub fn rmvf(&mut self) -> RMVF_W {
                RMVF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control/status register (RCC_RSTSCKR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rstsckr](index.html) module"]
        pub struct RSTSCKR_SPEC;
        impl crate::RegisterSpec for RSTSCKR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rstsckr::R](R) reader structure"]
        impl crate::Readable for RSTSCKR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rstsckr::W](W) writer structure"]
        impl crate::Writable for RSTSCKR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RSTSCKR to value 0x0c00_0000"]
        impl crate::Resettable for RSTSCKR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0c00_0000
            }
        }
    }
    #[doc = "AHBRSTR register accessor: an alias for `Reg<AHBRSTR_SPEC>`"]
    pub type AHBRSTR = crate::Reg<ahbrstr::AHBRSTR_SPEC>;
    #[doc = "AHB reset register (RCC_APHBRSTR)"]
    pub mod ahbrstr {
        #[doc = "Register `AHBRSTR` reader"]
        pub struct R(crate::R<AHBRSTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<AHBRSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<AHBRSTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<AHBRSTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `AHBRSTR` writer"]
        pub struct W(crate::W<AHBRSTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<AHBRSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<AHBRSTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<AHBRSTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USBHDRST` reader - USBHD reset"]
        pub struct USBHDRST_R(crate::FieldReader<bool>);
        impl USBHDRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBHDRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBHDRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBHDRST` writer - USBHD reset"]
        pub struct USBHDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBHDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - USBHD reset"]
            #[inline(always)]
            pub fn usbhdrst(&self) -> USBHDRST_R {
                USBHDRST_R::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - USBHD reset"]
            #[inline(always)]
            pub fn usbhdrst(&mut self) -> USBHDRST_W {
                USBHDRST_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "AHB reset register (RCC_APHBRSTR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbrstr](index.html) module"]
        pub struct AHBRSTR_SPEC;
        impl crate::RegisterSpec for AHBRSTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ahbrstr::R](R) reader structure"]
        impl crate::Readable for AHBRSTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ahbrstr::W](W) writer structure"]
        impl crate::Writable for AHBRSTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets AHBRSTR to value 0"]
        impl crate::Resettable for AHBRSTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Extend configuration"]
pub struct EXTEND {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTEND {}
impl EXTEND {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const extend::RegisterBlock = 0x4002_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const extend::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EXTEND {
    type Target = extend::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EXTEND {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTEND").finish()
    }
}
#[doc = "Extend configuration"]
pub mod extend {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - EXTEND register"]
        pub extend_ctr: crate::Reg<extend_ctr::EXTEND_CTR_SPEC>,
    }
    #[doc = "EXTEND_CTR register accessor: an alias for `Reg<EXTEND_CTR_SPEC>`"]
    pub type EXTEND_CTR = crate::Reg<extend_ctr::EXTEND_CTR_SPEC>;
    #[doc = "EXTEND register"]
    pub mod extend_ctr {
        #[doc = "Register `EXTEND_CTR` reader"]
        pub struct R(crate::R<EXTEND_CTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTEND_CTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTEND_CTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTEND_CTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXTEND_CTR` writer"]
        pub struct W(crate::W<EXTEND_CTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXTEND_CTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXTEND_CTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXTEND_CTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USBDLS` reader - USBD Lowspeed Enable"]
        pub struct USBDLS_R(crate::FieldReader<bool>);
        impl USBDLS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBDLS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBDLS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBDLS` writer - USBD Lowspeed Enable"]
        pub struct USBDLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBDLS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `USBDPU` reader - USBD pullup Enable"]
        pub struct USBDPU_R(crate::FieldReader<bool>);
        impl USBDPU_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBDPU_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBDPU_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBDPU` writer - USBD pullup Enable"]
        pub struct USBDPU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBDPU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `USBHDIO` reader - USBHD IO(PB6/PB7) Enable"]
        pub struct USBHDIO_R(crate::FieldReader<bool>);
        impl USBHDIO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBHDIO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBHDIO_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBHDIO` writer - USBHD IO(PB6/PB7) Enable"]
        pub struct USBHDIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBHDIO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `USB5VSEL` reader - USB 5V Enable"]
        pub struct USB5VSEL_R(crate::FieldReader<bool>);
        impl USB5VSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USB5VSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USB5VSEL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USB5VSEL` writer - USB 5V Enable"]
        pub struct USB5VSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USB5VSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `HSIPRE` reader - Whether HSI is divided"]
        pub struct HSIPRE_R(crate::FieldReader<bool>);
        impl HSIPRE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSIPRE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSIPRE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSIPRE` writer - Whether HSI is divided"]
        pub struct HSIPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIPRE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `LKUPEN` reader - LOCKUP"]
        pub struct LKUPEN_R(crate::FieldReader<bool>);
        impl LKUPEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LKUPEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LKUPEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LKUPEN` writer - LOCKUP"]
        pub struct LKUPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LKUPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `LKUPRESET` reader - LOCKUP RESET"]
        pub struct LKUPRESET_R(crate::FieldReader<bool>);
        impl LKUPRESET_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LKUPRESET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LKUPRESET_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LKUPRESET` writer - LOCKUP RESET"]
        pub struct LKUPRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LKUPRESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `ULLDOTRIM` reader - ULLDOTRIM"]
        pub struct ULLDOTRIM_R(crate::FieldReader<u8>);
        impl ULLDOTRIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ULLDOTRIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ULLDOTRIM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ULLDOTRIM` writer - ULLDOTRIM"]
        pub struct ULLDOTRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULLDOTRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `LDOTRIM` reader - LDOTRIM"]
        pub struct LDOTRIM_R(crate::FieldReader<bool>);
        impl LDOTRIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LDOTRIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LDOTRIM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LDOTRIM` writer - LDOTRIM"]
        pub struct LDOTRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LDOTRIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - USBD Lowspeed Enable"]
            #[inline(always)]
            pub fn usbdls(&self) -> USBDLS_R {
                USBDLS_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - USBD pullup Enable"]
            #[inline(always)]
            pub fn usbdpu(&self) -> USBDPU_R {
                USBDPU_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - USBHD IO(PB6/PB7) Enable"]
            #[inline(always)]
            pub fn usbhdio(&self) -> USBHDIO_R {
                USBHDIO_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - USB 5V Enable"]
            #[inline(always)]
            pub fn usb5vsel(&self) -> USB5VSEL_R {
                USB5VSEL_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Whether HSI is divided"]
            #[inline(always)]
            pub fn hsipre(&self) -> HSIPRE_R {
                HSIPRE_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - LOCKUP"]
            #[inline(always)]
            pub fn lkupen(&self) -> LKUPEN_R {
                LKUPEN_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - LOCKUP RESET"]
            #[inline(always)]
            pub fn lkupreset(&self) -> LKUPRESET_R {
                LKUPRESET_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - ULLDOTRIM"]
            #[inline(always)]
            pub fn ulldotrim(&self) -> ULLDOTRIM_R {
                ULLDOTRIM_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 10 - LDOTRIM"]
            #[inline(always)]
            pub fn ldotrim(&self) -> LDOTRIM_R {
                LDOTRIM_R::new(((self.bits >> 10) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - USBD Lowspeed Enable"]
            #[inline(always)]
            pub fn usbdls(&mut self) -> USBDLS_W {
                USBDLS_W { w: self }
            }
            #[doc = "Bit 1 - USBD pullup Enable"]
            #[inline(always)]
            pub fn usbdpu(&mut self) -> USBDPU_W {
                USBDPU_W { w: self }
            }
            #[doc = "Bit 2 - USBHD IO(PB6/PB7) Enable"]
            #[inline(always)]
            pub fn usbhdio(&mut self) -> USBHDIO_W {
                USBHDIO_W { w: self }
            }
            #[doc = "Bit 3 - USB 5V Enable"]
            #[inline(always)]
            pub fn usb5vsel(&mut self) -> USB5VSEL_W {
                USB5VSEL_W { w: self }
            }
            #[doc = "Bit 4 - Whether HSI is divided"]
            #[inline(always)]
            pub fn hsipre(&mut self) -> HSIPRE_W {
                HSIPRE_W { w: self }
            }
            #[doc = "Bit 6 - LOCKUP"]
            #[inline(always)]
            pub fn lkupen(&mut self) -> LKUPEN_W {
                LKUPEN_W { w: self }
            }
            #[doc = "Bit 7 - LOCKUP RESET"]
            #[inline(always)]
            pub fn lkupreset(&mut self) -> LKUPRESET_W {
                LKUPRESET_W { w: self }
            }
            #[doc = "Bits 8:9 - ULLDOTRIM"]
            #[inline(always)]
            pub fn ulldotrim(&mut self) -> ULLDOTRIM_W {
                ULLDOTRIM_W { w: self }
            }
            #[doc = "Bit 10 - LDOTRIM"]
            #[inline(always)]
            pub fn ldotrim(&mut self) -> LDOTRIM_W {
                LDOTRIM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "EXTEND register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [extend_ctr](index.html) module"]
        pub struct EXTEND_CTR_SPEC;
        impl crate::RegisterSpec for EXTEND_CTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [extend_ctr::R](R) reader structure"]
        impl crate::Readable for EXTEND_CTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [extend_ctr::W](W) writer structure"]
        impl crate::Writable for EXTEND_CTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXTEND_CTR to value 0x20"]
        impl crate::Resettable for EXTEND_CTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x20
            }
        }
    }
}
#[doc = "General purpose I/O"]
pub struct GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOA {}
impl GPIOA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
#[doc = "General purpose I/O"]
pub mod gpioa {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Port configuration register low (GPIOn_CFGLR)"]
        pub cfglr: crate::Reg<cfglr::CFGLR_SPEC>,
        #[doc = "0x04 - Port configuration register high (GPIOn_CFGHR)"]
        pub cfghr: crate::Reg<cfghr::CFGHR_SPEC>,
        #[doc = "0x08 - Port input data register (GPIOn_INDR)"]
        pub indr: crate::Reg<indr::INDR_SPEC>,
        #[doc = "0x0c - Port output data register (GPIOn_OUTDR)"]
        pub outdr: crate::Reg<outdr::OUTDR_SPEC>,
        #[doc = "0x10 - Port bit set/reset register (GPIOn_BSHR)"]
        pub bshr: crate::Reg<bshr::BSHR_SPEC>,
        #[doc = "0x14 - Port bit reset register (GPIOn_BCR)"]
        pub bcr: crate::Reg<bcr::BCR_SPEC>,
        #[doc = "0x18 - Port configuration lock register"]
        pub lckr: crate::Reg<lckr::LCKR_SPEC>,
    }
    #[doc = "CFGLR register accessor: an alias for `Reg<CFGLR_SPEC>`"]
    pub type CFGLR = crate::Reg<cfglr::CFGLR_SPEC>;
    #[doc = "Port configuration register low (GPIOn_CFGLR)"]
    pub mod cfglr {
        #[doc = "Register `CFGLR` reader"]
        pub struct R(crate::R<CFGLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGLR` writer"]
        pub struct W(crate::W<CFGLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MODE0` reader - Port n.0 mode bits"]
        pub struct MODE0_R(crate::FieldReader<u8>);
        impl MODE0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE0_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE0` writer - Port n.0 mode bits"]
        pub struct MODE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        #[doc = "Field `CNF0` reader - Port n.0 configuration bits"]
        pub struct CNF0_R(crate::FieldReader<u8>);
        impl CNF0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF0_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF0` writer - Port n.0 configuration bits"]
        pub struct CNF0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u32 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `MODE1` reader - Port n.1 mode bits"]
        pub struct MODE1_R(crate::FieldReader<u8>);
        impl MODE1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE1` writer - Port n.1 mode bits"]
        pub struct MODE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 4)) | ((value as u32 & 3) << 4);
                self.w
            }
        }
        #[doc = "Field `CNF1` reader - Port n.1 configuration bits"]
        pub struct CNF1_R(crate::FieldReader<u8>);
        impl CNF1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF1` writer - Port n.1 configuration bits"]
        pub struct CNF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 6)) | ((value as u32 & 3) << 6);
                self.w
            }
        }
        #[doc = "Field `MODE2` reader - Port n.2 mode bits"]
        pub struct MODE2_R(crate::FieldReader<u8>);
        impl MODE2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE2` writer - Port n.2 mode bits"]
        pub struct MODE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `CNF2` reader - Port n.2 configuration bits"]
        pub struct CNF2_R(crate::FieldReader<u8>);
        impl CNF2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF2` writer - Port n.2 configuration bits"]
        pub struct CNF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `MODE3` reader - Port n.3 mode bits"]
        pub struct MODE3_R(crate::FieldReader<u8>);
        impl MODE3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE3_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE3` writer - Port n.3 mode bits"]
        pub struct MODE3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `CNF3` reader - Port n.3 configuration bits"]
        pub struct CNF3_R(crate::FieldReader<u8>);
        impl CNF3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF3_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF3` writer - Port n.3 configuration bits"]
        pub struct CNF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 14)) | ((value as u32 & 3) << 14);
                self.w
            }
        }
        #[doc = "Field `MODE4` reader - Port n.4 mode bits"]
        pub struct MODE4_R(crate::FieldReader<u8>);
        impl MODE4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE4_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE4` writer - Port n.4 mode bits"]
        pub struct MODE4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 16)) | ((value as u32 & 3) << 16);
                self.w
            }
        }
        #[doc = "Field `CNF4` reader - Port n.4 configuration bits"]
        pub struct CNF4_R(crate::FieldReader<u8>);
        impl CNF4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF4_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF4` writer - Port n.4 configuration bits"]
        pub struct CNF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 18)) | ((value as u32 & 3) << 18);
                self.w
            }
        }
        #[doc = "Field `MODE5` reader - Port n.5 mode bits"]
        pub struct MODE5_R(crate::FieldReader<u8>);
        impl MODE5_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE5_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE5` writer - Port n.5 mode bits"]
        pub struct MODE5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 20)) | ((value as u32 & 3) << 20);
                self.w
            }
        }
        #[doc = "Field `CNF5` reader - Port n.5 configuration bits"]
        pub struct CNF5_R(crate::FieldReader<u8>);
        impl CNF5_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF5_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF5` writer - Port n.5 configuration bits"]
        pub struct CNF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 22)) | ((value as u32 & 3) << 22);
                self.w
            }
        }
        #[doc = "Field `MODE6` reader - Port n.6 mode bits"]
        pub struct MODE6_R(crate::FieldReader<u8>);
        impl MODE6_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE6_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE6` writer - Port n.6 mode bits"]
        pub struct MODE6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 24)) | ((value as u32 & 3) << 24);
                self.w
            }
        }
        #[doc = "Field `CNF6` reader - Port n.6 configuration bits"]
        pub struct CNF6_R(crate::FieldReader<u8>);
        impl CNF6_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF6_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF6` writer - Port n.6 configuration bits"]
        pub struct CNF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 26)) | ((value as u32 & 3) << 26);
                self.w
            }
        }
        #[doc = "Field `MODE7` reader - Port n.7 mode bits"]
        pub struct MODE7_R(crate::FieldReader<u8>);
        impl MODE7_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE7_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE7` writer - Port n.7 mode bits"]
        pub struct MODE7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 28)) | ((value as u32 & 3) << 28);
                self.w
            }
        }
        #[doc = "Field `CNF7` reader - Port n.7 configuration bits"]
        pub struct CNF7_R(crate::FieldReader<u8>);
        impl CNF7_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF7_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF7` writer - Port n.7 configuration bits"]
        pub struct CNF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 30)) | ((value as u32 & 3) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Port n.0 mode bits"]
            #[inline(always)]
            pub fn mode0(&self) -> MODE0_R {
                MODE0_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Port n.0 configuration bits"]
            #[inline(always)]
            pub fn cnf0(&self) -> CNF0_R {
                CNF0_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - Port n.1 mode bits"]
            #[inline(always)]
            pub fn mode1(&self) -> MODE1_R {
                MODE1_R::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bits 6:7 - Port n.1 configuration bits"]
            #[inline(always)]
            pub fn cnf1(&self) -> CNF1_R {
                CNF1_R::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Port n.2 mode bits"]
            #[inline(always)]
            pub fn mode2(&self) -> MODE2_R {
                MODE2_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Port n.2 configuration bits"]
            #[inline(always)]
            pub fn cnf2(&self) -> CNF2_R {
                CNF2_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Port n.3 mode bits"]
            #[inline(always)]
            pub fn mode3(&self) -> MODE3_R {
                MODE3_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bits 14:15 - Port n.3 configuration bits"]
            #[inline(always)]
            pub fn cnf3(&self) -> CNF3_R {
                CNF3_R::new(((self.bits >> 14) & 3) as u8)
            }
            #[doc = "Bits 16:17 - Port n.4 mode bits"]
            #[inline(always)]
            pub fn mode4(&self) -> MODE4_R {
                MODE4_R::new(((self.bits >> 16) & 3) as u8)
            }
            #[doc = "Bits 18:19 - Port n.4 configuration bits"]
            #[inline(always)]
            pub fn cnf4(&self) -> CNF4_R {
                CNF4_R::new(((self.bits >> 18) & 3) as u8)
            }
            #[doc = "Bits 20:21 - Port n.5 mode bits"]
            #[inline(always)]
            pub fn mode5(&self) -> MODE5_R {
                MODE5_R::new(((self.bits >> 20) & 3) as u8)
            }
            #[doc = "Bits 22:23 - Port n.5 configuration bits"]
            #[inline(always)]
            pub fn cnf5(&self) -> CNF5_R {
                CNF5_R::new(((self.bits >> 22) & 3) as u8)
            }
            #[doc = "Bits 24:25 - Port n.6 mode bits"]
            #[inline(always)]
            pub fn mode6(&self) -> MODE6_R {
                MODE6_R::new(((self.bits >> 24) & 3) as u8)
            }
            #[doc = "Bits 26:27 - Port n.6 configuration bits"]
            #[inline(always)]
            pub fn cnf6(&self) -> CNF6_R {
                CNF6_R::new(((self.bits >> 26) & 3) as u8)
            }
            #[doc = "Bits 28:29 - Port n.7 mode bits"]
            #[inline(always)]
            pub fn mode7(&self) -> MODE7_R {
                MODE7_R::new(((self.bits >> 28) & 3) as u8)
            }
            #[doc = "Bits 30:31 - Port n.7 configuration bits"]
            #[inline(always)]
            pub fn cnf7(&self) -> CNF7_R {
                CNF7_R::new(((self.bits >> 30) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Port n.0 mode bits"]
            #[inline(always)]
            pub fn mode0(&mut self) -> MODE0_W {
                MODE0_W { w: self }
            }
            #[doc = "Bits 2:3 - Port n.0 configuration bits"]
            #[inline(always)]
            pub fn cnf0(&mut self) -> CNF0_W {
                CNF0_W { w: self }
            }
            #[doc = "Bits 4:5 - Port n.1 mode bits"]
            #[inline(always)]
            pub fn mode1(&mut self) -> MODE1_W {
                MODE1_W { w: self }
            }
            #[doc = "Bits 6:7 - Port n.1 configuration bits"]
            #[inline(always)]
            pub fn cnf1(&mut self) -> CNF1_W {
                CNF1_W { w: self }
            }
            #[doc = "Bits 8:9 - Port n.2 mode bits"]
            #[inline(always)]
            pub fn mode2(&mut self) -> MODE2_W {
                MODE2_W { w: self }
            }
            #[doc = "Bits 10:11 - Port n.2 configuration bits"]
            #[inline(always)]
            pub fn cnf2(&mut self) -> CNF2_W {
                CNF2_W { w: self }
            }
            #[doc = "Bits 12:13 - Port n.3 mode bits"]
            #[inline(always)]
            pub fn mode3(&mut self) -> MODE3_W {
                MODE3_W { w: self }
            }
            #[doc = "Bits 14:15 - Port n.3 configuration bits"]
            #[inline(always)]
            pub fn cnf3(&mut self) -> CNF3_W {
                CNF3_W { w: self }
            }
            #[doc = "Bits 16:17 - Port n.4 mode bits"]
            #[inline(always)]
            pub fn mode4(&mut self) -> MODE4_W {
                MODE4_W { w: self }
            }
            #[doc = "Bits 18:19 - Port n.4 configuration bits"]
            #[inline(always)]
            pub fn cnf4(&mut self) -> CNF4_W {
                CNF4_W { w: self }
            }
            #[doc = "Bits 20:21 - Port n.5 mode bits"]
            #[inline(always)]
            pub fn mode5(&mut self) -> MODE5_W {
                MODE5_W { w: self }
            }
            #[doc = "Bits 22:23 - Port n.5 configuration bits"]
            #[inline(always)]
            pub fn cnf5(&mut self) -> CNF5_W {
                CNF5_W { w: self }
            }
            #[doc = "Bits 24:25 - Port n.6 mode bits"]
            #[inline(always)]
            pub fn mode6(&mut self) -> MODE6_W {
                MODE6_W { w: self }
            }
            #[doc = "Bits 26:27 - Port n.6 configuration bits"]
            #[inline(always)]
            pub fn cnf6(&mut self) -> CNF6_W {
                CNF6_W { w: self }
            }
            #[doc = "Bits 28:29 - Port n.7 mode bits"]
            #[inline(always)]
            pub fn mode7(&mut self) -> MODE7_W {
                MODE7_W { w: self }
            }
            #[doc = "Bits 30:31 - Port n.7 configuration bits"]
            #[inline(always)]
            pub fn cnf7(&mut self) -> CNF7_W {
                CNF7_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port configuration register low (GPIOn_CFGLR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfglr](index.html) module"]
        pub struct CFGLR_SPEC;
        impl crate::RegisterSpec for CFGLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfglr::R](R) reader structure"]
        impl crate::Readable for CFGLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfglr::W](W) writer structure"]
        impl crate::Writable for CFGLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGLR to value 0x4444_4444"]
        impl crate::Resettable for CFGLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x4444_4444
            }
        }
    }
    #[doc = "CFGHR register accessor: an alias for `Reg<CFGHR_SPEC>`"]
    pub type CFGHR = crate::Reg<cfghr::CFGHR_SPEC>;
    #[doc = "Port configuration register high (GPIOn_CFGHR)"]
    pub mod cfghr {
        #[doc = "Register `CFGHR` reader"]
        pub struct R(crate::R<CFGHR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGHR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGHR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGHR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGHR` writer"]
        pub struct W(crate::W<CFGHR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGHR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGHR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGHR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MODE8` reader - Port n.8 mode bits"]
        pub struct MODE8_R(crate::FieldReader<u8>);
        impl MODE8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE8_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE8` writer - Port n.8 mode bits"]
        pub struct MODE8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        #[doc = "Field `CNF8` reader - Port n.8 configuration bits"]
        pub struct CNF8_R(crate::FieldReader<u8>);
        impl CNF8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF8_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF8` writer - Port n.8 configuration bits"]
        pub struct CNF8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u32 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `MODE9` reader - Port n.9 mode bits"]
        pub struct MODE9_R(crate::FieldReader<u8>);
        impl MODE9_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE9_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE9` writer - Port n.9 mode bits"]
        pub struct MODE9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 4)) | ((value as u32 & 3) << 4);
                self.w
            }
        }
        #[doc = "Field `CNF9` reader - Port n.9 configuration bits"]
        pub struct CNF9_R(crate::FieldReader<u8>);
        impl CNF9_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF9_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF9` writer - Port n.9 configuration bits"]
        pub struct CNF9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 6)) | ((value as u32 & 3) << 6);
                self.w
            }
        }
        #[doc = "Field `MODE10` reader - Port n.10 mode bits"]
        pub struct MODE10_R(crate::FieldReader<u8>);
        impl MODE10_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE10_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE10` writer - Port n.10 mode bits"]
        pub struct MODE10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `CNF10` reader - Port n.10 configuration bits"]
        pub struct CNF10_R(crate::FieldReader<u8>);
        impl CNF10_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF10_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF10` writer - Port n.10 configuration bits"]
        pub struct CNF10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `MODE11` reader - Port n.11 mode bits"]
        pub struct MODE11_R(crate::FieldReader<u8>);
        impl MODE11_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE11_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE11` writer - Port n.11 mode bits"]
        pub struct MODE11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `CNF11` reader - Port n.11 configuration bits"]
        pub struct CNF11_R(crate::FieldReader<u8>);
        impl CNF11_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF11_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF11` writer - Port n.11 configuration bits"]
        pub struct CNF11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 14)) | ((value as u32 & 3) << 14);
                self.w
            }
        }
        #[doc = "Field `MODE12` reader - Port n.12 mode bits"]
        pub struct MODE12_R(crate::FieldReader<u8>);
        impl MODE12_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE12_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE12` writer - Port n.12 mode bits"]
        pub struct MODE12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 16)) | ((value as u32 & 3) << 16);
                self.w
            }
        }
        #[doc = "Field `CNF12` reader - Port n.12 configuration bits"]
        pub struct CNF12_R(crate::FieldReader<u8>);
        impl CNF12_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF12_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF12` writer - Port n.12 configuration bits"]
        pub struct CNF12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 18)) | ((value as u32 & 3) << 18);
                self.w
            }
        }
        #[doc = "Field `MODE13` reader - Port n.13 mode bits"]
        pub struct MODE13_R(crate::FieldReader<u8>);
        impl MODE13_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE13_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE13` writer - Port n.13 mode bits"]
        pub struct MODE13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 20)) | ((value as u32 & 3) << 20);
                self.w
            }
        }
        #[doc = "Field `CNF13` reader - Port n.13 configuration bits"]
        pub struct CNF13_R(crate::FieldReader<u8>);
        impl CNF13_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF13_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF13` writer - Port n.13 configuration bits"]
        pub struct CNF13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 22)) | ((value as u32 & 3) << 22);
                self.w
            }
        }
        #[doc = "Field `MODE14` reader - Port n.14 mode bits"]
        pub struct MODE14_R(crate::FieldReader<u8>);
        impl MODE14_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE14_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE14` writer - Port n.14 mode bits"]
        pub struct MODE14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 24)) | ((value as u32 & 3) << 24);
                self.w
            }
        }
        #[doc = "Field `CNF14` reader - Port n.14 configuration bits"]
        pub struct CNF14_R(crate::FieldReader<u8>);
        impl CNF14_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF14_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF14` writer - Port n.14 configuration bits"]
        pub struct CNF14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 26)) | ((value as u32 & 3) << 26);
                self.w
            }
        }
        #[doc = "Field `MODE15` reader - Port n.15 mode bits"]
        pub struct MODE15_R(crate::FieldReader<u8>);
        impl MODE15_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MODE15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODE15_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE15` writer - Port n.15 mode bits"]
        pub struct MODE15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 28)) | ((value as u32 & 3) << 28);
                self.w
            }
        }
        #[doc = "Field `CNF15` reader - Port n.15 configuration bits"]
        pub struct CNF15_R(crate::FieldReader<u8>);
        impl CNF15_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CNF15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF15_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF15` writer - Port n.15 configuration bits"]
        pub struct CNF15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 30)) | ((value as u32 & 3) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Port n.8 mode bits"]
            #[inline(always)]
            pub fn mode8(&self) -> MODE8_R {
                MODE8_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Port n.8 configuration bits"]
            #[inline(always)]
            pub fn cnf8(&self) -> CNF8_R {
                CNF8_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - Port n.9 mode bits"]
            #[inline(always)]
            pub fn mode9(&self) -> MODE9_R {
                MODE9_R::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bits 6:7 - Port n.9 configuration bits"]
            #[inline(always)]
            pub fn cnf9(&self) -> CNF9_R {
                CNF9_R::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Port n.10 mode bits"]
            #[inline(always)]
            pub fn mode10(&self) -> MODE10_R {
                MODE10_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Port n.10 configuration bits"]
            #[inline(always)]
            pub fn cnf10(&self) -> CNF10_R {
                CNF10_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Port n.11 mode bits"]
            #[inline(always)]
            pub fn mode11(&self) -> MODE11_R {
                MODE11_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bits 14:15 - Port n.11 configuration bits"]
            #[inline(always)]
            pub fn cnf11(&self) -> CNF11_R {
                CNF11_R::new(((self.bits >> 14) & 3) as u8)
            }
            #[doc = "Bits 16:17 - Port n.12 mode bits"]
            #[inline(always)]
            pub fn mode12(&self) -> MODE12_R {
                MODE12_R::new(((self.bits >> 16) & 3) as u8)
            }
            #[doc = "Bits 18:19 - Port n.12 configuration bits"]
            #[inline(always)]
            pub fn cnf12(&self) -> CNF12_R {
                CNF12_R::new(((self.bits >> 18) & 3) as u8)
            }
            #[doc = "Bits 20:21 - Port n.13 mode bits"]
            #[inline(always)]
            pub fn mode13(&self) -> MODE13_R {
                MODE13_R::new(((self.bits >> 20) & 3) as u8)
            }
            #[doc = "Bits 22:23 - Port n.13 configuration bits"]
            #[inline(always)]
            pub fn cnf13(&self) -> CNF13_R {
                CNF13_R::new(((self.bits >> 22) & 3) as u8)
            }
            #[doc = "Bits 24:25 - Port n.14 mode bits"]
            #[inline(always)]
            pub fn mode14(&self) -> MODE14_R {
                MODE14_R::new(((self.bits >> 24) & 3) as u8)
            }
            #[doc = "Bits 26:27 - Port n.14 configuration bits"]
            #[inline(always)]
            pub fn cnf14(&self) -> CNF14_R {
                CNF14_R::new(((self.bits >> 26) & 3) as u8)
            }
            #[doc = "Bits 28:29 - Port n.15 mode bits"]
            #[inline(always)]
            pub fn mode15(&self) -> MODE15_R {
                MODE15_R::new(((self.bits >> 28) & 3) as u8)
            }
            #[doc = "Bits 30:31 - Port n.15 configuration bits"]
            #[inline(always)]
            pub fn cnf15(&self) -> CNF15_R {
                CNF15_R::new(((self.bits >> 30) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Port n.8 mode bits"]
            #[inline(always)]
            pub fn mode8(&mut self) -> MODE8_W {
                MODE8_W { w: self }
            }
            #[doc = "Bits 2:3 - Port n.8 configuration bits"]
            #[inline(always)]
            pub fn cnf8(&mut self) -> CNF8_W {
                CNF8_W { w: self }
            }
            #[doc = "Bits 4:5 - Port n.9 mode bits"]
            #[inline(always)]
            pub fn mode9(&mut self) -> MODE9_W {
                MODE9_W { w: self }
            }
            #[doc = "Bits 6:7 - Port n.9 configuration bits"]
            #[inline(always)]
            pub fn cnf9(&mut self) -> CNF9_W {
                CNF9_W { w: self }
            }
            #[doc = "Bits 8:9 - Port n.10 mode bits"]
            #[inline(always)]
            pub fn mode10(&mut self) -> MODE10_W {
                MODE10_W { w: self }
            }
            #[doc = "Bits 10:11 - Port n.10 configuration bits"]
            #[inline(always)]
            pub fn cnf10(&mut self) -> CNF10_W {
                CNF10_W { w: self }
            }
            #[doc = "Bits 12:13 - Port n.11 mode bits"]
            #[inline(always)]
            pub fn mode11(&mut self) -> MODE11_W {
                MODE11_W { w: self }
            }
            #[doc = "Bits 14:15 - Port n.11 configuration bits"]
            #[inline(always)]
            pub fn cnf11(&mut self) -> CNF11_W {
                CNF11_W { w: self }
            }
            #[doc = "Bits 16:17 - Port n.12 mode bits"]
            #[inline(always)]
            pub fn mode12(&mut self) -> MODE12_W {
                MODE12_W { w: self }
            }
            #[doc = "Bits 18:19 - Port n.12 configuration bits"]
            #[inline(always)]
            pub fn cnf12(&mut self) -> CNF12_W {
                CNF12_W { w: self }
            }
            #[doc = "Bits 20:21 - Port n.13 mode bits"]
            #[inline(always)]
            pub fn mode13(&mut self) -> MODE13_W {
                MODE13_W { w: self }
            }
            #[doc = "Bits 22:23 - Port n.13 configuration bits"]
            #[inline(always)]
            pub fn cnf13(&mut self) -> CNF13_W {
                CNF13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port n.14 mode bits"]
            #[inline(always)]
            pub fn mode14(&mut self) -> MODE14_W {
                MODE14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port n.14 configuration bits"]
            #[inline(always)]
            pub fn cnf14(&mut self) -> CNF14_W {
                CNF14_W { w: self }
            }
            #[doc = "Bits 28:29 - Port n.15 mode bits"]
            #[inline(always)]
            pub fn mode15(&mut self) -> MODE15_W {
                MODE15_W { w: self }
            }
            #[doc = "Bits 30:31 - Port n.15 configuration bits"]
            #[inline(always)]
            pub fn cnf15(&mut self) -> CNF15_W {
                CNF15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port configuration register high (GPIOn_CFGHR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfghr](index.html) module"]
        pub struct CFGHR_SPEC;
        impl crate::RegisterSpec for CFGHR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfghr::R](R) reader structure"]
        impl crate::Readable for CFGHR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfghr::W](W) writer structure"]
        impl crate::Writable for CFGHR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGHR to value 0x4444_4444"]
        impl crate::Resettable for CFGHR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x4444_4444
            }
        }
    }
    #[doc = "INDR register accessor: an alias for `Reg<INDR_SPEC>`"]
    pub type INDR = crate::Reg<indr::INDR_SPEC>;
    #[doc = "Port input data register (GPIOn_INDR)"]
    pub mod indr {
        #[doc = "Register `INDR` reader"]
        pub struct R(crate::R<INDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `IDR0` reader - Port input data"]
        pub struct IDR0_R(crate::FieldReader<bool>);
        impl IDR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR1` reader - Port input data"]
        pub struct IDR1_R(crate::FieldReader<bool>);
        impl IDR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR2` reader - Port input data"]
        pub struct IDR2_R(crate::FieldReader<bool>);
        impl IDR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR3` reader - Port input data"]
        pub struct IDR3_R(crate::FieldReader<bool>);
        impl IDR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR4` reader - Port input data"]
        pub struct IDR4_R(crate::FieldReader<bool>);
        impl IDR4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR5` reader - Port input data"]
        pub struct IDR5_R(crate::FieldReader<bool>);
        impl IDR5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR6` reader - Port input data"]
        pub struct IDR6_R(crate::FieldReader<bool>);
        impl IDR6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR7` reader - Port input data"]
        pub struct IDR7_R(crate::FieldReader<bool>);
        impl IDR7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR8` reader - Port input data"]
        pub struct IDR8_R(crate::FieldReader<bool>);
        impl IDR8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR9` reader - Port input data"]
        pub struct IDR9_R(crate::FieldReader<bool>);
        impl IDR9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR10` reader - Port input data"]
        pub struct IDR10_R(crate::FieldReader<bool>);
        impl IDR10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR11` reader - Port input data"]
        pub struct IDR11_R(crate::FieldReader<bool>);
        impl IDR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR12` reader - Port input data"]
        pub struct IDR12_R(crate::FieldReader<bool>);
        impl IDR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR13` reader - Port input data"]
        pub struct IDR13_R(crate::FieldReader<bool>);
        impl IDR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR14` reader - Port input data"]
        pub struct IDR14_R(crate::FieldReader<bool>);
        impl IDR14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR15` reader - Port input data"]
        pub struct IDR15_R(crate::FieldReader<bool>);
        impl IDR15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDR15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Port input data"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Port input data"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Port input data"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Port input data"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Port input data"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Port input data"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Port input data"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Port input data"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Port input data"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Port input data"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Port input data"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Port input data"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Port input data"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Port input data"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Port input data"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Port input data"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 1) != 0)
            }
        }
        #[doc = "Port input data register (GPIOn_INDR)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [indr](index.html) module"]
        pub struct INDR_SPEC;
        impl crate::RegisterSpec for INDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [indr::R](R) reader structure"]
        impl crate::Readable for INDR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets INDR to value 0"]
        impl crate::Resettable for INDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "OUTDR register accessor: an alias for `Reg<OUTDR_SPEC>`"]
    pub type OUTDR = crate::Reg<outdr::OUTDR_SPEC>;
    #[doc = "Port output data register (GPIOn_OUTDR)"]
    pub mod outdr {
        #[doc = "Register `OUTDR` reader"]
        pub struct R(crate::R<OUTDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<OUTDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<OUTDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<OUTDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `OUTDR` writer"]
        pub struct W(crate::W<OUTDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<OUTDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<OUTDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<OUTDR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ODR0` reader - Port output data"]
        pub struct ODR0_R(crate::FieldReader<bool>);
        impl ODR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR0` writer - Port output data"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `ODR1` reader - Port output data"]
        pub struct ODR1_R(crate::FieldReader<bool>);
        impl ODR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR1` writer - Port output data"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `ODR2` reader - Port output data"]
        pub struct ODR2_R(crate::FieldReader<bool>);
        impl ODR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR2` writer - Port output data"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `ODR3` reader - Port output data"]
        pub struct ODR3_R(crate::FieldReader<bool>);
        impl ODR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR3` writer - Port output data"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `ODR4` reader - Port output data"]
        pub struct ODR4_R(crate::FieldReader<bool>);
        impl ODR4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR4` writer - Port output data"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `ODR5` reader - Port output data"]
        pub struct ODR5_R(crate::FieldReader<bool>);
        impl ODR5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR5` writer - Port output data"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `ODR6` reader - Port output data"]
        pub struct ODR6_R(crate::FieldReader<bool>);
        impl ODR6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR6` writer - Port output data"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `ODR7` reader - Port output data"]
        pub struct ODR7_R(crate::FieldReader<bool>);
        impl ODR7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR7` writer - Port output data"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `ODR8` reader - Port output data"]
        pub struct ODR8_R(crate::FieldReader<bool>);
        impl ODR8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR8` writer - Port output data"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `ODR9` reader - Port output data"]
        pub struct ODR9_R(crate::FieldReader<bool>);
        impl ODR9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR9` writer - Port output data"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `ODR10` reader - Port output data"]
        pub struct ODR10_R(crate::FieldReader<bool>);
        impl ODR10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR10` writer - Port output data"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `ODR11` reader - Port output data"]
        pub struct ODR11_R(crate::FieldReader<bool>);
        impl ODR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR11` writer - Port output data"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `ODR12` reader - Port output data"]
        pub struct ODR12_R(crate::FieldReader<bool>);
        impl ODR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR12` writer - Port output data"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `ODR13` reader - Port output data"]
        pub struct ODR13_R(crate::FieldReader<bool>);
        impl ODR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR13` writer - Port output data"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `ODR14` reader - Port output data"]
        pub struct ODR14_R(crate::FieldReader<bool>);
        impl ODR14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR14` writer - Port output data"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `ODR15` reader - Port output data"]
        pub struct ODR15_R(crate::FieldReader<bool>);
        impl ODR15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ODR15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ODR15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ODR15` writer - Port output data"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Port output data"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Port output data"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Port output data"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Port output data"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Port output data"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Port output data"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Port output data"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Port output data"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Port output data"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Port output data"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Port output data"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Port output data"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Port output data"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Port output data"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Port output data"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Port output data"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Port output data"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
            #[doc = "Bit 1 - Port output data"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 2 - Port output data"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 3 - Port output data"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 4 - Port output data"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 5 - Port output data"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 6 - Port output data"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 7 - Port output data"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 8 - Port output data"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 9 - Port output data"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 10 - Port output data"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 11 - Port output data"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 12 - Port output data"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 13 - Port output data"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 14 - Port output data"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 15 - Port output data"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port output data register (GPIOn_OUTDR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [outdr](index.html) module"]
        pub struct OUTDR_SPEC;
        impl crate::RegisterSpec for OUTDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [outdr::R](R) reader structure"]
        impl crate::Readable for OUTDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [outdr::W](W) writer structure"]
        impl crate::Writable for OUTDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets OUTDR to value 0"]
        impl crate::Resettable for OUTDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BSHR register accessor: an alias for `Reg<BSHR_SPEC>`"]
    pub type BSHR = crate::Reg<bshr::BSHR_SPEC>;
    #[doc = "Port bit set/reset register (GPIOn_BSHR)"]
    pub mod bshr {
        #[doc = "Register `BSHR` writer"]
        pub struct W(crate::W<BSHR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BSHR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BSHR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BSHR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BS0` writer - Set bit 0"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `BS1` writer - Set bit 1"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `BS2` writer - Set bit 1"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `BS3` writer - Set bit 3"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `BS4` writer - Set bit 4"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `BS5` writer - Set bit 5"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `BS6` writer - Set bit 6"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `BS7` writer - Set bit 7"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `BS8` writer - Set bit 8"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `BS9` writer - Set bit 9"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `BS10` writer - Set bit 10"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `BS11` writer - Set bit 11"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `BS12` writer - Set bit 12"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `BS13` writer - Set bit 13"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `BS14` writer - Set bit 14"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `BS15` writer - Set bit 15"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `BR0` writer - Reset bit 0"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `BR1` writer - Reset bit 1"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `BR2` writer - Reset bit 2"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        #[doc = "Field `BR3` writer - Reset bit 3"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 19)) | ((value as u32 & 1) << 19);
                self.w
            }
        }
        #[doc = "Field `BR4` writer - Reset bit 4"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 20)) | ((value as u32 & 1) << 20);
                self.w
            }
        }
        #[doc = "Field `BR5` writer - Reset bit 5"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 21)) | ((value as u32 & 1) << 21);
                self.w
            }
        }
        #[doc = "Field `BR6` writer - Reset bit 6"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 22)) | ((value as u32 & 1) << 22);
                self.w
            }
        }
        #[doc = "Field `BR7` writer - Reset bit 7"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 23)) | ((value as u32 & 1) << 23);
                self.w
            }
        }
        #[doc = "Field `BR8` writer - Reset bit 8"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 24)) | ((value as u32 & 1) << 24);
                self.w
            }
        }
        #[doc = "Field `BR9` writer - Reset bit 9"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 25)) | ((value as u32 & 1) << 25);
                self.w
            }
        }
        #[doc = "Field `BR10` writer - Reset bit 10"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 26)) | ((value as u32 & 1) << 26);
                self.w
            }
        }
        #[doc = "Field `BR11` writer - Reset bit 11"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 27)) | ((value as u32 & 1) << 27);
                self.w
            }
        }
        #[doc = "Field `BR12` writer - Reset bit 12"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 28)) | ((value as u32 & 1) << 28);
                self.w
            }
        }
        #[doc = "Field `BR13` writer - Reset bit 13"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 29)) | ((value as u32 & 1) << 29);
                self.w
            }
        }
        #[doc = "Field `BR14` writer - Reset bit 14"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 30)) | ((value as u32 & 1) << 30);
                self.w
            }
        }
        #[doc = "Field `BR15` writer - Reset bit 15"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 31)) | ((value as u32 & 1) << 31);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Set bit 0"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
            #[doc = "Bit 1 - Set bit 1"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 2 - Set bit 1"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 3 - Set bit 3"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 4 - Set bit 4"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 5 - Set bit 5"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 6 - Set bit 6"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 7 - Set bit 7"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 8 - Set bit 8"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 9 - Set bit 9"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 10 - Set bit 10"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 11 - Set bit 11"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 12 - Set bit 12"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 13 - Set bit 13"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 14 - Set bit 14"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 15 - Set bit 15"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 16 - Reset bit 0"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 17 - Reset bit 1"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 18 - Reset bit 2"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 19 - Reset bit 3"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 20 - Reset bit 4"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 21 - Reset bit 5"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 22 - Reset bit 6"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 23 - Reset bit 7"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 24 - Reset bit 8"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 25 - Reset bit 9"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 26 - Reset bit 10"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 27 - Reset bit 11"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 28 - Reset bit 12"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 29 - Reset bit 13"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 30 - Reset bit 14"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 31 - Reset bit 15"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port bit set/reset register (GPIOn_BSHR)\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bshr](index.html) module"]
        pub struct BSHR_SPEC;
        impl crate::RegisterSpec for BSHR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [bshr::W](W) writer structure"]
        impl crate::Writable for BSHR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BSHR to value 0"]
        impl crate::Resettable for BSHR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BCR register accessor: an alias for `Reg<BCR_SPEC>`"]
    pub type BCR = crate::Reg<bcr::BCR_SPEC>;
    #[doc = "Port bit reset register (GPIOn_BCR)"]
    pub mod bcr {
        #[doc = "Register `BCR` writer"]
        pub struct W(crate::W<BCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BR0` writer - Reset bit 0"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `BR1` writer - Reset bit 1"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `BR2` writer - Reset bit 1"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `BR3` writer - Reset bit 3"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `BR4` writer - Reset bit 4"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `BR5` writer - Reset bit 5"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `BR6` writer - Reset bit 6"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `BR7` writer - Reset bit 7"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `BR8` writer - Reset bit 8"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `BR9` writer - Reset bit 9"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `BR10` writer - Reset bit 10"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `BR11` writer - Reset bit 11"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `BR12` writer - Reset bit 12"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `BR13` writer - Reset bit 13"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `BR14` writer - Reset bit 14"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `BR15` writer - Reset bit 15"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Reset bit 0"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 1 - Reset bit 1"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 2 - Reset bit 1"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 3 - Reset bit 3"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 4 - Reset bit 4"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 5 - Reset bit 5"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 6 - Reset bit 6"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 7 - Reset bit 7"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 8 - Reset bit 8"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 9 - Reset bit 9"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 10 - Reset bit 10"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 11 - Reset bit 11"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 12 - Reset bit 12"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 13 - Reset bit 13"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 14 - Reset bit 14"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 15 - Reset bit 15"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port bit reset register (GPIOn_BCR)\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcr](index.html) module"]
        pub struct BCR_SPEC;
        impl crate::RegisterSpec for BCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [bcr::W](W) writer structure"]
        impl crate::Writable for BCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BCR to value 0"]
        impl crate::Resettable for BCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LCKR register accessor: an alias for `Reg<LCKR_SPEC>`"]
    pub type LCKR = crate::Reg<lckr::LCKR_SPEC>;
    #[doc = "Port configuration lock register"]
    pub mod lckr {
        #[doc = "Register `LCKR` reader"]
        pub struct R(crate::R<LCKR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LCKR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LCKR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LCKR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LCKR` writer"]
        pub struct W(crate::W<LCKR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LCKR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LCKR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LCKR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LCK0` reader - Port A Lock bit 0"]
        pub struct LCK0_R(crate::FieldReader<bool>);
        impl LCK0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK0` writer - Port A Lock bit 0"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `LCK1` reader - Port A Lock bit 1"]
        pub struct LCK1_R(crate::FieldReader<bool>);
        impl LCK1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK1` writer - Port A Lock bit 1"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `LCK2` reader - Port A Lock bit 2"]
        pub struct LCK2_R(crate::FieldReader<bool>);
        impl LCK2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK2` writer - Port A Lock bit 2"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `LCK3` reader - Port A Lock bit 3"]
        pub struct LCK3_R(crate::FieldReader<bool>);
        impl LCK3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK3` writer - Port A Lock bit 3"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `LCK4` reader - Port A Lock bit 4"]
        pub struct LCK4_R(crate::FieldReader<bool>);
        impl LCK4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK4` writer - Port A Lock bit 4"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `LCK5` reader - Port A Lock bit 5"]
        pub struct LCK5_R(crate::FieldReader<bool>);
        impl LCK5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK5` writer - Port A Lock bit 5"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `LCK6` reader - Port A Lock bit 6"]
        pub struct LCK6_R(crate::FieldReader<bool>);
        impl LCK6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK6` writer - Port A Lock bit 6"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `LCK7` reader - Port A Lock bit 7"]
        pub struct LCK7_R(crate::FieldReader<bool>);
        impl LCK7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK7` writer - Port A Lock bit 7"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `LCK8` reader - Port A Lock bit 8"]
        pub struct LCK8_R(crate::FieldReader<bool>);
        impl LCK8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK8` writer - Port A Lock bit 8"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `LCK9` reader - Port A Lock bit 9"]
        pub struct LCK9_R(crate::FieldReader<bool>);
        impl LCK9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK9` writer - Port A Lock bit 9"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `LCK10` reader - Port A Lock bit 10"]
        pub struct LCK10_R(crate::FieldReader<bool>);
        impl LCK10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK10` writer - Port A Lock bit 10"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `LCK11` reader - Port A Lock bit 11"]
        pub struct LCK11_R(crate::FieldReader<bool>);
        impl LCK11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK11` writer - Port A Lock bit 11"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `LCK12` reader - Port A Lock bit 12"]
        pub struct LCK12_R(crate::FieldReader<bool>);
        impl LCK12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK12` writer - Port A Lock bit 12"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `LCK13` reader - Port A Lock bit 13"]
        pub struct LCK13_R(crate::FieldReader<bool>);
        impl LCK13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK13` writer - Port A Lock bit 13"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `LCK14` reader - Port A Lock bit 14"]
        pub struct LCK14_R(crate::FieldReader<bool>);
        impl LCK14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK14` writer - Port A Lock bit 14"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `LCK15` reader - Port A Lock bit 15"]
        pub struct LCK15_R(crate::FieldReader<bool>);
        impl LCK15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCK15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCK15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCK15` writer - Port A Lock bit 15"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `LCKK` reader - Lock key"]
        pub struct LCKK_R(crate::FieldReader<bool>);
        impl LCKK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LCKK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LCKK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LCKK` writer - Lock key"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Port A Lock bit 0"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Port A Lock bit 1"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Port A Lock bit 2"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Port A Lock bit 3"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Port A Lock bit 4"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Port A Lock bit 5"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Port A Lock bit 6"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Port A Lock bit 7"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Port A Lock bit 8"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Port A Lock bit 9"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Port A Lock bit 10"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Port A Lock bit 11"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Port A Lock bit 12"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Port A Lock bit 13"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Port A Lock bit 14"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Port A Lock bit 15"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Lock key"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Port A Lock bit 0"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
            #[doc = "Bit 1 - Port A Lock bit 1"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 2 - Port A Lock bit 2"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 3 - Port A Lock bit 3"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 4 - Port A Lock bit 4"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 5 - Port A Lock bit 5"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 6 - Port A Lock bit 6"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 7 - Port A Lock bit 7"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 8 - Port A Lock bit 8"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 9 - Port A Lock bit 9"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 10 - Port A Lock bit 10"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 11 - Port A Lock bit 11"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 12 - Port A Lock bit 12"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 13 - Port A Lock bit 13"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 14 - Port A Lock bit 14"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 15 - Port A Lock bit 15"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 16 - Lock key"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](index.html) module"]
        pub struct LCKR_SPEC;
        impl crate::RegisterSpec for LCKR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lckr::R](R) reader structure"]
        impl crate::Readable for LCKR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lckr::W](W) writer structure"]
        impl crate::Writable for LCKR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LCKR to value 0"]
        impl crate::Resettable for LCKR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General purpose I/O"]
pub struct GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOB {}
impl GPIOB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOB {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
#[doc = "General purpose I/O"]
pub use gpioa as gpiob;
#[doc = "General purpose I/O"]
pub struct GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOC {}
impl GPIOC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOC {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
#[doc = "General purpose I/O"]
pub use gpioa as gpioc;
#[doc = "General purpose I/O"]
pub struct GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOD {}
impl GPIOD {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_1400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOD {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
#[doc = "General purpose I/O"]
pub use gpioa as gpiod;
#[doc = "Alternate function I/O"]
pub struct AFIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AFIO {}
impl AFIO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const afio::RegisterBlock = 0x4001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const afio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AFIO {
    type Target = afio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AFIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AFIO").finish()
    }
}
#[doc = "Alternate function I/O"]
pub mod afio {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Event Control Register (AFIO_ECR)"]
        pub ecr: crate::Reg<ecr::ECR_SPEC>,
        #[doc = "0x04 - AF remap and debug I/O configuration register (AFIO_PCFR)"]
        pub pcfr: crate::Reg<pcfr::PCFR_SPEC>,
        #[doc = "0x08 - External interrupt configuration register 1 (AFIO_EXTICR1)"]
        pub exticr1: crate::Reg<exticr1::EXTICR1_SPEC>,
        #[doc = "0x0c - External interrupt configuration register 2 (AFIO_EXTICR2)"]
        pub exticr2: crate::Reg<exticr2::EXTICR2_SPEC>,
        #[doc = "0x10 - External interrupt configuration register 3 (AFIO_EXTICR3)"]
        pub exticr3: crate::Reg<exticr3::EXTICR3_SPEC>,
        #[doc = "0x14 - External interrupt configuration register 4 (AFIO_EXTICR4)"]
        pub exticr4: crate::Reg<exticr4::EXTICR4_SPEC>,
    }
    #[doc = "ECR register accessor: an alias for `Reg<ECR_SPEC>`"]
    pub type ECR = crate::Reg<ecr::ECR_SPEC>;
    #[doc = "Event Control Register (AFIO_ECR)"]
    pub mod ecr {
        #[doc = "Register `ECR` reader"]
        pub struct R(crate::R<ECR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ECR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ECR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ECR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ECR` writer"]
        pub struct W(crate::W<ECR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ECR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ECR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ECR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PIN` reader - Pin selection"]
        pub struct PIN_R(crate::FieldReader<u8>);
        impl PIN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PIN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIN_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIN` writer - Pin selection"]
        pub struct PIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        #[doc = "Field `PORT` reader - Port selection"]
        pub struct PORT_R(crate::FieldReader<u8>);
        impl PORT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PORT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PORT_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PORT` writer - Port selection"]
        pub struct PORT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `EVOE` reader - Event Output Enable"]
        pub struct EVOE_R(crate::FieldReader<bool>);
        impl EVOE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EVOE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EVOE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EVOE` writer - Event Output Enable"]
        pub struct EVOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EVOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Pin selection"]
            #[inline(always)]
            pub fn pin(&self) -> PIN_R {
                PIN_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Port selection"]
            #[inline(always)]
            pub fn port(&self) -> PORT_R {
                PORT_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Event Output Enable"]
            #[inline(always)]
            pub fn evoe(&self) -> EVOE_R {
                EVOE_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Pin selection"]
            #[inline(always)]
            pub fn pin(&mut self) -> PIN_W {
                PIN_W { w: self }
            }
            #[doc = "Bits 4:6 - Port selection"]
            #[inline(always)]
            pub fn port(&mut self) -> PORT_W {
                PORT_W { w: self }
            }
            #[doc = "Bit 7 - Event Output Enable"]
            #[inline(always)]
            pub fn evoe(&mut self) -> EVOE_W {
                EVOE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Event Control Register (AFIO_ECR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ecr](index.html) module"]
        pub struct ECR_SPEC;
        impl crate::RegisterSpec for ECR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ecr::R](R) reader structure"]
        impl crate::Readable for ECR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ecr::W](W) writer structure"]
        impl crate::Writable for ECR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ECR to value 0"]
        impl crate::Resettable for ECR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCFR register accessor: an alias for `Reg<PCFR_SPEC>`"]
    pub type PCFR = crate::Reg<pcfr::PCFR_SPEC>;
    #[doc = "AF remap and debug I/O configuration register (AFIO_PCFR)"]
    pub mod pcfr {
        #[doc = "Register `PCFR` reader"]
        pub struct R(crate::R<PCFR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCFR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCFR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCFR` writer"]
        pub struct W(crate::W<PCFR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCFR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCFR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SPI1RM` reader - SPI1 remapping"]
        pub struct SPI1RM_R(crate::FieldReader<bool>);
        impl SPI1RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI1RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI1RM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI1RM` writer - SPI1 remapping"]
        pub struct SPI1RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1RM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `I2C1RM` reader - I2C1 remapping"]
        pub struct I2C1RM_R(crate::FieldReader<bool>);
        impl I2C1RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C1RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C1RM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C1RM` writer - I2C1 remapping"]
        pub struct I2C1RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1RM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `USART1RM` reader - USART1 remapping"]
        pub struct USART1RM_R(crate::FieldReader<bool>);
        impl USART1RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART1RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART1RM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART1RM` writer - USART1 remapping"]
        pub struct USART1RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1RM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `USART2RM` reader - USART2 remapping"]
        pub struct USART2RM_R(crate::FieldReader<bool>);
        impl USART2RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USART2RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART2RM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART2RM` writer - USART2 remapping"]
        pub struct USART2RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2RM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `USART3RM` reader - USART3 remapping"]
        pub struct USART3RM_R(crate::FieldReader<u8>);
        impl USART3RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                USART3RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USART3RM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USART3RM` writer - USART3 remapping"]
        pub struct USART3RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3RM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 4)) | ((value as u32 & 3) << 4);
                self.w
            }
        }
        #[doc = "Field `TIM1RM` reader - TIM1 remapping"]
        pub struct TIM1RM_R(crate::FieldReader<u8>);
        impl TIM1RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TIM1RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM1RM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM1RM` writer - TIM1 remapping"]
        pub struct TIM1RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1RM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 6)) | ((value as u32 & 3) << 6);
                self.w
            }
        }
        #[doc = "Field `TIM2RM` reader - TIM2 remapping"]
        pub struct TIM2RM_R(crate::FieldReader<u8>);
        impl TIM2RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TIM2RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM2RM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM2RM` writer - TIM2 remapping"]
        pub struct TIM2RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2RM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `TIM3RM` reader - TIM3 remapping"]
        pub struct TIM3RM_R(crate::FieldReader<u8>);
        impl TIM3RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TIM3RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIM3RM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIM3RM` writer - TIM3 remapping"]
        pub struct TIM3RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3RM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `CANRM` reader - CAN1 remapping"]
        pub struct CANRM_R(crate::FieldReader<u8>);
        impl CANRM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CANRM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CANRM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CANRM` writer - CAN1 remapping"]
        pub struct CANRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CANRM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 13)) | ((value as u32 & 3) << 13);
                self.w
            }
        }
        #[doc = "Field `PD01RM` reader - Port D0/Port D1 mapping on OSCIN/OSCOUT"]
        pub struct PD01RM_R(crate::FieldReader<bool>);
        impl PD01RM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PD01RM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PD01RM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PD01RM` writer - Port D0/Port D1 mapping on OSCIN/OSCOUT"]
        pub struct PD01RM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD01RM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `SWCFG` writer - Serial wire JTAG configuration"]
        pub struct SWCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWCFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 24)) | ((value as u32 & 7) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SPI1 remapping"]
            #[inline(always)]
            pub fn spi1rm(&self) -> SPI1RM_R {
                SPI1RM_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - I2C1 remapping"]
            #[inline(always)]
            pub fn i2c1rm(&self) -> I2C1RM_R {
                I2C1RM_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - USART1 remapping"]
            #[inline(always)]
            pub fn usart1rm(&self) -> USART1RM_R {
                USART1RM_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - USART2 remapping"]
            #[inline(always)]
            pub fn usart2rm(&self) -> USART2RM_R {
                USART2RM_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:5 - USART3 remapping"]
            #[inline(always)]
            pub fn usart3rm(&self) -> USART3RM_R {
                USART3RM_R::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bits 6:7 - TIM1 remapping"]
            #[inline(always)]
            pub fn tim1rm(&self) -> TIM1RM_R {
                TIM1RM_R::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bits 8:9 - TIM2 remapping"]
            #[inline(always)]
            pub fn tim2rm(&self) -> TIM2RM_R {
                TIM2RM_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - TIM3 remapping"]
            #[inline(always)]
            pub fn tim3rm(&self) -> TIM3RM_R {
                TIM3RM_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 13:14 - CAN1 remapping"]
            #[inline(always)]
            pub fn canrm(&self) -> CANRM_R {
                CANRM_R::new(((self.bits >> 13) & 3) as u8)
            }
            #[doc = "Bit 15 - Port D0/Port D1 mapping on OSCIN/OSCOUT"]
            #[inline(always)]
            pub fn pd01rm(&self) -> PD01RM_R {
                PD01RM_R::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SPI1 remapping"]
            #[inline(always)]
            pub fn spi1rm(&mut self) -> SPI1RM_W {
                SPI1RM_W { w: self }
            }
            #[doc = "Bit 1 - I2C1 remapping"]
            #[inline(always)]
            pub fn i2c1rm(&mut self) -> I2C1RM_W {
                I2C1RM_W { w: self }
            }
            #[doc = "Bit 2 - USART1 remapping"]
            #[inline(always)]
            pub fn usart1rm(&mut self) -> USART1RM_W {
                USART1RM_W { w: self }
            }
            #[doc = "Bit 3 - USART2 remapping"]
            #[inline(always)]
            pub fn usart2rm(&mut self) -> USART2RM_W {
                USART2RM_W { w: self }
            }
            #[doc = "Bits 4:5 - USART3 remapping"]
            #[inline(always)]
            pub fn usart3rm(&mut self) -> USART3RM_W {
                USART3RM_W { w: self }
            }
            #[doc = "Bits 6:7 - TIM1 remapping"]
            #[inline(always)]
            pub fn tim1rm(&mut self) -> TIM1RM_W {
                TIM1RM_W { w: self }
            }
            #[doc = "Bits 8:9 - TIM2 remapping"]
            #[inline(always)]
            pub fn tim2rm(&mut self) -> TIM2RM_W {
                TIM2RM_W { w: self }
            }
            #[doc = "Bits 10:11 - TIM3 remapping"]
            #[inline(always)]
            pub fn tim3rm(&mut self) -> TIM3RM_W {
                TIM3RM_W { w: self }
            }
            #[doc = "Bits 13:14 - CAN1 remapping"]
            #[inline(always)]
            pub fn canrm(&mut self) -> CANRM_W {
                CANRM_W { w: self }
            }
            #[doc = "Bit 15 - Port D0/Port D1 mapping on OSCIN/OSCOUT"]
            #[inline(always)]
            pub fn pd01rm(&mut self) -> PD01RM_W {
                PD01RM_W { w: self }
            }
            #[doc = "Bits 24:26 - Serial wire JTAG configuration"]
            #[inline(always)]
            pub fn swcfg(&mut self) -> SWCFG_W {
                SWCFG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "AF remap and debug I/O configuration register (AFIO_PCFR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcfr](index.html) module"]
        pub struct PCFR_SPEC;
        impl crate::RegisterSpec for PCFR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcfr::R](R) reader structure"]
        impl crate::Readable for PCFR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcfr::W](W) writer structure"]
        impl crate::Writable for PCFR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCFR to value 0"]
        impl crate::Resettable for PCFR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXTICR1 register accessor: an alias for `Reg<EXTICR1_SPEC>`"]
    pub type EXTICR1 = crate::Reg<exticr1::EXTICR1_SPEC>;
    #[doc = "External interrupt configuration register 1 (AFIO_EXTICR1)"]
    pub mod exticr1 {
        #[doc = "Register `EXTICR1` reader"]
        pub struct R(crate::R<EXTICR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTICR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTICR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTICR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXTICR1` writer"]
        pub struct W(crate::W<EXTICR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXTICR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXTICR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXTICR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EXTI0` reader - EXTI0 configuration"]
        pub struct EXTI0_R(crate::FieldReader<u8>);
        impl EXTI0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI0_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI0` writer - EXTI0 configuration"]
        pub struct EXTI0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        #[doc = "Field `EXTI1` reader - EXTI1 configuration"]
        pub struct EXTI1_R(crate::FieldReader<u8>);
        impl EXTI1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI1` writer - EXTI1 configuration"]
        pub struct EXTI1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `EXTI2` reader - EXTI2 configuration"]
        pub struct EXTI2_R(crate::FieldReader<u8>);
        impl EXTI2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI2` writer - EXTI2 configuration"]
        pub struct EXTI2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | ((value as u32 & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Field `EXTI3` reader - EXTI3 configuration"]
        pub struct EXTI3_R(crate::FieldReader<u8>);
        impl EXTI3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI3_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI3` writer - EXTI3 configuration"]
        pub struct EXTI3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - EXTI0 configuration"]
            #[inline(always)]
            pub fn exti0(&self) -> EXTI0_R {
                EXTI0_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI1 configuration"]
            #[inline(always)]
            pub fn exti1(&self) -> EXTI1_R {
                EXTI1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI2 configuration"]
            #[inline(always)]
            pub fn exti2(&self) -> EXTI2_R {
                EXTI2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI3 configuration"]
            #[inline(always)]
            pub fn exti3(&self) -> EXTI3_R {
                EXTI3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI0 configuration"]
            #[inline(always)]
            pub fn exti0(&mut self) -> EXTI0_W {
                EXTI0_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI1 configuration"]
            #[inline(always)]
            pub fn exti1(&mut self) -> EXTI1_W {
                EXTI1_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI2 configuration"]
            #[inline(always)]
            pub fn exti2(&mut self) -> EXTI2_W {
                EXTI2_W { w: self }
            }
            #[doc = "Bits 12:15 - EXTI3 configuration"]
            #[inline(always)]
            pub fn exti3(&mut self) -> EXTI3_W {
                EXTI3_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "External interrupt configuration register 1 (AFIO_EXTICR1)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr1](index.html) module"]
        pub struct EXTICR1_SPEC;
        impl crate::RegisterSpec for EXTICR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exticr1::R](R) reader structure"]
        impl crate::Readable for EXTICR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [exticr1::W](W) writer structure"]
        impl crate::Writable for EXTICR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXTICR1 to value 0"]
        impl crate::Resettable for EXTICR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXTICR2 register accessor: an alias for `Reg<EXTICR2_SPEC>`"]
    pub type EXTICR2 = crate::Reg<exticr2::EXTICR2_SPEC>;
    #[doc = "External interrupt configuration register 2 (AFIO_EXTICR2)"]
    pub mod exticr2 {
        #[doc = "Register `EXTICR2` reader"]
        pub struct R(crate::R<EXTICR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTICR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTICR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTICR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXTICR2` writer"]
        pub struct W(crate::W<EXTICR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXTICR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXTICR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXTICR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EXTI4` reader - EXTI4 configuration"]
        pub struct EXTI4_R(crate::FieldReader<u8>);
        impl EXTI4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI4_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI4` writer - EXTI4 configuration"]
        pub struct EXTI4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        #[doc = "Field `EXTI5` reader - EXTI5 configuration"]
        pub struct EXTI5_R(crate::FieldReader<u8>);
        impl EXTI5_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI5_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI5` writer - EXTI5 configuration"]
        pub struct EXTI5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `EXTI6` reader - EXTI6 configuration"]
        pub struct EXTI6_R(crate::FieldReader<u8>);
        impl EXTI6_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI6_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI6` writer - EXTI6 configuration"]
        pub struct EXTI6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | ((value as u32 & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Field `EXTI7` reader - EXTI7 configuration"]
        pub struct EXTI7_R(crate::FieldReader<u8>);
        impl EXTI7_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI7_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI7` writer - EXTI7 configuration"]
        pub struct EXTI7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - EXTI4 configuration"]
            #[inline(always)]
            pub fn exti4(&self) -> EXTI4_R {
                EXTI4_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI5 configuration"]
            #[inline(always)]
            pub fn exti5(&self) -> EXTI5_R {
                EXTI5_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI6 configuration"]
            #[inline(always)]
            pub fn exti6(&self) -> EXTI6_R {
                EXTI6_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI7 configuration"]
            #[inline(always)]
            pub fn exti7(&self) -> EXTI7_R {
                EXTI7_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI4 configuration"]
            #[inline(always)]
            pub fn exti4(&mut self) -> EXTI4_W {
                EXTI4_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI5 configuration"]
            #[inline(always)]
            pub fn exti5(&mut self) -> EXTI5_W {
                EXTI5_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI6 configuration"]
            #[inline(always)]
            pub fn exti6(&mut self) -> EXTI6_W {
                EXTI6_W { w: self }
            }
            #[doc = "Bits 12:15 - EXTI7 configuration"]
            #[inline(always)]
            pub fn exti7(&mut self) -> EXTI7_W {
                EXTI7_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "External interrupt configuration register 2 (AFIO_EXTICR2)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr2](index.html) module"]
        pub struct EXTICR2_SPEC;
        impl crate::RegisterSpec for EXTICR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exticr2::R](R) reader structure"]
        impl crate::Readable for EXTICR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [exticr2::W](W) writer structure"]
        impl crate::Writable for EXTICR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXTICR2 to value 0"]
        impl crate::Resettable for EXTICR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXTICR3 register accessor: an alias for `Reg<EXTICR3_SPEC>`"]
    pub type EXTICR3 = crate::Reg<exticr3::EXTICR3_SPEC>;
    #[doc = "External interrupt configuration register 3 (AFIO_EXTICR3)"]
    pub mod exticr3 {
        #[doc = "Register `EXTICR3` reader"]
        pub struct R(crate::R<EXTICR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTICR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTICR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTICR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXTICR3` writer"]
        pub struct W(crate::W<EXTICR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXTICR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXTICR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXTICR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EXTI8` reader - EXTI8 configuration"]
        pub struct EXTI8_R(crate::FieldReader<u8>);
        impl EXTI8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI8_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI8` writer - EXTI8 configuration"]
        pub struct EXTI8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        #[doc = "Field `EXTI9` reader - EXTI9 configuration"]
        pub struct EXTI9_R(crate::FieldReader<u8>);
        impl EXTI9_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI9_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI9` writer - EXTI9 configuration"]
        pub struct EXTI9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `EXTI10` reader - EXTI10 configuration"]
        pub struct EXTI10_R(crate::FieldReader<u8>);
        impl EXTI10_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI10_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI10` writer - EXTI10 configuration"]
        pub struct EXTI10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | ((value as u32 & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Field `EXTI11` reader - EXTI11 configuration"]
        pub struct EXTI11_R(crate::FieldReader<u8>);
        impl EXTI11_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI11_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI11` writer - EXTI11 configuration"]
        pub struct EXTI11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - EXTI8 configuration"]
            #[inline(always)]
            pub fn exti8(&self) -> EXTI8_R {
                EXTI8_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI9 configuration"]
            #[inline(always)]
            pub fn exti9(&self) -> EXTI9_R {
                EXTI9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI10 configuration"]
            #[inline(always)]
            pub fn exti10(&self) -> EXTI10_R {
                EXTI10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI11 configuration"]
            #[inline(always)]
            pub fn exti11(&self) -> EXTI11_R {
                EXTI11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI8 configuration"]
            #[inline(always)]
            pub fn exti8(&mut self) -> EXTI8_W {
                EXTI8_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI9 configuration"]
            #[inline(always)]
            pub fn exti9(&mut self) -> EXTI9_W {
                EXTI9_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI10 configuration"]
            #[inline(always)]
            pub fn exti10(&mut self) -> EXTI10_W {
                EXTI10_W { w: self }
            }
            #[doc = "Bits 12:15 - EXTI11 configuration"]
            #[inline(always)]
            pub fn exti11(&mut self) -> EXTI11_W {
                EXTI11_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "External interrupt configuration register 3 (AFIO_EXTICR3)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr3](index.html) module"]
        pub struct EXTICR3_SPEC;
        impl crate::RegisterSpec for EXTICR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exticr3::R](R) reader structure"]
        impl crate::Readable for EXTICR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [exticr3::W](W) writer structure"]
        impl crate::Writable for EXTICR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXTICR3 to value 0"]
        impl crate::Resettable for EXTICR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXTICR4 register accessor: an alias for `Reg<EXTICR4_SPEC>`"]
    pub type EXTICR4 = crate::Reg<exticr4::EXTICR4_SPEC>;
    #[doc = "External interrupt configuration register 4 (AFIO_EXTICR4)"]
    pub mod exticr4 {
        #[doc = "Register `EXTICR4` reader"]
        pub struct R(crate::R<EXTICR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTICR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTICR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTICR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXTICR4` writer"]
        pub struct W(crate::W<EXTICR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXTICR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXTICR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXTICR4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EXTI12` reader - EXTI12 configuration"]
        pub struct EXTI12_R(crate::FieldReader<u8>);
        impl EXTI12_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI12_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI12` writer - EXTI12 configuration"]
        pub struct EXTI12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        #[doc = "Field `EXTI13` reader - EXTI13 configuration"]
        pub struct EXTI13_R(crate::FieldReader<u8>);
        impl EXTI13_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI13_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI13` writer - EXTI13 configuration"]
        pub struct EXTI13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `EXTI14` reader - EXTI14 configuration"]
        pub struct EXTI14_R(crate::FieldReader<u8>);
        impl EXTI14_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI14_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI14` writer - EXTI14 configuration"]
        pub struct EXTI14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | ((value as u32 & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Field `EXTI15` reader - EXTI15 configuration"]
        pub struct EXTI15_R(crate::FieldReader<u8>);
        impl EXTI15_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTI15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTI15_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTI15` writer - EXTI15 configuration"]
        pub struct EXTI15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - EXTI12 configuration"]
            #[inline(always)]
            pub fn exti12(&self) -> EXTI12_R {
                EXTI12_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI13 configuration"]
            #[inline(always)]
            pub fn exti13(&self) -> EXTI13_R {
                EXTI13_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI14 configuration"]
            #[inline(always)]
            pub fn exti14(&self) -> EXTI14_R {
                EXTI14_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI15 configuration"]
            #[inline(always)]
            pub fn exti15(&self) -> EXTI15_R {
                EXTI15_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI12 configuration"]
            #[inline(always)]
            pub fn exti12(&mut self) -> EXTI12_W {
                EXTI12_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI13 configuration"]
            #[inline(always)]
            pub fn exti13(&mut self) -> EXTI13_W {
                EXTI13_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI14 configuration"]
            #[inline(always)]
            pub fn exti14(&mut self) -> EXTI14_W {
                EXTI14_W { w: self }
            }
            #[doc = "Bits 12:15 - EXTI15 configuration"]
            #[inline(always)]
            pub fn exti15(&mut self) -> EXTI15_W {
                EXTI15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "External interrupt configuration register 4 (AFIO_EXTICR4)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr4](index.html) module"]
        pub struct EXTICR4_SPEC;
        impl crate::RegisterSpec for EXTICR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exticr4::R](R) reader structure"]
        impl crate::Readable for EXTICR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [exticr4::W](W) writer structure"]
        impl crate::Writable for EXTICR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXTICR4 to value 0"]
        impl crate::Resettable for EXTICR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "EXTI"]
pub struct EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTI {}
impl EXTI {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const exti::RegisterBlock = 0x4001_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
#[doc = "EXTI"]
pub mod exti {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Interrupt mask register (EXTI_INTENR)"]
        pub intenr: crate::Reg<intenr::INTENR_SPEC>,
        #[doc = "0x04 - Event mask register (EXTI_EVENR)"]
        pub evenr: crate::Reg<evenr::EVENR_SPEC>,
        #[doc = "0x08 - Rising Trigger selection register (EXTI_RTENR)"]
        pub rtenr: crate::Reg<rtenr::RTENR_SPEC>,
        #[doc = "0x0c - Falling Trigger selection register (EXTI_FTENR)"]
        pub ftenr: crate::Reg<ftenr::FTENR_SPEC>,
        #[doc = "0x10 - Software interrupt event register (EXTI_SWIEVR)"]
        pub swievr: crate::Reg<swievr::SWIEVR_SPEC>,
        #[doc = "0x14 - Pending register (EXTI_INTFR)"]
        pub intfr: crate::Reg<intfr::INTFR_SPEC>,
    }
    #[doc = "INTENR register accessor: an alias for `Reg<INTENR_SPEC>`"]
    pub type INTENR = crate::Reg<intenr::INTENR_SPEC>;
    #[doc = "Interrupt mask register (EXTI_INTENR)"]
    pub mod intenr {
        #[doc = "Register `INTENR` reader"]
        pub struct R(crate::R<INTENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INTENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INTENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `INTENR` writer"]
        pub struct W(crate::W<INTENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<INTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<INTENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<INTENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MR0` reader - Interrupt Mask on line 0"]
        pub struct MR0_R(crate::FieldReader<bool>);
        impl MR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR0` writer - Interrupt Mask on line 0"]
        pub struct MR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `MR1` reader - Interrupt Mask on line 1"]
        pub struct MR1_R(crate::FieldReader<bool>);
        impl MR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR1` writer - Interrupt Mask on line 1"]
        pub struct MR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `MR2` reader - Interrupt Mask on line 2"]
        pub struct MR2_R(crate::FieldReader<bool>);
        impl MR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR2` writer - Interrupt Mask on line 2"]
        pub struct MR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `MR3` reader - Interrupt Mask on line 3"]
        pub struct MR3_R(crate::FieldReader<bool>);
        impl MR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR3` writer - Interrupt Mask on line 3"]
        pub struct MR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `MR4` reader - Interrupt Mask on line 4"]
        pub struct MR4_R(crate::FieldReader<bool>);
        impl MR4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR4` writer - Interrupt Mask on line 4"]
        pub struct MR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `MR5` reader - Interrupt Mask on line 5"]
        pub struct MR5_R(crate::FieldReader<bool>);
        impl MR5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR5` writer - Interrupt Mask on line 5"]
        pub struct MR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `MR6` reader - Interrupt Mask on line 6"]
        pub struct MR6_R(crate::FieldReader<bool>);
        impl MR6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR6` writer - Interrupt Mask on line 6"]
        pub struct MR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MR7` reader - Interrupt Mask on line 7"]
        pub struct MR7_R(crate::FieldReader<bool>);
        impl MR7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR7` writer - Interrupt Mask on line 7"]
        pub struct MR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `MR8` reader - Interrupt Mask on line 8"]
        pub struct MR8_R(crate::FieldReader<bool>);
        impl MR8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR8` writer - Interrupt Mask on line 8"]
        pub struct MR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `MR9` reader - Interrupt Mask on line 9"]
        pub struct MR9_R(crate::FieldReader<bool>);
        impl MR9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR9` writer - Interrupt Mask on line 9"]
        pub struct MR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `MR10` reader - Interrupt Mask on line 10"]
        pub struct MR10_R(crate::FieldReader<bool>);
        impl MR10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR10` writer - Interrupt Mask on line 10"]
        pub struct MR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `MR11` reader - Interrupt Mask on line 11"]
        pub struct MR11_R(crate::FieldReader<bool>);
        impl MR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR11` writer - Interrupt Mask on line 11"]
        pub struct MR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `MR12` reader - Interrupt Mask on line 12"]
        pub struct MR12_R(crate::FieldReader<bool>);
        impl MR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR12` writer - Interrupt Mask on line 12"]
        pub struct MR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `MR13` reader - Interrupt Mask on line 13"]
        pub struct MR13_R(crate::FieldReader<bool>);
        impl MR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR13` writer - Interrupt Mask on line 13"]
        pub struct MR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `MR14` reader - Interrupt Mask on line 14"]
        pub struct MR14_R(crate::FieldReader<bool>);
        impl MR14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR14` writer - Interrupt Mask on line 14"]
        pub struct MR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `MR15` reader - Interrupt Mask on line 15"]
        pub struct MR15_R(crate::FieldReader<bool>);
        impl MR15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR15` writer - Interrupt Mask on line 15"]
        pub struct MR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `MR16` reader - Interrupt Mask on line 16"]
        pub struct MR16_R(crate::FieldReader<bool>);
        impl MR16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR16_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR16` writer - Interrupt Mask on line 16"]
        pub struct MR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `MR17` reader - Interrupt Mask on line 17"]
        pub struct MR17_R(crate::FieldReader<bool>);
        impl MR17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR17_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR17` writer - Interrupt Mask on line 17"]
        pub struct MR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `MR18` reader - Interrupt Mask on line 18"]
        pub struct MR18_R(crate::FieldReader<bool>);
        impl MR18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR18_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR18` writer - Interrupt Mask on line 18"]
        pub struct MR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Interrupt Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&self) -> MR0_R {
                MR0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Interrupt Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&self) -> MR1_R {
                MR1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Interrupt Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&self) -> MR2_R {
                MR2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Interrupt Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&self) -> MR3_R {
                MR3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Interrupt Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&self) -> MR4_R {
                MR4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Interrupt Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&self) -> MR5_R {
                MR5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Interrupt Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&self) -> MR6_R {
                MR6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Interrupt Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&self) -> MR7_R {
                MR7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Interrupt Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&self) -> MR8_R {
                MR8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Interrupt Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&self) -> MR9_R {
                MR9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Interrupt Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&self) -> MR10_R {
                MR10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Interrupt Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&self) -> MR11_R {
                MR11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Interrupt Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&self) -> MR12_R {
                MR12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Interrupt Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&self) -> MR13_R {
                MR13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Interrupt Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&self) -> MR14_R {
                MR14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Interrupt Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&self) -> MR15_R {
                MR15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Interrupt Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&self) -> MR16_R {
                MR16_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Interrupt Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&self) -> MR17_R {
                MR17_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Interrupt Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&self) -> MR18_R {
                MR18_R::new(((self.bits >> 18) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&mut self) -> MR0_W {
                MR0_W { w: self }
            }
            #[doc = "Bit 1 - Interrupt Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&mut self) -> MR1_W {
                MR1_W { w: self }
            }
            #[doc = "Bit 2 - Interrupt Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&mut self) -> MR2_W {
                MR2_W { w: self }
            }
            #[doc = "Bit 3 - Interrupt Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&mut self) -> MR3_W {
                MR3_W { w: self }
            }
            #[doc = "Bit 4 - Interrupt Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&mut self) -> MR4_W {
                MR4_W { w: self }
            }
            #[doc = "Bit 5 - Interrupt Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&mut self) -> MR5_W {
                MR5_W { w: self }
            }
            #[doc = "Bit 6 - Interrupt Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&mut self) -> MR6_W {
                MR6_W { w: self }
            }
            #[doc = "Bit 7 - Interrupt Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&mut self) -> MR7_W {
                MR7_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&mut self) -> MR8_W {
                MR8_W { w: self }
            }
            #[doc = "Bit 9 - Interrupt Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&mut self) -> MR9_W {
                MR9_W { w: self }
            }
            #[doc = "Bit 10 - Interrupt Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&mut self) -> MR10_W {
                MR10_W { w: self }
            }
            #[doc = "Bit 11 - Interrupt Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&mut self) -> MR11_W {
                MR11_W { w: self }
            }
            #[doc = "Bit 12 - Interrupt Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&mut self) -> MR12_W {
                MR12_W { w: self }
            }
            #[doc = "Bit 13 - Interrupt Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&mut self) -> MR13_W {
                MR13_W { w: self }
            }
            #[doc = "Bit 14 - Interrupt Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&mut self) -> MR14_W {
                MR14_W { w: self }
            }
            #[doc = "Bit 15 - Interrupt Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&mut self) -> MR15_W {
                MR15_W { w: self }
            }
            #[doc = "Bit 16 - Interrupt Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&mut self) -> MR16_W {
                MR16_W { w: self }
            }
            #[doc = "Bit 17 - Interrupt Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&mut self) -> MR17_W {
                MR17_W { w: self }
            }
            #[doc = "Bit 18 - Interrupt Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&mut self) -> MR18_W {
                MR18_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt mask register (EXTI_INTENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intenr](index.html) module"]
        pub struct INTENR_SPEC;
        impl crate::RegisterSpec for INTENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [intenr::R](R) reader structure"]
        impl crate::Readable for INTENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [intenr::W](W) writer structure"]
        impl crate::Writable for INTENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets INTENR to value 0"]
        impl crate::Resettable for INTENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EVENR register accessor: an alias for `Reg<EVENR_SPEC>`"]
    pub type EVENR = crate::Reg<evenr::EVENR_SPEC>;
    #[doc = "Event mask register (EXTI_EVENR)"]
    pub mod evenr {
        #[doc = "Register `EVENR` reader"]
        pub struct R(crate::R<EVENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EVENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EVENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EVENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EVENR` writer"]
        pub struct W(crate::W<EVENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EVENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EVENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EVENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MR0` reader - Event Mask on line 0"]
        pub struct MR0_R(crate::FieldReader<bool>);
        impl MR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR0` writer - Event Mask on line 0"]
        pub struct MR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `MR1` reader - Event Mask on line 1"]
        pub struct MR1_R(crate::FieldReader<bool>);
        impl MR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR1` writer - Event Mask on line 1"]
        pub struct MR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `MR2` reader - Event Mask on line 2"]
        pub struct MR2_R(crate::FieldReader<bool>);
        impl MR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR2` writer - Event Mask on line 2"]
        pub struct MR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `MR3` reader - Event Mask on line 3"]
        pub struct MR3_R(crate::FieldReader<bool>);
        impl MR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR3` writer - Event Mask on line 3"]
        pub struct MR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `MR4` reader - Event Mask on line 4"]
        pub struct MR4_R(crate::FieldReader<bool>);
        impl MR4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR4` writer - Event Mask on line 4"]
        pub struct MR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `MR5` reader - Event Mask on line 5"]
        pub struct MR5_R(crate::FieldReader<bool>);
        impl MR5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR5` writer - Event Mask on line 5"]
        pub struct MR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `MR6` reader - Event Mask on line 6"]
        pub struct MR6_R(crate::FieldReader<bool>);
        impl MR6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR6` writer - Event Mask on line 6"]
        pub struct MR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MR7` reader - Event Mask on line 7"]
        pub struct MR7_R(crate::FieldReader<bool>);
        impl MR7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR7` writer - Event Mask on line 7"]
        pub struct MR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `MR8` reader - Event Mask on line 8"]
        pub struct MR8_R(crate::FieldReader<bool>);
        impl MR8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR8` writer - Event Mask on line 8"]
        pub struct MR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `MR9` reader - Event Mask on line 9"]
        pub struct MR9_R(crate::FieldReader<bool>);
        impl MR9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR9` writer - Event Mask on line 9"]
        pub struct MR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `MR10` reader - Event Mask on line 10"]
        pub struct MR10_R(crate::FieldReader<bool>);
        impl MR10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR10` writer - Event Mask on line 10"]
        pub struct MR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `MR11` reader - Event Mask on line 11"]
        pub struct MR11_R(crate::FieldReader<bool>);
        impl MR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR11` writer - Event Mask on line 11"]
        pub struct MR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `MR12` reader - Event Mask on line 12"]
        pub struct MR12_R(crate::FieldReader<bool>);
        impl MR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR12` writer - Event Mask on line 12"]
        pub struct MR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `MR13` reader - Event Mask on line 13"]
        pub struct MR13_R(crate::FieldReader<bool>);
        impl MR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR13` writer - Event Mask on line 13"]
        pub struct MR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `MR14` reader - Event Mask on line 14"]
        pub struct MR14_R(crate::FieldReader<bool>);
        impl MR14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR14` writer - Event Mask on line 14"]
        pub struct MR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `MR15` reader - Event Mask on line 15"]
        pub struct MR15_R(crate::FieldReader<bool>);
        impl MR15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR15` writer - Event Mask on line 15"]
        pub struct MR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `MR16` reader - Event Mask on line 16"]
        pub struct MR16_R(crate::FieldReader<bool>);
        impl MR16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR16_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR16` writer - Event Mask on line 16"]
        pub struct MR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `MR17` reader - Event Mask on line 17"]
        pub struct MR17_R(crate::FieldReader<bool>);
        impl MR17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR17_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR17` writer - Event Mask on line 17"]
        pub struct MR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `MR18` reader - Event Mask on line 18"]
        pub struct MR18_R(crate::FieldReader<bool>);
        impl MR18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MR18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MR18_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MR18` writer - Event Mask on line 18"]
        pub struct MR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Event Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&self) -> MR0_R {
                MR0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Event Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&self) -> MR1_R {
                MR1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Event Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&self) -> MR2_R {
                MR2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Event Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&self) -> MR3_R {
                MR3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Event Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&self) -> MR4_R {
                MR4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Event Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&self) -> MR5_R {
                MR5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Event Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&self) -> MR6_R {
                MR6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Event Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&self) -> MR7_R {
                MR7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Event Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&self) -> MR8_R {
                MR8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Event Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&self) -> MR9_R {
                MR9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Event Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&self) -> MR10_R {
                MR10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Event Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&self) -> MR11_R {
                MR11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Event Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&self) -> MR12_R {
                MR12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Event Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&self) -> MR13_R {
                MR13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Event Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&self) -> MR14_R {
                MR14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Event Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&self) -> MR15_R {
                MR15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Event Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&self) -> MR16_R {
                MR16_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Event Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&self) -> MR17_R {
                MR17_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Event Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&self) -> MR18_R {
                MR18_R::new(((self.bits >> 18) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Event Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&mut self) -> MR0_W {
                MR0_W { w: self }
            }
            #[doc = "Bit 1 - Event Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&mut self) -> MR1_W {
                MR1_W { w: self }
            }
            #[doc = "Bit 2 - Event Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&mut self) -> MR2_W {
                MR2_W { w: self }
            }
            #[doc = "Bit 3 - Event Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&mut self) -> MR3_W {
                MR3_W { w: self }
            }
            #[doc = "Bit 4 - Event Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&mut self) -> MR4_W {
                MR4_W { w: self }
            }
            #[doc = "Bit 5 - Event Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&mut self) -> MR5_W {
                MR5_W { w: self }
            }
            #[doc = "Bit 6 - Event Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&mut self) -> MR6_W {
                MR6_W { w: self }
            }
            #[doc = "Bit 7 - Event Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&mut self) -> MR7_W {
                MR7_W { w: self }
            }
            #[doc = "Bit 8 - Event Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&mut self) -> MR8_W {
                MR8_W { w: self }
            }
            #[doc = "Bit 9 - Event Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&mut self) -> MR9_W {
                MR9_W { w: self }
            }
            #[doc = "Bit 10 - Event Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&mut self) -> MR10_W {
                MR10_W { w: self }
            }
            #[doc = "Bit 11 - Event Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&mut self) -> MR11_W {
                MR11_W { w: self }
            }
            #[doc = "Bit 12 - Event Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&mut self) -> MR12_W {
                MR12_W { w: self }
            }
            #[doc = "Bit 13 - Event Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&mut self) -> MR13_W {
                MR13_W { w: self }
            }
            #[doc = "Bit 14 - Event Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&mut self) -> MR14_W {
                MR14_W { w: self }
            }
            #[doc = "Bit 15 - Event Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&mut self) -> MR15_W {
                MR15_W { w: self }
            }
            #[doc = "Bit 16 - Event Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&mut self) -> MR16_W {
                MR16_W { w: self }
            }
            #[doc = "Bit 17 - Event Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&mut self) -> MR17_W {
                MR17_W { w: self }
            }
            #[doc = "Bit 18 - Event Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&mut self) -> MR18_W {
                MR18_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Event mask register (EXTI_EVENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evenr](index.html) module"]
        pub struct EVENR_SPEC;
        impl crate::RegisterSpec for EVENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [evenr::R](R) reader structure"]
        impl crate::Readable for EVENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [evenr::W](W) writer structure"]
        impl crate::Writable for EVENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EVENR to value 0"]
        impl crate::Resettable for EVENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RTENR register accessor: an alias for `Reg<RTENR_SPEC>`"]
    pub type RTENR = crate::Reg<rtenr::RTENR_SPEC>;
    #[doc = "Rising Trigger selection register (EXTI_RTENR)"]
    pub mod rtenr {
        #[doc = "Register `RTENR` reader"]
        pub struct R(crate::R<RTENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RTENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RTENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RTENR` writer"]
        pub struct W(crate::W<RTENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RTENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RTENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TR0` reader - Rising trigger event configuration of line 0"]
        pub struct TR0_R(crate::FieldReader<bool>);
        impl TR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR0` writer - Rising trigger event configuration of line 0"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TR1` reader - Rising trigger event configuration of line 1"]
        pub struct TR1_R(crate::FieldReader<bool>);
        impl TR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR1` writer - Rising trigger event configuration of line 1"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `TR2` reader - Rising trigger event configuration of line 2"]
        pub struct TR2_R(crate::FieldReader<bool>);
        impl TR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR2` writer - Rising trigger event configuration of line 2"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TR3` reader - Rising trigger event configuration of line 3"]
        pub struct TR3_R(crate::FieldReader<bool>);
        impl TR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR3` writer - Rising trigger event configuration of line 3"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `TR4` reader - Rising trigger event configuration of line 4"]
        pub struct TR4_R(crate::FieldReader<bool>);
        impl TR4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR4` writer - Rising trigger event configuration of line 4"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `TR5` reader - Rising trigger event configuration of line 5"]
        pub struct TR5_R(crate::FieldReader<bool>);
        impl TR5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR5` writer - Rising trigger event configuration of line 5"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `TR6` reader - Rising trigger event configuration of line 6"]
        pub struct TR6_R(crate::FieldReader<bool>);
        impl TR6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR6` writer - Rising trigger event configuration of line 6"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `TR7` reader - Rising trigger event configuration of line 7"]
        pub struct TR7_R(crate::FieldReader<bool>);
        impl TR7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR7` writer - Rising trigger event configuration of line 7"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TR8` reader - Rising trigger event configuration of line 8"]
        pub struct TR8_R(crate::FieldReader<bool>);
        impl TR8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR8` writer - Rising trigger event configuration of line 8"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `TR9` reader - Rising trigger event configuration of line 9"]
        pub struct TR9_R(crate::FieldReader<bool>);
        impl TR9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR9` writer - Rising trigger event configuration of line 9"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `TR10` reader - Rising trigger event configuration of line 10"]
        pub struct TR10_R(crate::FieldReader<bool>);
        impl TR10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR10` writer - Rising trigger event configuration of line 10"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `TR11` reader - Rising trigger event configuration of line 11"]
        pub struct TR11_R(crate::FieldReader<bool>);
        impl TR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR11` writer - Rising trigger event configuration of line 11"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `TR12` reader - Rising trigger event configuration of line 12"]
        pub struct TR12_R(crate::FieldReader<bool>);
        impl TR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR12` writer - Rising trigger event configuration of line 12"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `TR13` reader - Rising trigger event configuration of line 13"]
        pub struct TR13_R(crate::FieldReader<bool>);
        impl TR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR13` writer - Rising trigger event configuration of line 13"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `TR14` reader - Rising trigger event configuration of line 14"]
        pub struct TR14_R(crate::FieldReader<bool>);
        impl TR14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR14` writer - Rising trigger event configuration of line 14"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `TR15` reader - Rising trigger event configuration of line 15"]
        pub struct TR15_R(crate::FieldReader<bool>);
        impl TR15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR15` writer - Rising trigger event configuration of line 15"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `TR16` reader - Rising trigger event configuration of line 16"]
        pub struct TR16_R(crate::FieldReader<bool>);
        impl TR16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR16_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR16` writer - Rising trigger event configuration of line 16"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `TR17` reader - Rising trigger event configuration of line 17"]
        pub struct TR17_R(crate::FieldReader<bool>);
        impl TR17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR17_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR17` writer - Rising trigger event configuration of line 17"]
        pub struct TR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `TR18` reader - Rising trigger event configuration of line 18"]
        pub struct TR18_R(crate::FieldReader<bool>);
        impl TR18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR18_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR18` writer - Rising trigger event configuration of line 18"]
        pub struct TR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Rising trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Rising trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Rising trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Rising trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Rising trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Rising trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Rising trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Rising trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Rising trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Rising trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Rising trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Rising trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Rising trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Rising trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Rising trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Rising trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Rising trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&self) -> TR17_R {
                TR17_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Rising trigger event configuration of line 18"]
            #[inline(always)]
            pub fn tr18(&self) -> TR18_R {
                TR18_R::new(((self.bits >> 18) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Rising trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Rising trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Rising trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Rising trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Rising trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Rising trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Rising trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Rising trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Rising trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Rising trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Rising trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Rising trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Rising trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Rising trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Rising trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Rising trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
            #[doc = "Bit 17 - Rising trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&mut self) -> TR17_W {
                TR17_W { w: self }
            }
            #[doc = "Bit 18 - Rising trigger event configuration of line 18"]
            #[inline(always)]
            pub fn tr18(&mut self) -> TR18_W {
                TR18_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Rising Trigger selection register (EXTI_RTENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtenr](index.html) module"]
        pub struct RTENR_SPEC;
        impl crate::RegisterSpec for RTENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rtenr::R](R) reader structure"]
        impl crate::Readable for RTENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rtenr::W](W) writer structure"]
        impl crate::Writable for RTENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RTENR to value 0"]
        impl crate::Resettable for RTENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FTENR register accessor: an alias for `Reg<FTENR_SPEC>`"]
    pub type FTENR = crate::Reg<ftenr::FTENR_SPEC>;
    #[doc = "Falling Trigger selection register (EXTI_FTENR)"]
    pub mod ftenr {
        #[doc = "Register `FTENR` reader"]
        pub struct R(crate::R<FTENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FTENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FTENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FTENR` writer"]
        pub struct W(crate::W<FTENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FTENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FTENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TR0` reader - Falling trigger event configuration of line 0"]
        pub struct TR0_R(crate::FieldReader<bool>);
        impl TR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR0` writer - Falling trigger event configuration of line 0"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TR1` reader - Falling trigger event configuration of line 1"]
        pub struct TR1_R(crate::FieldReader<bool>);
        impl TR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR1` writer - Falling trigger event configuration of line 1"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `TR2` reader - Falling trigger event configuration of line 2"]
        pub struct TR2_R(crate::FieldReader<bool>);
        impl TR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR2` writer - Falling trigger event configuration of line 2"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TR3` reader - Falling trigger event configuration of line 3"]
        pub struct TR3_R(crate::FieldReader<bool>);
        impl TR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR3` writer - Falling trigger event configuration of line 3"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `TR4` reader - Falling trigger event configuration of line 4"]
        pub struct TR4_R(crate::FieldReader<bool>);
        impl TR4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR4` writer - Falling trigger event configuration of line 4"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `TR5` reader - Falling trigger event configuration of line 5"]
        pub struct TR5_R(crate::FieldReader<bool>);
        impl TR5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR5` writer - Falling trigger event configuration of line 5"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `TR6` reader - Falling trigger event configuration of line 6"]
        pub struct TR6_R(crate::FieldReader<bool>);
        impl TR6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR6` writer - Falling trigger event configuration of line 6"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `TR7` reader - Falling trigger event configuration of line 7"]
        pub struct TR7_R(crate::FieldReader<bool>);
        impl TR7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR7` writer - Falling trigger event configuration of line 7"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TR8` reader - Falling trigger event configuration of line 8"]
        pub struct TR8_R(crate::FieldReader<bool>);
        impl TR8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR8` writer - Falling trigger event configuration of line 8"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `TR9` reader - Falling trigger event configuration of line 9"]
        pub struct TR9_R(crate::FieldReader<bool>);
        impl TR9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR9` writer - Falling trigger event configuration of line 9"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `TR10` reader - Falling trigger event configuration of line 10"]
        pub struct TR10_R(crate::FieldReader<bool>);
        impl TR10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR10` writer - Falling trigger event configuration of line 10"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `TR11` reader - Falling trigger event configuration of line 11"]
        pub struct TR11_R(crate::FieldReader<bool>);
        impl TR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR11` writer - Falling trigger event configuration of line 11"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `TR12` reader - Falling trigger event configuration of line 12"]
        pub struct TR12_R(crate::FieldReader<bool>);
        impl TR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR12` writer - Falling trigger event configuration of line 12"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `TR13` reader - Falling trigger event configuration of line 13"]
        pub struct TR13_R(crate::FieldReader<bool>);
        impl TR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR13` writer - Falling trigger event configuration of line 13"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `TR14` reader - Falling trigger event configuration of line 14"]
        pub struct TR14_R(crate::FieldReader<bool>);
        impl TR14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR14` writer - Falling trigger event configuration of line 14"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `TR15` reader - Falling trigger event configuration of line 15"]
        pub struct TR15_R(crate::FieldReader<bool>);
        impl TR15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR15` writer - Falling trigger event configuration of line 15"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `TR16` reader - Falling trigger event configuration of line 16"]
        pub struct TR16_R(crate::FieldReader<bool>);
        impl TR16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR16_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR16` writer - Falling trigger event configuration of line 16"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `TR17` reader - Falling trigger event configuration of line 17"]
        pub struct TR17_R(crate::FieldReader<bool>);
        impl TR17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR17_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR17` writer - Falling trigger event configuration of line 17"]
        pub struct TR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `TR18` reader - Falling trigger event configuration of line 18"]
        pub struct TR18_R(crate::FieldReader<bool>);
        impl TR18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TR18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TR18_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TR18` writer - Falling trigger event configuration of line 18"]
        pub struct TR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Falling trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Falling trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Falling trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Falling trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Falling trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Falling trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Falling trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Falling trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Falling trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Falling trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Falling trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Falling trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Falling trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Falling trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Falling trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Falling trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Falling trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Falling trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&self) -> TR17_R {
                TR17_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Falling trigger event configuration of line 18"]
            #[inline(always)]
            pub fn tr18(&self) -> TR18_R {
                TR18_R::new(((self.bits >> 18) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Falling trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Falling trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Falling trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Falling trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Falling trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Falling trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Falling trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Falling trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Falling trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Falling trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Falling trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Falling trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Falling trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Falling trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Falling trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Falling trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Falling trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
            #[doc = "Bit 17 - Falling trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&mut self) -> TR17_W {
                TR17_W { w: self }
            }
            #[doc = "Bit 18 - Falling trigger event configuration of line 18"]
            #[inline(always)]
            pub fn tr18(&mut self) -> TR18_W {
                TR18_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Falling Trigger selection register (EXTI_FTENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ftenr](index.html) module"]
        pub struct FTENR_SPEC;
        impl crate::RegisterSpec for FTENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ftenr::R](R) reader structure"]
        impl crate::Readable for FTENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ftenr::W](W) writer structure"]
        impl crate::Writable for FTENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FTENR to value 0"]
        impl crate::Resettable for FTENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SWIEVR register accessor: an alias for `Reg<SWIEVR_SPEC>`"]
    pub type SWIEVR = crate::Reg<swievr::SWIEVR_SPEC>;
    #[doc = "Software interrupt event register (EXTI_SWIEVR)"]
    pub mod swievr {
        #[doc = "Register `SWIEVR` reader"]
        pub struct R(crate::R<SWIEVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SWIEVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SWIEVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SWIEVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SWIEVR` writer"]
        pub struct W(crate::W<SWIEVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SWIEVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SWIEVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SWIEVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SWIER0` reader - Software Interrupt on line 0"]
        pub struct SWIER0_R(crate::FieldReader<bool>);
        impl SWIER0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER0` writer - Software Interrupt on line 0"]
        pub struct SWIER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `SWIER1` reader - Software Interrupt on line 1"]
        pub struct SWIER1_R(crate::FieldReader<bool>);
        impl SWIER1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER1` writer - Software Interrupt on line 1"]
        pub struct SWIER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `SWIER2` reader - Software Interrupt on line 2"]
        pub struct SWIER2_R(crate::FieldReader<bool>);
        impl SWIER2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER2` writer - Software Interrupt on line 2"]
        pub struct SWIER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `SWIER3` reader - Software Interrupt on line 3"]
        pub struct SWIER3_R(crate::FieldReader<bool>);
        impl SWIER3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER3` writer - Software Interrupt on line 3"]
        pub struct SWIER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `SWIER4` reader - Software Interrupt on line 4"]
        pub struct SWIER4_R(crate::FieldReader<bool>);
        impl SWIER4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER4` writer - Software Interrupt on line 4"]
        pub struct SWIER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `SWIER5` reader - Software Interrupt on line 5"]
        pub struct SWIER5_R(crate::FieldReader<bool>);
        impl SWIER5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER5` writer - Software Interrupt on line 5"]
        pub struct SWIER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `SWIER6` reader - Software Interrupt on line 6"]
        pub struct SWIER6_R(crate::FieldReader<bool>);
        impl SWIER6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER6` writer - Software Interrupt on line 6"]
        pub struct SWIER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `SWIER7` reader - Software Interrupt on line 7"]
        pub struct SWIER7_R(crate::FieldReader<bool>);
        impl SWIER7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER7` writer - Software Interrupt on line 7"]
        pub struct SWIER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `SWIER8` reader - Software Interrupt on line 8"]
        pub struct SWIER8_R(crate::FieldReader<bool>);
        impl SWIER8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER8` writer - Software Interrupt on line 8"]
        pub struct SWIER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `SWIER9` reader - Software Interrupt on line 9"]
        pub struct SWIER9_R(crate::FieldReader<bool>);
        impl SWIER9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER9` writer - Software Interrupt on line 9"]
        pub struct SWIER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `SWIER10` reader - Software Interrupt on line 10"]
        pub struct SWIER10_R(crate::FieldReader<bool>);
        impl SWIER10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER10` writer - Software Interrupt on line 10"]
        pub struct SWIER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `SWIER11` reader - Software Interrupt on line 11"]
        pub struct SWIER11_R(crate::FieldReader<bool>);
        impl SWIER11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER11` writer - Software Interrupt on line 11"]
        pub struct SWIER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `SWIER12` reader - Software Interrupt on line 12"]
        pub struct SWIER12_R(crate::FieldReader<bool>);
        impl SWIER12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER12` writer - Software Interrupt on line 12"]
        pub struct SWIER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `SWIER13` reader - Software Interrupt on line 13"]
        pub struct SWIER13_R(crate::FieldReader<bool>);
        impl SWIER13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER13` writer - Software Interrupt on line 13"]
        pub struct SWIER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `SWIER14` reader - Software Interrupt on line 14"]
        pub struct SWIER14_R(crate::FieldReader<bool>);
        impl SWIER14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER14` writer - Software Interrupt on line 14"]
        pub struct SWIER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `SWIER15` reader - Software Interrupt on line 15"]
        pub struct SWIER15_R(crate::FieldReader<bool>);
        impl SWIER15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER15` writer - Software Interrupt on line 15"]
        pub struct SWIER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `SWIER16` reader - Software Interrupt on line 16"]
        pub struct SWIER16_R(crate::FieldReader<bool>);
        impl SWIER16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER16_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER16` writer - Software Interrupt on line 16"]
        pub struct SWIER16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `SWIER17` reader - Software Interrupt on line 17"]
        pub struct SWIER17_R(crate::FieldReader<bool>);
        impl SWIER17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER17_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER17` writer - Software Interrupt on line 17"]
        pub struct SWIER17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `SWIER18` reader - Software Interrupt on line 18"]
        pub struct SWIER18_R(crate::FieldReader<bool>);
        impl SWIER18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWIER18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWIER18_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWIER18` writer - Software Interrupt on line 18"]
        pub struct SWIER18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Software Interrupt on line 0"]
            #[inline(always)]
            pub fn swier0(&self) -> SWIER0_R {
                SWIER0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Software Interrupt on line 1"]
            #[inline(always)]
            pub fn swier1(&self) -> SWIER1_R {
                SWIER1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Software Interrupt on line 2"]
            #[inline(always)]
            pub fn swier2(&self) -> SWIER2_R {
                SWIER2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Software Interrupt on line 3"]
            #[inline(always)]
            pub fn swier3(&self) -> SWIER3_R {
                SWIER3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Software Interrupt on line 4"]
            #[inline(always)]
            pub fn swier4(&self) -> SWIER4_R {
                SWIER4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Software Interrupt on line 5"]
            #[inline(always)]
            pub fn swier5(&self) -> SWIER5_R {
                SWIER5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Software Interrupt on line 6"]
            #[inline(always)]
            pub fn swier6(&self) -> SWIER6_R {
                SWIER6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Software Interrupt on line 7"]
            #[inline(always)]
            pub fn swier7(&self) -> SWIER7_R {
                SWIER7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Software Interrupt on line 8"]
            #[inline(always)]
            pub fn swier8(&self) -> SWIER8_R {
                SWIER8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Software Interrupt on line 9"]
            #[inline(always)]
            pub fn swier9(&self) -> SWIER9_R {
                SWIER9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Software Interrupt on line 10"]
            #[inline(always)]
            pub fn swier10(&self) -> SWIER10_R {
                SWIER10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Software Interrupt on line 11"]
            #[inline(always)]
            pub fn swier11(&self) -> SWIER11_R {
                SWIER11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Software Interrupt on line 12"]
            #[inline(always)]
            pub fn swier12(&self) -> SWIER12_R {
                SWIER12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Software Interrupt on line 13"]
            #[inline(always)]
            pub fn swier13(&self) -> SWIER13_R {
                SWIER13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Software Interrupt on line 14"]
            #[inline(always)]
            pub fn swier14(&self) -> SWIER14_R {
                SWIER14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Software Interrupt on line 15"]
            #[inline(always)]
            pub fn swier15(&self) -> SWIER15_R {
                SWIER15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Software Interrupt on line 16"]
            #[inline(always)]
            pub fn swier16(&self) -> SWIER16_R {
                SWIER16_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Software Interrupt on line 17"]
            #[inline(always)]
            pub fn swier17(&self) -> SWIER17_R {
                SWIER17_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Software Interrupt on line 18"]
            #[inline(always)]
            pub fn swier18(&self) -> SWIER18_R {
                SWIER18_R::new(((self.bits >> 18) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Software Interrupt on line 0"]
            #[inline(always)]
            pub fn swier0(&mut self) -> SWIER0_W {
                SWIER0_W { w: self }
            }
            #[doc = "Bit 1 - Software Interrupt on line 1"]
            #[inline(always)]
            pub fn swier1(&mut self) -> SWIER1_W {
                SWIER1_W { w: self }
            }
            #[doc = "Bit 2 - Software Interrupt on line 2"]
            #[inline(always)]
            pub fn swier2(&mut self) -> SWIER2_W {
                SWIER2_W { w: self }
            }
            #[doc = "Bit 3 - Software Interrupt on line 3"]
            #[inline(always)]
            pub fn swier3(&mut self) -> SWIER3_W {
                SWIER3_W { w: self }
            }
            #[doc = "Bit 4 - Software Interrupt on line 4"]
            #[inline(always)]
            pub fn swier4(&mut self) -> SWIER4_W {
                SWIER4_W { w: self }
            }
            #[doc = "Bit 5 - Software Interrupt on line 5"]
            #[inline(always)]
            pub fn swier5(&mut self) -> SWIER5_W {
                SWIER5_W { w: self }
            }
            #[doc = "Bit 6 - Software Interrupt on line 6"]
            #[inline(always)]
            pub fn swier6(&mut self) -> SWIER6_W {
                SWIER6_W { w: self }
            }
            #[doc = "Bit 7 - Software Interrupt on line 7"]
            #[inline(always)]
            pub fn swier7(&mut self) -> SWIER7_W {
                SWIER7_W { w: self }
            }
            #[doc = "Bit 8 - Software Interrupt on line 8"]
            #[inline(always)]
            pub fn swier8(&mut self) -> SWIER8_W {
                SWIER8_W { w: self }
            }
            #[doc = "Bit 9 - Software Interrupt on line 9"]
            #[inline(always)]
            pub fn swier9(&mut self) -> SWIER9_W {
                SWIER9_W { w: self }
            }
            #[doc = "Bit 10 - Software Interrupt on line 10"]
            #[inline(always)]
            pub fn swier10(&mut self) -> SWIER10_W {
                SWIER10_W { w: self }
            }
            #[doc = "Bit 11 - Software Interrupt on line 11"]
            #[inline(always)]
            pub fn swier11(&mut self) -> SWIER11_W {
                SWIER11_W { w: self }
            }
            #[doc = "Bit 12 - Software Interrupt on line 12"]
            #[inline(always)]
            pub fn swier12(&mut self) -> SWIER12_W {
                SWIER12_W { w: self }
            }
            #[doc = "Bit 13 - Software Interrupt on line 13"]
            #[inline(always)]
            pub fn swier13(&mut self) -> SWIER13_W {
                SWIER13_W { w: self }
            }
            #[doc = "Bit 14 - Software Interrupt on line 14"]
            #[inline(always)]
            pub fn swier14(&mut self) -> SWIER14_W {
                SWIER14_W { w: self }
            }
            #[doc = "Bit 15 - Software Interrupt on line 15"]
            #[inline(always)]
            pub fn swier15(&mut self) -> SWIER15_W {
                SWIER15_W { w: self }
            }
            #[doc = "Bit 16 - Software Interrupt on line 16"]
            #[inline(always)]
            pub fn swier16(&mut self) -> SWIER16_W {
                SWIER16_W { w: self }
            }
            #[doc = "Bit 17 - Software Interrupt on line 17"]
            #[inline(always)]
            pub fn swier17(&mut self) -> SWIER17_W {
                SWIER17_W { w: self }
            }
            #[doc = "Bit 18 - Software Interrupt on line 18"]
            #[inline(always)]
            pub fn swier18(&mut self) -> SWIER18_W {
                SWIER18_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Software interrupt event register (EXTI_SWIEVR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swievr](index.html) module"]
        pub struct SWIEVR_SPEC;
        impl crate::RegisterSpec for SWIEVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [swievr::R](R) reader structure"]
        impl crate::Readable for SWIEVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [swievr::W](W) writer structure"]
        impl crate::Writable for SWIEVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SWIEVR to value 0"]
        impl crate::Resettable for SWIEVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "INTFR register accessor: an alias for `Reg<INTFR_SPEC>`"]
    pub type INTFR = crate::Reg<intfr::INTFR_SPEC>;
    #[doc = "Pending register (EXTI_INTFR)"]
    pub mod intfr {
        #[doc = "Register `INTFR` reader"]
        pub struct R(crate::R<INTFR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INTFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INTFR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INTFR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `INTFR` writer"]
        pub struct W(crate::W<INTFR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<INTFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<INTFR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<INTFR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PR0` reader - Pending bit 0"]
        pub struct PR0_R(crate::FieldReader<bool>);
        impl PR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR0` writer - Pending bit 0"]
        pub struct PR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `PR1` reader - Pending bit 1"]
        pub struct PR1_R(crate::FieldReader<bool>);
        impl PR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR1` writer - Pending bit 1"]
        pub struct PR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `PR2` reader - Pending bit 2"]
        pub struct PR2_R(crate::FieldReader<bool>);
        impl PR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR2` writer - Pending bit 2"]
        pub struct PR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `PR3` reader - Pending bit 3"]
        pub struct PR3_R(crate::FieldReader<bool>);
        impl PR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR3` writer - Pending bit 3"]
        pub struct PR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `PR4` reader - Pending bit 4"]
        pub struct PR4_R(crate::FieldReader<bool>);
        impl PR4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR4` writer - Pending bit 4"]
        pub struct PR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `PR5` reader - Pending bit 5"]
        pub struct PR5_R(crate::FieldReader<bool>);
        impl PR5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR5` writer - Pending bit 5"]
        pub struct PR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PR6` reader - Pending bit 6"]
        pub struct PR6_R(crate::FieldReader<bool>);
        impl PR6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR6` writer - Pending bit 6"]
        pub struct PR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `PR7` reader - Pending bit 7"]
        pub struct PR7_R(crate::FieldReader<bool>);
        impl PR7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR7` writer - Pending bit 7"]
        pub struct PR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PR8` reader - Pending bit 8"]
        pub struct PR8_R(crate::FieldReader<bool>);
        impl PR8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR8_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR8` writer - Pending bit 8"]
        pub struct PR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `PR9` reader - Pending bit 9"]
        pub struct PR9_R(crate::FieldReader<bool>);
        impl PR9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR9_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR9` writer - Pending bit 9"]
        pub struct PR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `PR10` reader - Pending bit 10"]
        pub struct PR10_R(crate::FieldReader<bool>);
        impl PR10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR10` writer - Pending bit 10"]
        pub struct PR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `PR11` reader - Pending bit 11"]
        pub struct PR11_R(crate::FieldReader<bool>);
        impl PR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR11_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR11` writer - Pending bit 11"]
        pub struct PR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `PR12` reader - Pending bit 12"]
        pub struct PR12_R(crate::FieldReader<bool>);
        impl PR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR12_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR12` writer - Pending bit 12"]
        pub struct PR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `PR13` reader - Pending bit 13"]
        pub struct PR13_R(crate::FieldReader<bool>);
        impl PR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR13_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR13` writer - Pending bit 13"]
        pub struct PR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `PR14` reader - Pending bit 14"]
        pub struct PR14_R(crate::FieldReader<bool>);
        impl PR14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR14_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR14` writer - Pending bit 14"]
        pub struct PR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `PR15` reader - Pending bit 15"]
        pub struct PR15_R(crate::FieldReader<bool>);
        impl PR15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR15_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR15` writer - Pending bit 15"]
        pub struct PR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `PR16` reader - Pending bit 16"]
        pub struct PR16_R(crate::FieldReader<bool>);
        impl PR16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR16_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR16` writer - Pending bit 16"]
        pub struct PR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `PR17` reader - Pending bit 17"]
        pub struct PR17_R(crate::FieldReader<bool>);
        impl PR17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR17_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR17` writer - Pending bit 17"]
        pub struct PR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `PR18` reader - Pending bit 18"]
        pub struct PR18_R(crate::FieldReader<bool>);
        impl PR18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PR18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR18_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR18` writer - Pending bit 18"]
        pub struct PR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Pending bit 0"]
            #[inline(always)]
            pub fn pr0(&self) -> PR0_R {
                PR0_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Pending bit 1"]
            #[inline(always)]
            pub fn pr1(&self) -> PR1_R {
                PR1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Pending bit 2"]
            #[inline(always)]
            pub fn pr2(&self) -> PR2_R {
                PR2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Pending bit 3"]
            #[inline(always)]
            pub fn pr3(&self) -> PR3_R {
                PR3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Pending bit 4"]
            #[inline(always)]
            pub fn pr4(&self) -> PR4_R {
                PR4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Pending bit 5"]
            #[inline(always)]
            pub fn pr5(&self) -> PR5_R {
                PR5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Pending bit 6"]
            #[inline(always)]
            pub fn pr6(&self) -> PR6_R {
                PR6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Pending bit 7"]
            #[inline(always)]
            pub fn pr7(&self) -> PR7_R {
                PR7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Pending bit 8"]
            #[inline(always)]
            pub fn pr8(&self) -> PR8_R {
                PR8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Pending bit 9"]
            #[inline(always)]
            pub fn pr9(&self) -> PR9_R {
                PR9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Pending bit 10"]
            #[inline(always)]
            pub fn pr10(&self) -> PR10_R {
                PR10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Pending bit 11"]
            #[inline(always)]
            pub fn pr11(&self) -> PR11_R {
                PR11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Pending bit 12"]
            #[inline(always)]
            pub fn pr12(&self) -> PR12_R {
                PR12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Pending bit 13"]
            #[inline(always)]
            pub fn pr13(&self) -> PR13_R {
                PR13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Pending bit 14"]
            #[inline(always)]
            pub fn pr14(&self) -> PR14_R {
                PR14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Pending bit 15"]
            #[inline(always)]
            pub fn pr15(&self) -> PR15_R {
                PR15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Pending bit 16"]
            #[inline(always)]
            pub fn pr16(&self) -> PR16_R {
                PR16_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Pending bit 17"]
            #[inline(always)]
            pub fn pr17(&self) -> PR17_R {
                PR17_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Pending bit 18"]
            #[inline(always)]
            pub fn pr18(&self) -> PR18_R {
                PR18_R::new(((self.bits >> 18) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Pending bit 0"]
            #[inline(always)]
            pub fn pr0(&mut self) -> PR0_W {
                PR0_W { w: self }
            }
            #[doc = "Bit 1 - Pending bit 1"]
            #[inline(always)]
            pub fn pr1(&mut self) -> PR1_W {
                PR1_W { w: self }
            }
            #[doc = "Bit 2 - Pending bit 2"]
            #[inline(always)]
            pub fn pr2(&mut self) -> PR2_W {
                PR2_W { w: self }
            }
            #[doc = "Bit 3 - Pending bit 3"]
            #[inline(always)]
            pub fn pr3(&mut self) -> PR3_W {
                PR3_W { w: self }
            }
            #[doc = "Bit 4 - Pending bit 4"]
            #[inline(always)]
            pub fn pr4(&mut self) -> PR4_W {
                PR4_W { w: self }
            }
            #[doc = "Bit 5 - Pending bit 5"]
            #[inline(always)]
            pub fn pr5(&mut self) -> PR5_W {
                PR5_W { w: self }
            }
            #[doc = "Bit 6 - Pending bit 6"]
            #[inline(always)]
            pub fn pr6(&mut self) -> PR6_W {
                PR6_W { w: self }
            }
            #[doc = "Bit 7 - Pending bit 7"]
            #[inline(always)]
            pub fn pr7(&mut self) -> PR7_W {
                PR7_W { w: self }
            }
            #[doc = "Bit 8 - Pending bit 8"]
            #[inline(always)]
            pub fn pr8(&mut self) -> PR8_W {
                PR8_W { w: self }
            }
            #[doc = "Bit 9 - Pending bit 9"]
            #[inline(always)]
            pub fn pr9(&mut self) -> PR9_W {
                PR9_W { w: self }
            }
            #[doc = "Bit 10 - Pending bit 10"]
            #[inline(always)]
            pub fn pr10(&mut self) -> PR10_W {
                PR10_W { w: self }
            }
            #[doc = "Bit 11 - Pending bit 11"]
            #[inline(always)]
            pub fn pr11(&mut self) -> PR11_W {
                PR11_W { w: self }
            }
            #[doc = "Bit 12 - Pending bit 12"]
            #[inline(always)]
            pub fn pr12(&mut self) -> PR12_W {
                PR12_W { w: self }
            }
            #[doc = "Bit 13 - Pending bit 13"]
            #[inline(always)]
            pub fn pr13(&mut self) -> PR13_W {
                PR13_W { w: self }
            }
            #[doc = "Bit 14 - Pending bit 14"]
            #[inline(always)]
            pub fn pr14(&mut self) -> PR14_W {
                PR14_W { w: self }
            }
            #[doc = "Bit 15 - Pending bit 15"]
            #[inline(always)]
            pub fn pr15(&mut self) -> PR15_W {
                PR15_W { w: self }
            }
            #[doc = "Bit 16 - Pending bit 16"]
            #[inline(always)]
            pub fn pr16(&mut self) -> PR16_W {
                PR16_W { w: self }
            }
            #[doc = "Bit 17 - Pending bit 17"]
            #[inline(always)]
            pub fn pr17(&mut self) -> PR17_W {
                PR17_W { w: self }
            }
            #[doc = "Bit 18 - Pending bit 18"]
            #[inline(always)]
            pub fn pr18(&mut self) -> PR18_W {
                PR18_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Pending register (EXTI_INTFR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intfr](index.html) module"]
        pub struct INTFR_SPEC;
        impl crate::RegisterSpec for INTFR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [intfr::R](R) reader structure"]
        impl crate::Readable for INTFR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [intfr::W](W) writer structure"]
        impl crate::Writable for INTFR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets INTFR to value 0"]
        impl crate::Resettable for INTFR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "DMA controller"]
pub struct DMA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA {}
impl DMA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dma::RegisterBlock = 0x4002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMA {
    type Target = dma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA").finish()
    }
}
#[doc = "DMA controller"]
pub mod dma {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DMA interrupt status register (DMA_INTFR)"]
        pub intfr: crate::Reg<intfr::INTFR_SPEC>,
        #[doc = "0x04 - DMA interrupt flag clear register (DMA_INTFCR)"]
        pub intfcr: crate::Reg<intfcr::INTFCR_SPEC>,
        #[doc = "0x08 - DMA channel configuration register (DMA_CFGR)"]
        pub cfgr: crate::Reg<cfgr::CFGR_SPEC>,
        #[doc = "0x0c - DMA channel 1 number of data register"]
        pub cntr: crate::Reg<cntr::CNTR_SPEC>,
        #[doc = "0x10 - DMA channel 1 peripheral address register"]
        pub paddr: crate::Reg<paddr::PADDR_SPEC>,
        #[doc = "0x14 - DMA channel 1 memory address register"]
        pub maddr: crate::Reg<maddr::MADDR_SPEC>,
        _reserved6: [u8; 0x04],
        #[doc = "0x1c - DMA channel configuration register (DMA_CFGR)"]
        pub cfgr2: crate::Reg<cfgr2::CFGR2_SPEC>,
        #[doc = "0x20 - DMA channel 2 number of data register"]
        pub cntr2: crate::Reg<cntr2::CNTR2_SPEC>,
        #[doc = "0x24 - DMA channel 2 peripheral address register"]
        pub paddr2: crate::Reg<paddr2::PADDR2_SPEC>,
        #[doc = "0x28 - DMA channel 2 memory address register"]
        pub maddr2: crate::Reg<maddr2::MADDR2_SPEC>,
        _reserved10: [u8; 0x04],
        #[doc = "0x30 - DMA channel configuration register (DMA_CFGR)"]
        pub cfgr3: crate::Reg<cfgr3::CFGR3_SPEC>,
        #[doc = "0x34 - DMA channel 3 number of data register"]
        pub cntr3: crate::Reg<cntr3::CNTR3_SPEC>,
        #[doc = "0x38 - DMA channel 3 peripheral address register"]
        pub paddr3: crate::Reg<paddr3::PADDR3_SPEC>,
        #[doc = "0x3c - DMA channel 3 memory address register"]
        pub maddr3: crate::Reg<maddr3::MADDR3_SPEC>,
        _reserved14: [u8; 0x04],
        #[doc = "0x44 - DMA channel configuration register (DMA_CFGR)"]
        pub cfgr4: crate::Reg<cfgr4::CFGR4_SPEC>,
        #[doc = "0x48 - DMA channel 4 number of data register"]
        pub cntr4: crate::Reg<cntr4::CNTR4_SPEC>,
        #[doc = "0x4c - DMA channel 4 peripheral address register"]
        pub paddr4: crate::Reg<paddr4::PADDR4_SPEC>,
        #[doc = "0x50 - DMA channel 4 memory address register"]
        pub maddr4: crate::Reg<maddr4::MADDR4_SPEC>,
        _reserved18: [u8; 0x04],
        #[doc = "0x58 - DMA channel configuration register (DMA_CFGR)"]
        pub cfgr5: crate::Reg<cfgr5::CFGR5_SPEC>,
        #[doc = "0x5c - DMA channel 5 number of data register"]
        pub cntr5: crate::Reg<cntr5::CNTR5_SPEC>,
        #[doc = "0x60 - DMA channel 5 peripheral address register"]
        pub paddr5: crate::Reg<paddr5::PADDR5_SPEC>,
        #[doc = "0x64 - DMA channel 5 memory address register"]
        pub maddr5: crate::Reg<maddr5::MADDR5_SPEC>,
        _reserved22: [u8; 0x04],
        #[doc = "0x6c - DMA channel configuration register (DMA_CFGR)"]
        pub cfgr6: crate::Reg<cfgr6::CFGR6_SPEC>,
        #[doc = "0x70 - DMA channel 6 number of data register"]
        pub cntr6: crate::Reg<cntr6::CNTR6_SPEC>,
        #[doc = "0x74 - DMA channel 6 peripheral address register"]
        pub paddr6: crate::Reg<paddr6::PADDR6_SPEC>,
        #[doc = "0x78 - DMA channel 6 memory address register"]
        pub maddr6: crate::Reg<maddr6::MADDR6_SPEC>,
        _reserved26: [u8; 0x04],
        #[doc = "0x80 - DMA channel configuration register (DMA_CFGR)"]
        pub cfgr7: crate::Reg<cfgr7::CFGR7_SPEC>,
        #[doc = "0x84 - DMA channel 7 number of data register"]
        pub cntr7: crate::Reg<cntr7::CNTR7_SPEC>,
        #[doc = "0x88 - DMA channel 7 peripheral address register"]
        pub paddr7: crate::Reg<paddr7::PADDR7_SPEC>,
        #[doc = "0x8c - DMA channel 7 memory address register"]
        pub maddr7: crate::Reg<maddr7::MADDR7_SPEC>,
    }
    #[doc = "INTFR register accessor: an alias for `Reg<INTFR_SPEC>`"]
    pub type INTFR = crate::Reg<intfr::INTFR_SPEC>;
    #[doc = "DMA interrupt status register (DMA_INTFR)"]
    pub mod intfr {
        #[doc = "Register `INTFR` reader"]
        pub struct R(crate::R<INTFR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INTFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INTFR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INTFR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `GIF1` reader - Channel 1 Global interrupt flag"]
        pub struct GIF1_R(crate::FieldReader<bool>);
        impl GIF1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GIF1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GIF1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIF1` reader - Channel 1 Transfer Complete flag"]
        pub struct TCIF1_R(crate::FieldReader<bool>);
        impl TCIF1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIF1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIF1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIF1` reader - Channel 1 Half Transfer Complete flag"]
        pub struct HTIF1_R(crate::FieldReader<bool>);
        impl HTIF1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIF1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIF1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIF1` reader - Channel 1 Transfer Error flag"]
        pub struct TEIF1_R(crate::FieldReader<bool>);
        impl TEIF1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIF1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIF1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GIF2` reader - Channel 2 Global interrupt flag"]
        pub struct GIF2_R(crate::FieldReader<bool>);
        impl GIF2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GIF2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GIF2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIF2` reader - Channel 2 Transfer Complete flag"]
        pub struct TCIF2_R(crate::FieldReader<bool>);
        impl TCIF2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIF2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIF2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIF2` reader - Channel 2 Half Transfer Complete flag"]
        pub struct HTIF2_R(crate::FieldReader<bool>);
        impl HTIF2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIF2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIF2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIF2` reader - Channel 2 Transfer Error flag"]
        pub struct TEIF2_R(crate::FieldReader<bool>);
        impl TEIF2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIF2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIF2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GIF3` reader - Channel 3 Global interrupt flag"]
        pub struct GIF3_R(crate::FieldReader<bool>);
        impl GIF3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GIF3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GIF3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIF3` reader - Channel 3 Transfer Complete flag"]
        pub struct TCIF3_R(crate::FieldReader<bool>);
        impl TCIF3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIF3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIF3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIF3` reader - Channel 3 Half Transfer Complete flag"]
        pub struct HTIF3_R(crate::FieldReader<bool>);
        impl HTIF3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIF3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIF3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIF3` reader - Channel 3 Transfer Error flag"]
        pub struct TEIF3_R(crate::FieldReader<bool>);
        impl TEIF3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIF3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIF3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GIF4` reader - Channel 4 Global interrupt flag"]
        pub struct GIF4_R(crate::FieldReader<bool>);
        impl GIF4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GIF4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GIF4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIF4` reader - Channel 4 Transfer Complete flag"]
        pub struct TCIF4_R(crate::FieldReader<bool>);
        impl TCIF4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIF4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIF4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIF4` reader - Channel 4 Half Transfer Complete flag"]
        pub struct HTIF4_R(crate::FieldReader<bool>);
        impl HTIF4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIF4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIF4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIF4` reader - Channel 4 Transfer Error flag"]
        pub struct TEIF4_R(crate::FieldReader<bool>);
        impl TEIF4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIF4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIF4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GIF5` reader - Channel 5 Global interrupt flag"]
        pub struct GIF5_R(crate::FieldReader<bool>);
        impl GIF5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GIF5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GIF5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIF5` reader - Channel 5 Transfer Complete flag"]
        pub struct TCIF5_R(crate::FieldReader<bool>);
        impl TCIF5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIF5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIF5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIF5` reader - Channel 5 Half Transfer Complete flag"]
        pub struct HTIF5_R(crate::FieldReader<bool>);
        impl HTIF5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIF5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIF5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIF5` reader - Channel 5 Transfer Error flag"]
        pub struct TEIF5_R(crate::FieldReader<bool>);
        impl TEIF5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIF5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIF5_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GIF6` reader - Channel 6 Global interrupt flag"]
        pub struct GIF6_R(crate::FieldReader<bool>);
        impl GIF6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GIF6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GIF6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIF6` reader - Channel 6 Transfer Complete flag"]
        pub struct TCIF6_R(crate::FieldReader<bool>);
        impl TCIF6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIF6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIF6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIF6` reader - Channel 6 Half Transfer Complete flag"]
        pub struct HTIF6_R(crate::FieldReader<bool>);
        impl HTIF6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIF6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIF6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIF6` reader - Channel 6 Transfer Error flag"]
        pub struct TEIF6_R(crate::FieldReader<bool>);
        impl TEIF6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIF6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIF6_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GIF7` reader - Channel 7 Global interrupt flag"]
        pub struct GIF7_R(crate::FieldReader<bool>);
        impl GIF7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GIF7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GIF7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIF7` reader - Channel 7 Transfer Complete flag"]
        pub struct TCIF7_R(crate::FieldReader<bool>);
        impl TCIF7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIF7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIF7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIF7` reader - Channel 7 Half Transfer Complete flag"]
        pub struct HTIF7_R(crate::FieldReader<bool>);
        impl HTIF7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIF7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIF7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIF7` reader - Channel 7 Transfer Error flag"]
        pub struct TEIF7_R(crate::FieldReader<bool>);
        impl TEIF7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIF7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIF7_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 1 Global interrupt flag"]
            #[inline(always)]
            pub fn gif1(&self) -> GIF1_R {
                GIF1_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif1(&self) -> TCIF1_R {
                TCIF1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Channel 1 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif1(&self) -> HTIF1_R {
                HTIF1_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 1 Transfer Error flag"]
            #[inline(always)]
            pub fn teif1(&self) -> TEIF1_R {
                TEIF1_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Channel 2 Global interrupt flag"]
            #[inline(always)]
            pub fn gif2(&self) -> GIF2_R {
                GIF2_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Channel 2 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif2(&self) -> TCIF2_R {
                TCIF2_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Channel 2 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif2(&self) -> HTIF2_R {
                HTIF2_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Channel 2 Transfer Error flag"]
            #[inline(always)]
            pub fn teif2(&self) -> TEIF2_R {
                TEIF2_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Channel 3 Global interrupt flag"]
            #[inline(always)]
            pub fn gif3(&self) -> GIF3_R {
                GIF3_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Channel 3 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif3(&self) -> TCIF3_R {
                TCIF3_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Channel 3 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif3(&self) -> HTIF3_R {
                HTIF3_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 3 Transfer Error flag"]
            #[inline(always)]
            pub fn teif3(&self) -> TEIF3_R {
                TEIF3_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Channel 4 Global interrupt flag"]
            #[inline(always)]
            pub fn gif4(&self) -> GIF4_R {
                GIF4_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Channel 4 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif4(&self) -> TCIF4_R {
                TCIF4_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Channel 4 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif4(&self) -> HTIF4_R {
                HTIF4_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Channel 4 Transfer Error flag"]
            #[inline(always)]
            pub fn teif4(&self) -> TEIF4_R {
                TEIF4_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Channel 5 Global interrupt flag"]
            #[inline(always)]
            pub fn gif5(&self) -> GIF5_R {
                GIF5_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Channel 5 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif5(&self) -> TCIF5_R {
                TCIF5_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Channel 5 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif5(&self) -> HTIF5_R {
                HTIF5_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Channel 5 Transfer Error flag"]
            #[inline(always)]
            pub fn teif5(&self) -> TEIF5_R {
                TEIF5_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Channel 6 Global interrupt flag"]
            #[inline(always)]
            pub fn gif6(&self) -> GIF6_R {
                GIF6_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Channel 6 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif6(&self) -> TCIF6_R {
                TCIF6_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Channel 6 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif6(&self) -> HTIF6_R {
                HTIF6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Channel 6 Transfer Error flag"]
            #[inline(always)]
            pub fn teif6(&self) -> TEIF6_R {
                TEIF6_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Channel 7 Global interrupt flag"]
            #[inline(always)]
            pub fn gif7(&self) -> GIF7_R {
                GIF7_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Channel 7 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif7(&self) -> TCIF7_R {
                TCIF7_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Channel 7 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif7(&self) -> HTIF7_R {
                HTIF7_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Channel 7 Transfer Error flag"]
            #[inline(always)]
            pub fn teif7(&self) -> TEIF7_R {
                TEIF7_R::new(((self.bits >> 27) & 1) != 0)
            }
        }
        #[doc = "DMA interrupt status register (DMA_INTFR)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intfr](index.html) module"]
        pub struct INTFR_SPEC;
        impl crate::RegisterSpec for INTFR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [intfr::R](R) reader structure"]
        impl crate::Readable for INTFR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets INTFR to value 0"]
        impl crate::Resettable for INTFR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "INTFCR register accessor: an alias for `Reg<INTFCR_SPEC>`"]
    pub type INTFCR = crate::Reg<intfcr::INTFCR_SPEC>;
    #[doc = "DMA interrupt flag clear register (DMA_INTFCR)"]
    pub mod intfcr {
        #[doc = "Register `INTFCR` writer"]
        pub struct W(crate::W<INTFCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<INTFCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<INTFCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<INTFCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CGIF1` writer - Channel 1 Global interrupt clear"]
        pub struct CGIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `CGIF2` writer - Channel 2 Global interrupt clear"]
        pub struct CGIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CGIF3` writer - Channel 3 Global interrupt clear"]
        pub struct CGIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `CGIF4` writer - Channel 4 Global interrupt clear"]
        pub struct CGIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `CGIF5` writer - Channel 5 Global interrupt clear"]
        pub struct CGIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `CGIF6` writer - Channel 6 Global interrupt clear"]
        pub struct CGIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 20)) | ((value as u32 & 1) << 20);
                self.w
            }
        }
        #[doc = "Field `CGIF7` writer - Channel 7 Global interrupt clear"]
        pub struct CGIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 24)) | ((value as u32 & 1) << 24);
                self.w
            }
        }
        #[doc = "Field `CTCIF1` writer - Channel 1 Transfer Complete clear"]
        pub struct CTCIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `CTCIF2` writer - Channel 2 Transfer Complete clear"]
        pub struct CTCIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `CTCIF3` writer - Channel 3 Transfer Complete clear"]
        pub struct CTCIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `CTCIF4` writer - Channel 4 Transfer Complete clear"]
        pub struct CTCIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `CTCIF5` writer - Channel 5 Transfer Complete clear"]
        pub struct CTCIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `CTCIF6` writer - Channel 6 Transfer Complete clear"]
        pub struct CTCIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 21)) | ((value as u32 & 1) << 21);
                self.w
            }
        }
        #[doc = "Field `CTCIF7` writer - Channel 7 Transfer Complete clear"]
        pub struct CTCIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 25)) | ((value as u32 & 1) << 25);
                self.w
            }
        }
        #[doc = "Field `CHTIF1` writer - Channel 1 Half Transfer clear"]
        pub struct CHTIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CHTIF2` writer - Channel 2 Half Transfer clear"]
        pub struct CHTIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `CHTIF3` writer - Channel 3 Half Transfer clear"]
        pub struct CHTIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CHTIF4` writer - Channel 4 Half Transfer clear"]
        pub struct CHTIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `CHTIF5` writer - Channel 5 Half Transfer clear"]
        pub struct CHTIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        #[doc = "Field `CHTIF6` writer - Channel 6 Half Transfer clear"]
        pub struct CHTIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 22)) | ((value as u32 & 1) << 22);
                self.w
            }
        }
        #[doc = "Field `CHTIF7` writer - Channel 7 Half Transfer clear"]
        pub struct CHTIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 26)) | ((value as u32 & 1) << 26);
                self.w
            }
        }
        #[doc = "Field `CTEIF1` writer - Channel 1 Transfer Error clear"]
        pub struct CTEIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CTEIF2` writer - Channel 2 Transfer Error clear"]
        pub struct CTEIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `CTEIF3` writer - Channel 3 Transfer Error clear"]
        pub struct CTEIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `CTEIF4` writer - Channel 4 Transfer Error clear"]
        pub struct CTEIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `CTEIF5` writer - Channel 5 Transfer Error clear"]
        pub struct CTEIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 19)) | ((value as u32 & 1) << 19);
                self.w
            }
        }
        #[doc = "Field `CTEIF6` writer - Channel 6 Transfer Error clear"]
        pub struct CTEIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 23)) | ((value as u32 & 1) << 23);
                self.w
            }
        }
        #[doc = "Field `CTEIF7` writer - Channel 7 Transfer Error clear"]
        pub struct CTEIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 27)) | ((value as u32 & 1) << 27);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 1 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif1(&mut self) -> CGIF1_W {
                CGIF1_W { w: self }
            }
            #[doc = "Bit 4 - Channel 2 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif2(&mut self) -> CGIF2_W {
                CGIF2_W { w: self }
            }
            #[doc = "Bit 8 - Channel 3 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif3(&mut self) -> CGIF3_W {
                CGIF3_W { w: self }
            }
            #[doc = "Bit 12 - Channel 4 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif4(&mut self) -> CGIF4_W {
                CGIF4_W { w: self }
            }
            #[doc = "Bit 16 - Channel 5 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif5(&mut self) -> CGIF5_W {
                CGIF5_W { w: self }
            }
            #[doc = "Bit 20 - Channel 6 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif6(&mut self) -> CGIF6_W {
                CGIF6_W { w: self }
            }
            #[doc = "Bit 24 - Channel 7 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif7(&mut self) -> CGIF7_W {
                CGIF7_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif1(&mut self) -> CTCIF1_W {
                CTCIF1_W { w: self }
            }
            #[doc = "Bit 5 - Channel 2 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif2(&mut self) -> CTCIF2_W {
                CTCIF2_W { w: self }
            }
            #[doc = "Bit 9 - Channel 3 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif3(&mut self) -> CTCIF3_W {
                CTCIF3_W { w: self }
            }
            #[doc = "Bit 13 - Channel 4 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif4(&mut self) -> CTCIF4_W {
                CTCIF4_W { w: self }
            }
            #[doc = "Bit 17 - Channel 5 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif5(&mut self) -> CTCIF5_W {
                CTCIF5_W { w: self }
            }
            #[doc = "Bit 21 - Channel 6 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif6(&mut self) -> CTCIF6_W {
                CTCIF6_W { w: self }
            }
            #[doc = "Bit 25 - Channel 7 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif7(&mut self) -> CTCIF7_W {
                CTCIF7_W { w: self }
            }
            #[doc = "Bit 2 - Channel 1 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif1(&mut self) -> CHTIF1_W {
                CHTIF1_W { w: self }
            }
            #[doc = "Bit 6 - Channel 2 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif2(&mut self) -> CHTIF2_W {
                CHTIF2_W { w: self }
            }
            #[doc = "Bit 10 - Channel 3 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif3(&mut self) -> CHTIF3_W {
                CHTIF3_W { w: self }
            }
            #[doc = "Bit 14 - Channel 4 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif4(&mut self) -> CHTIF4_W {
                CHTIF4_W { w: self }
            }
            #[doc = "Bit 18 - Channel 5 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif5(&mut self) -> CHTIF5_W {
                CHTIF5_W { w: self }
            }
            #[doc = "Bit 22 - Channel 6 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif6(&mut self) -> CHTIF6_W {
                CHTIF6_W { w: self }
            }
            #[doc = "Bit 26 - Channel 7 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif7(&mut self) -> CHTIF7_W {
                CHTIF7_W { w: self }
            }
            #[doc = "Bit 3 - Channel 1 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif1(&mut self) -> CTEIF1_W {
                CTEIF1_W { w: self }
            }
            #[doc = "Bit 7 - Channel 2 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif2(&mut self) -> CTEIF2_W {
                CTEIF2_W { w: self }
            }
            #[doc = "Bit 11 - Channel 3 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif3(&mut self) -> CTEIF3_W {
                CTEIF3_W { w: self }
            }
            #[doc = "Bit 15 - Channel 4 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif4(&mut self) -> CTEIF4_W {
                CTEIF4_W { w: self }
            }
            #[doc = "Bit 19 - Channel 5 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif5(&mut self) -> CTEIF5_W {
                CTEIF5_W { w: self }
            }
            #[doc = "Bit 23 - Channel 6 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif6(&mut self) -> CTEIF6_W {
                CTEIF6_W { w: self }
            }
            #[doc = "Bit 27 - Channel 7 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif7(&mut self) -> CTEIF7_W {
                CTEIF7_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA interrupt flag clear register (DMA_INTFCR)\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intfcr](index.html) module"]
        pub struct INTFCR_SPEC;
        impl crate::RegisterSpec for INTFCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [intfcr::W](W) writer structure"]
        impl crate::Writable for INTFCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets INTFCR to value 0"]
        impl crate::Resettable for INTFCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR register accessor: an alias for `Reg<CFGR_SPEC>`"]
    pub type CFGR = crate::Reg<cfgr::CFGR_SPEC>;
    #[doc = "DMA channel configuration register (DMA_CFGR)"]
    pub mod cfgr {
        #[doc = "Register `CFGR` reader"]
        pub struct R(crate::R<CFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR` writer"]
        pub struct W(crate::W<CFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EN` reader - Channel enable"]
        pub struct EN_R(crate::FieldReader<bool>);
        impl EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EN` writer - Channel enable"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transfer complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transfer complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `HTIE` reader - Half Transfer interrupt enable"]
        pub struct HTIE_R(crate::FieldReader<bool>);
        impl HTIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIE` writer - Half Transfer interrupt enable"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEIE` reader - Transfer error interrupt enable"]
        pub struct TEIE_R(crate::FieldReader<bool>);
        impl TEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIE` writer - Transfer error interrupt enable"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Data transfer direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Data transfer direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CIRC` reader - Circular mode"]
        pub struct CIRC_R(crate::FieldReader<bool>);
        impl CIRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIRC` writer - Circular mode"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PINC` reader - Peripheral increment mode"]
        pub struct PINC_R(crate::FieldReader<bool>);
        impl PINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PINC` writer - Peripheral increment mode"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MINC` reader - Memory increment mode"]
        pub struct MINC_R(crate::FieldReader<bool>);
        impl MINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MINC` writer - Memory increment mode"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PSIZE` reader - Peripheral size"]
        pub struct PSIZE_R(crate::FieldReader<u8>);
        impl PSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSIZE` writer - Peripheral size"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `MSIZE` reader - Memory size"]
        pub struct MSIZE_R(crate::FieldReader<u8>);
        impl MSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSIZE` writer - Memory size"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `PL` reader - Channel Priority level"]
        pub struct PL_R(crate::FieldReader<u8>);
        impl PL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PL` writer - Channel Priority level"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `MEM2MEM` reader - Memory to memory mode"]
        pub struct MEM2MEM_R(crate::FieldReader<bool>);
        impl MEM2MEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MEM2MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MEM2MEM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MEM2MEM` writer - Memory to memory mode"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel configuration register (DMA_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](index.html) module"]
        pub struct CFGR_SPEC;
        impl crate::RegisterSpec for CFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr::R](R) reader structure"]
        impl crate::Readable for CFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr::W](W) writer structure"]
        impl crate::Writable for CFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR to value 0"]
        impl crate::Resettable for CFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTR register accessor: an alias for `Reg<CNTR_SPEC>`"]
    pub type CNTR = crate::Reg<cntr::CNTR_SPEC>;
    #[doc = "DMA channel 1 number of data register"]
    pub mod cntr {
        #[doc = "Register `CNTR` reader"]
        pub struct R(crate::R<CNTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTR` writer"]
        pub struct W(crate::W<CNTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NDT` reader - Number of data to transfer"]
        pub struct NDT_R(crate::FieldReader<u16>);
        impl NDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NDT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NDT` writer - Number of data to transfer"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 1 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr](index.html) module"]
        pub struct CNTR_SPEC;
        impl crate::RegisterSpec for CNTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntr::R](R) reader structure"]
        impl crate::Readable for CNTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntr::W](W) writer structure"]
        impl crate::Writable for CNTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTR to value 0"]
        impl crate::Resettable for CNTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PADDR register accessor: an alias for `Reg<PADDR_SPEC>`"]
    pub type PADDR = crate::Reg<paddr::PADDR_SPEC>;
    #[doc = "DMA channel 1 peripheral address register"]
    pub mod paddr {
        #[doc = "Register `PADDR` reader"]
        pub struct R(crate::R<PADDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PADDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PADDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PADDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PADDR` writer"]
        pub struct W(crate::W<PADDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PADDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PADDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PADDR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PA` reader - Peripheral address"]
        pub struct PA_R(crate::FieldReader<u32>);
        impl PA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PA` writer - Peripheral address"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 1 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [paddr](index.html) module"]
        pub struct PADDR_SPEC;
        impl crate::RegisterSpec for PADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [paddr::R](R) reader structure"]
        impl crate::Readable for PADDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [paddr::W](W) writer structure"]
        impl crate::Writable for PADDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PADDR to value 0"]
        impl crate::Resettable for PADDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MADDR register accessor: an alias for `Reg<MADDR_SPEC>`"]
    pub type MADDR = crate::Reg<maddr::MADDR_SPEC>;
    #[doc = "DMA channel 1 memory address register"]
    pub mod maddr {
        #[doc = "Register `MADDR` reader"]
        pub struct R(crate::R<MADDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MADDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MADDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MADDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MADDR` writer"]
        pub struct W(crate::W<MADDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MADDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MADDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MADDR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MA` reader - Memory address"]
        pub struct MA_R(crate::FieldReader<u32>);
        impl MA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                MA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MA` writer - Memory address"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 1 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [maddr](index.html) module"]
        pub struct MADDR_SPEC;
        impl crate::RegisterSpec for MADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [maddr::R](R) reader structure"]
        impl crate::Readable for MADDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [maddr::W](W) writer structure"]
        impl crate::Writable for MADDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MADDR to value 0"]
        impl crate::Resettable for MADDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR2 register accessor: an alias for `Reg<CFGR2_SPEC>`"]
    pub type CFGR2 = crate::Reg<cfgr2::CFGR2_SPEC>;
    #[doc = "DMA channel configuration register (DMA_CFGR)"]
    pub mod cfgr2 {
        #[doc = "Register `CFGR2` reader"]
        pub struct R(crate::R<CFGR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR2` writer"]
        pub struct W(crate::W<CFGR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EN` reader - Channel enable"]
        pub struct EN_R(crate::FieldReader<bool>);
        impl EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EN` writer - Channel enable"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transfer complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transfer complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `HTIE` reader - Half Transfer interrupt enable"]
        pub struct HTIE_R(crate::FieldReader<bool>);
        impl HTIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIE` writer - Half Transfer interrupt enable"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEIE` reader - Transfer error interrupt enable"]
        pub struct TEIE_R(crate::FieldReader<bool>);
        impl TEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIE` writer - Transfer error interrupt enable"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Data transfer direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Data transfer direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CIRC` reader - Circular mode"]
        pub struct CIRC_R(crate::FieldReader<bool>);
        impl CIRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIRC` writer - Circular mode"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PINC` reader - Peripheral increment mode"]
        pub struct PINC_R(crate::FieldReader<bool>);
        impl PINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PINC` writer - Peripheral increment mode"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MINC` reader - Memory increment mode"]
        pub struct MINC_R(crate::FieldReader<bool>);
        impl MINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MINC` writer - Memory increment mode"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PSIZE` reader - Peripheral size"]
        pub struct PSIZE_R(crate::FieldReader<u8>);
        impl PSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSIZE` writer - Peripheral size"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `MSIZE` reader - Memory size"]
        pub struct MSIZE_R(crate::FieldReader<u8>);
        impl MSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSIZE` writer - Memory size"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `PL` reader - Channel Priority level"]
        pub struct PL_R(crate::FieldReader<u8>);
        impl PL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PL` writer - Channel Priority level"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `MEM2MEM` reader - Memory to memory mode"]
        pub struct MEM2MEM_R(crate::FieldReader<bool>);
        impl MEM2MEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MEM2MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MEM2MEM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MEM2MEM` writer - Memory to memory mode"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel configuration register (DMA_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](index.html) module"]
        pub struct CFGR2_SPEC;
        impl crate::RegisterSpec for CFGR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr2::R](R) reader structure"]
        impl crate::Readable for CFGR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr2::W](W) writer structure"]
        impl crate::Writable for CFGR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR2 to value 0"]
        impl crate::Resettable for CFGR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTR2 register accessor: an alias for `Reg<CNTR2_SPEC>`"]
    pub type CNTR2 = crate::Reg<cntr2::CNTR2_SPEC>;
    #[doc = "DMA channel 2 number of data register"]
    pub mod cntr2 {
        #[doc = "Register `CNTR2` reader"]
        pub struct R(crate::R<CNTR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTR2` writer"]
        pub struct W(crate::W<CNTR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NDT` reader - Number of data to transfer"]
        pub struct NDT_R(crate::FieldReader<u16>);
        impl NDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NDT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NDT` writer - Number of data to transfer"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 2 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr2](index.html) module"]
        pub struct CNTR2_SPEC;
        impl crate::RegisterSpec for CNTR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntr2::R](R) reader structure"]
        impl crate::Readable for CNTR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntr2::W](W) writer structure"]
        impl crate::Writable for CNTR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTR2 to value 0"]
        impl crate::Resettable for CNTR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PADDR2 register accessor: an alias for `Reg<PADDR2_SPEC>`"]
    pub type PADDR2 = crate::Reg<paddr2::PADDR2_SPEC>;
    #[doc = "DMA channel 2 peripheral address register"]
    pub mod paddr2 {
        #[doc = "Register `PADDR2` reader"]
        pub struct R(crate::R<PADDR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PADDR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PADDR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PADDR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PADDR2` writer"]
        pub struct W(crate::W<PADDR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PADDR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PADDR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PADDR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PA` reader - Peripheral address"]
        pub struct PA_R(crate::FieldReader<u32>);
        impl PA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PA` writer - Peripheral address"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 2 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [paddr2](index.html) module"]
        pub struct PADDR2_SPEC;
        impl crate::RegisterSpec for PADDR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [paddr2::R](R) reader structure"]
        impl crate::Readable for PADDR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [paddr2::W](W) writer structure"]
        impl crate::Writable for PADDR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PADDR2 to value 0"]
        impl crate::Resettable for PADDR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MADDR2 register accessor: an alias for `Reg<MADDR2_SPEC>`"]
    pub type MADDR2 = crate::Reg<maddr2::MADDR2_SPEC>;
    #[doc = "DMA channel 2 memory address register"]
    pub mod maddr2 {
        #[doc = "Register `MADDR2` reader"]
        pub struct R(crate::R<MADDR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MADDR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MADDR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MADDR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MADDR2` writer"]
        pub struct W(crate::W<MADDR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MADDR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MADDR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MADDR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MA` reader - Memory address"]
        pub struct MA_R(crate::FieldReader<u32>);
        impl MA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                MA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MA` writer - Memory address"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 2 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [maddr2](index.html) module"]
        pub struct MADDR2_SPEC;
        impl crate::RegisterSpec for MADDR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [maddr2::R](R) reader structure"]
        impl crate::Readable for MADDR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [maddr2::W](W) writer structure"]
        impl crate::Writable for MADDR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MADDR2 to value 0"]
        impl crate::Resettable for MADDR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR3 register accessor: an alias for `Reg<CFGR3_SPEC>`"]
    pub type CFGR3 = crate::Reg<cfgr3::CFGR3_SPEC>;
    #[doc = "DMA channel configuration register (DMA_CFGR)"]
    pub mod cfgr3 {
        #[doc = "Register `CFGR3` reader"]
        pub struct R(crate::R<CFGR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR3` writer"]
        pub struct W(crate::W<CFGR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EN` reader - Channel enable"]
        pub struct EN_R(crate::FieldReader<bool>);
        impl EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EN` writer - Channel enable"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transfer complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transfer complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `HTIE` reader - Half Transfer interrupt enable"]
        pub struct HTIE_R(crate::FieldReader<bool>);
        impl HTIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIE` writer - Half Transfer interrupt enable"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEIE` reader - Transfer error interrupt enable"]
        pub struct TEIE_R(crate::FieldReader<bool>);
        impl TEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIE` writer - Transfer error interrupt enable"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Data transfer direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Data transfer direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CIRC` reader - Circular mode"]
        pub struct CIRC_R(crate::FieldReader<bool>);
        impl CIRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIRC` writer - Circular mode"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PINC` reader - Peripheral increment mode"]
        pub struct PINC_R(crate::FieldReader<bool>);
        impl PINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PINC` writer - Peripheral increment mode"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MINC` reader - Memory increment mode"]
        pub struct MINC_R(crate::FieldReader<bool>);
        impl MINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MINC` writer - Memory increment mode"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PSIZE` reader - Peripheral size"]
        pub struct PSIZE_R(crate::FieldReader<u8>);
        impl PSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSIZE` writer - Peripheral size"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `MSIZE` reader - Memory size"]
        pub struct MSIZE_R(crate::FieldReader<u8>);
        impl MSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSIZE` writer - Memory size"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `PL` reader - Channel Priority level"]
        pub struct PL_R(crate::FieldReader<u8>);
        impl PL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PL` writer - Channel Priority level"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `MEM2MEM` reader - Memory to memory mode"]
        pub struct MEM2MEM_R(crate::FieldReader<bool>);
        impl MEM2MEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MEM2MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MEM2MEM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MEM2MEM` writer - Memory to memory mode"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel configuration register (DMA_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr3](index.html) module"]
        pub struct CFGR3_SPEC;
        impl crate::RegisterSpec for CFGR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr3::R](R) reader structure"]
        impl crate::Readable for CFGR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr3::W](W) writer structure"]
        impl crate::Writable for CFGR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR3 to value 0"]
        impl crate::Resettable for CFGR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTR3 register accessor: an alias for `Reg<CNTR3_SPEC>`"]
    pub type CNTR3 = crate::Reg<cntr3::CNTR3_SPEC>;
    #[doc = "DMA channel 3 number of data register"]
    pub mod cntr3 {
        #[doc = "Register `CNTR3` reader"]
        pub struct R(crate::R<CNTR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTR3` writer"]
        pub struct W(crate::W<CNTR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NDT` reader - Number of data to transfer"]
        pub struct NDT_R(crate::FieldReader<u16>);
        impl NDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NDT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NDT` writer - Number of data to transfer"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 3 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr3](index.html) module"]
        pub struct CNTR3_SPEC;
        impl crate::RegisterSpec for CNTR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntr3::R](R) reader structure"]
        impl crate::Readable for CNTR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntr3::W](W) writer structure"]
        impl crate::Writable for CNTR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTR3 to value 0"]
        impl crate::Resettable for CNTR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PADDR3 register accessor: an alias for `Reg<PADDR3_SPEC>`"]
    pub type PADDR3 = crate::Reg<paddr3::PADDR3_SPEC>;
    #[doc = "DMA channel 3 peripheral address register"]
    pub mod paddr3 {
        #[doc = "Register `PADDR3` reader"]
        pub struct R(crate::R<PADDR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PADDR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PADDR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PADDR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PADDR3` writer"]
        pub struct W(crate::W<PADDR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PADDR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PADDR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PADDR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PA` reader - Peripheral address"]
        pub struct PA_R(crate::FieldReader<u32>);
        impl PA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PA` writer - Peripheral address"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 3 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [paddr3](index.html) module"]
        pub struct PADDR3_SPEC;
        impl crate::RegisterSpec for PADDR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [paddr3::R](R) reader structure"]
        impl crate::Readable for PADDR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [paddr3::W](W) writer structure"]
        impl crate::Writable for PADDR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PADDR3 to value 0"]
        impl crate::Resettable for PADDR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MADDR3 register accessor: an alias for `Reg<MADDR3_SPEC>`"]
    pub type MADDR3 = crate::Reg<maddr3::MADDR3_SPEC>;
    #[doc = "DMA channel 3 memory address register"]
    pub mod maddr3 {
        #[doc = "Register `MADDR3` reader"]
        pub struct R(crate::R<MADDR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MADDR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MADDR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MADDR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MADDR3` writer"]
        pub struct W(crate::W<MADDR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MADDR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MADDR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MADDR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MA` reader - Memory address"]
        pub struct MA_R(crate::FieldReader<u32>);
        impl MA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                MA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MA` writer - Memory address"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 3 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [maddr3](index.html) module"]
        pub struct MADDR3_SPEC;
        impl crate::RegisterSpec for MADDR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [maddr3::R](R) reader structure"]
        impl crate::Readable for MADDR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [maddr3::W](W) writer structure"]
        impl crate::Writable for MADDR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MADDR3 to value 0"]
        impl crate::Resettable for MADDR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR4 register accessor: an alias for `Reg<CFGR4_SPEC>`"]
    pub type CFGR4 = crate::Reg<cfgr4::CFGR4_SPEC>;
    #[doc = "DMA channel configuration register (DMA_CFGR)"]
    pub mod cfgr4 {
        #[doc = "Register `CFGR4` reader"]
        pub struct R(crate::R<CFGR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR4` writer"]
        pub struct W(crate::W<CFGR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EN` reader - Channel enable"]
        pub struct EN_R(crate::FieldReader<bool>);
        impl EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EN` writer - Channel enable"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transfer complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transfer complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `HTIE` reader - Half Transfer interrupt enable"]
        pub struct HTIE_R(crate::FieldReader<bool>);
        impl HTIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIE` writer - Half Transfer interrupt enable"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEIE` reader - Transfer error interrupt enable"]
        pub struct TEIE_R(crate::FieldReader<bool>);
        impl TEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIE` writer - Transfer error interrupt enable"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Data transfer direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Data transfer direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CIRC` reader - Circular mode"]
        pub struct CIRC_R(crate::FieldReader<bool>);
        impl CIRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIRC` writer - Circular mode"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PINC` reader - Peripheral increment mode"]
        pub struct PINC_R(crate::FieldReader<bool>);
        impl PINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PINC` writer - Peripheral increment mode"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MINC` reader - Memory increment mode"]
        pub struct MINC_R(crate::FieldReader<bool>);
        impl MINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MINC` writer - Memory increment mode"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PSIZE` reader - Peripheral size"]
        pub struct PSIZE_R(crate::FieldReader<u8>);
        impl PSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSIZE` writer - Peripheral size"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `MSIZE` reader - Memory size"]
        pub struct MSIZE_R(crate::FieldReader<u8>);
        impl MSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSIZE` writer - Memory size"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `PL` reader - Channel Priority level"]
        pub struct PL_R(crate::FieldReader<u8>);
        impl PL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PL` writer - Channel Priority level"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `MEM2MEM` reader - Memory to memory mode"]
        pub struct MEM2MEM_R(crate::FieldReader<bool>);
        impl MEM2MEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MEM2MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MEM2MEM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MEM2MEM` writer - Memory to memory mode"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel configuration register (DMA_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr4](index.html) module"]
        pub struct CFGR4_SPEC;
        impl crate::RegisterSpec for CFGR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr4::R](R) reader structure"]
        impl crate::Readable for CFGR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr4::W](W) writer structure"]
        impl crate::Writable for CFGR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR4 to value 0"]
        impl crate::Resettable for CFGR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTR4 register accessor: an alias for `Reg<CNTR4_SPEC>`"]
    pub type CNTR4 = crate::Reg<cntr4::CNTR4_SPEC>;
    #[doc = "DMA channel 4 number of data register"]
    pub mod cntr4 {
        #[doc = "Register `CNTR4` reader"]
        pub struct R(crate::R<CNTR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTR4` writer"]
        pub struct W(crate::W<CNTR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTR4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NDT` reader - Number of data to transfer"]
        pub struct NDT_R(crate::FieldReader<u16>);
        impl NDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NDT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NDT` writer - Number of data to transfer"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 4 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr4](index.html) module"]
        pub struct CNTR4_SPEC;
        impl crate::RegisterSpec for CNTR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntr4::R](R) reader structure"]
        impl crate::Readable for CNTR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntr4::W](W) writer structure"]
        impl crate::Writable for CNTR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTR4 to value 0"]
        impl crate::Resettable for CNTR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PADDR4 register accessor: an alias for `Reg<PADDR4_SPEC>`"]
    pub type PADDR4 = crate::Reg<paddr4::PADDR4_SPEC>;
    #[doc = "DMA channel 4 peripheral address register"]
    pub mod paddr4 {
        #[doc = "Register `PADDR4` reader"]
        pub struct R(crate::R<PADDR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PADDR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PADDR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PADDR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PADDR4` writer"]
        pub struct W(crate::W<PADDR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PADDR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PADDR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PADDR4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PA` reader - Peripheral address"]
        pub struct PA_R(crate::FieldReader<u32>);
        impl PA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PA` writer - Peripheral address"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 4 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [paddr4](index.html) module"]
        pub struct PADDR4_SPEC;
        impl crate::RegisterSpec for PADDR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [paddr4::R](R) reader structure"]
        impl crate::Readable for PADDR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [paddr4::W](W) writer structure"]
        impl crate::Writable for PADDR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PADDR4 to value 0"]
        impl crate::Resettable for PADDR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MADDR4 register accessor: an alias for `Reg<MADDR4_SPEC>`"]
    pub type MADDR4 = crate::Reg<maddr4::MADDR4_SPEC>;
    #[doc = "DMA channel 4 memory address register"]
    pub mod maddr4 {
        #[doc = "Register `MADDR4` reader"]
        pub struct R(crate::R<MADDR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MADDR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MADDR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MADDR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MADDR4` writer"]
        pub struct W(crate::W<MADDR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MADDR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MADDR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MADDR4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MA` reader - Memory address"]
        pub struct MA_R(crate::FieldReader<u32>);
        impl MA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                MA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MA` writer - Memory address"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 4 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [maddr4](index.html) module"]
        pub struct MADDR4_SPEC;
        impl crate::RegisterSpec for MADDR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [maddr4::R](R) reader structure"]
        impl crate::Readable for MADDR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [maddr4::W](W) writer structure"]
        impl crate::Writable for MADDR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MADDR4 to value 0"]
        impl crate::Resettable for MADDR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR5 register accessor: an alias for `Reg<CFGR5_SPEC>`"]
    pub type CFGR5 = crate::Reg<cfgr5::CFGR5_SPEC>;
    #[doc = "DMA channel configuration register (DMA_CFGR)"]
    pub mod cfgr5 {
        #[doc = "Register `CFGR5` reader"]
        pub struct R(crate::R<CFGR5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR5` writer"]
        pub struct W(crate::W<CFGR5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR5_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EN` reader - Channel enable"]
        pub struct EN_R(crate::FieldReader<bool>);
        impl EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EN` writer - Channel enable"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transfer complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transfer complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `HTIE` reader - Half Transfer interrupt enable"]
        pub struct HTIE_R(crate::FieldReader<bool>);
        impl HTIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIE` writer - Half Transfer interrupt enable"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEIE` reader - Transfer error interrupt enable"]
        pub struct TEIE_R(crate::FieldReader<bool>);
        impl TEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIE` writer - Transfer error interrupt enable"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Data transfer direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Data transfer direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CIRC` reader - Circular mode"]
        pub struct CIRC_R(crate::FieldReader<bool>);
        impl CIRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIRC` writer - Circular mode"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PINC` reader - Peripheral increment mode"]
        pub struct PINC_R(crate::FieldReader<bool>);
        impl PINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PINC` writer - Peripheral increment mode"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MINC` reader - Memory increment mode"]
        pub struct MINC_R(crate::FieldReader<bool>);
        impl MINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MINC` writer - Memory increment mode"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PSIZE` reader - Peripheral size"]
        pub struct PSIZE_R(crate::FieldReader<u8>);
        impl PSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSIZE` writer - Peripheral size"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `MSIZE` reader - Memory size"]
        pub struct MSIZE_R(crate::FieldReader<u8>);
        impl MSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSIZE` writer - Memory size"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `PL` reader - Channel Priority level"]
        pub struct PL_R(crate::FieldReader<u8>);
        impl PL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PL` writer - Channel Priority level"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `MEM2MEM` reader - Memory to memory mode"]
        pub struct MEM2MEM_R(crate::FieldReader<bool>);
        impl MEM2MEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MEM2MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MEM2MEM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MEM2MEM` writer - Memory to memory mode"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel configuration register (DMA_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr5](index.html) module"]
        pub struct CFGR5_SPEC;
        impl crate::RegisterSpec for CFGR5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr5::R](R) reader structure"]
        impl crate::Readable for CFGR5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr5::W](W) writer structure"]
        impl crate::Writable for CFGR5_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR5 to value 0"]
        impl crate::Resettable for CFGR5_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTR5 register accessor: an alias for `Reg<CNTR5_SPEC>`"]
    pub type CNTR5 = crate::Reg<cntr5::CNTR5_SPEC>;
    #[doc = "DMA channel 5 number of data register"]
    pub mod cntr5 {
        #[doc = "Register `CNTR5` reader"]
        pub struct R(crate::R<CNTR5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTR5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTR5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTR5` writer"]
        pub struct W(crate::W<CNTR5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTR5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTR5_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NDT` reader - Number of data to transfer"]
        pub struct NDT_R(crate::FieldReader<u16>);
        impl NDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NDT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NDT` writer - Number of data to transfer"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 5 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr5](index.html) module"]
        pub struct CNTR5_SPEC;
        impl crate::RegisterSpec for CNTR5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntr5::R](R) reader structure"]
        impl crate::Readable for CNTR5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntr5::W](W) writer structure"]
        impl crate::Writable for CNTR5_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTR5 to value 0"]
        impl crate::Resettable for CNTR5_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PADDR5 register accessor: an alias for `Reg<PADDR5_SPEC>`"]
    pub type PADDR5 = crate::Reg<paddr5::PADDR5_SPEC>;
    #[doc = "DMA channel 5 peripheral address register"]
    pub mod paddr5 {
        #[doc = "Register `PADDR5` reader"]
        pub struct R(crate::R<PADDR5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PADDR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PADDR5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PADDR5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PADDR5` writer"]
        pub struct W(crate::W<PADDR5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PADDR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PADDR5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PADDR5_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PA` reader - Peripheral address"]
        pub struct PA_R(crate::FieldReader<u32>);
        impl PA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PA` writer - Peripheral address"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 5 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [paddr5](index.html) module"]
        pub struct PADDR5_SPEC;
        impl crate::RegisterSpec for PADDR5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [paddr5::R](R) reader structure"]
        impl crate::Readable for PADDR5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [paddr5::W](W) writer structure"]
        impl crate::Writable for PADDR5_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PADDR5 to value 0"]
        impl crate::Resettable for PADDR5_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MADDR5 register accessor: an alias for `Reg<MADDR5_SPEC>`"]
    pub type MADDR5 = crate::Reg<maddr5::MADDR5_SPEC>;
    #[doc = "DMA channel 5 memory address register"]
    pub mod maddr5 {
        #[doc = "Register `MADDR5` reader"]
        pub struct R(crate::R<MADDR5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MADDR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MADDR5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MADDR5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MADDR5` writer"]
        pub struct W(crate::W<MADDR5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MADDR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MADDR5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MADDR5_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MA` reader - Memory address"]
        pub struct MA_R(crate::FieldReader<u32>);
        impl MA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                MA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MA` writer - Memory address"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 5 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [maddr5](index.html) module"]
        pub struct MADDR5_SPEC;
        impl crate::RegisterSpec for MADDR5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [maddr5::R](R) reader structure"]
        impl crate::Readable for MADDR5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [maddr5::W](W) writer structure"]
        impl crate::Writable for MADDR5_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MADDR5 to value 0"]
        impl crate::Resettable for MADDR5_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR6 register accessor: an alias for `Reg<CFGR6_SPEC>`"]
    pub type CFGR6 = crate::Reg<cfgr6::CFGR6_SPEC>;
    #[doc = "DMA channel configuration register (DMA_CFGR)"]
    pub mod cfgr6 {
        #[doc = "Register `CFGR6` reader"]
        pub struct R(crate::R<CFGR6_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR6_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR6_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR6` writer"]
        pub struct W(crate::W<CFGR6_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR6_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR6_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EN` reader - Channel enable"]
        pub struct EN_R(crate::FieldReader<bool>);
        impl EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EN` writer - Channel enable"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transfer complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transfer complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `HTIE` reader - Half Transfer interrupt enable"]
        pub struct HTIE_R(crate::FieldReader<bool>);
        impl HTIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIE` writer - Half Transfer interrupt enable"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEIE` reader - Transfer error interrupt enable"]
        pub struct TEIE_R(crate::FieldReader<bool>);
        impl TEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIE` writer - Transfer error interrupt enable"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Data transfer direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Data transfer direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CIRC` reader - Circular mode"]
        pub struct CIRC_R(crate::FieldReader<bool>);
        impl CIRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIRC` writer - Circular mode"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PINC` reader - Peripheral increment mode"]
        pub struct PINC_R(crate::FieldReader<bool>);
        impl PINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PINC` writer - Peripheral increment mode"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MINC` reader - Memory increment mode"]
        pub struct MINC_R(crate::FieldReader<bool>);
        impl MINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MINC` writer - Memory increment mode"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PSIZE` reader - Peripheral size"]
        pub struct PSIZE_R(crate::FieldReader<u8>);
        impl PSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSIZE` writer - Peripheral size"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `MSIZE` reader - Memory size"]
        pub struct MSIZE_R(crate::FieldReader<u8>);
        impl MSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSIZE` writer - Memory size"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `PL` reader - Channel Priority level"]
        pub struct PL_R(crate::FieldReader<u8>);
        impl PL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PL` writer - Channel Priority level"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `MEM2MEM` reader - Memory to memory mode"]
        pub struct MEM2MEM_R(crate::FieldReader<bool>);
        impl MEM2MEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MEM2MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MEM2MEM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MEM2MEM` writer - Memory to memory mode"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel configuration register (DMA_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr6](index.html) module"]
        pub struct CFGR6_SPEC;
        impl crate::RegisterSpec for CFGR6_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr6::R](R) reader structure"]
        impl crate::Readable for CFGR6_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr6::W](W) writer structure"]
        impl crate::Writable for CFGR6_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR6 to value 0"]
        impl crate::Resettable for CFGR6_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTR6 register accessor: an alias for `Reg<CNTR6_SPEC>`"]
    pub type CNTR6 = crate::Reg<cntr6::CNTR6_SPEC>;
    #[doc = "DMA channel 6 number of data register"]
    pub mod cntr6 {
        #[doc = "Register `CNTR6` reader"]
        pub struct R(crate::R<CNTR6_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTR6_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTR6_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTR6` writer"]
        pub struct W(crate::W<CNTR6_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTR6_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTR6_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NDT` reader - Number of data to transfer"]
        pub struct NDT_R(crate::FieldReader<u16>);
        impl NDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NDT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NDT` writer - Number of data to transfer"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 6 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr6](index.html) module"]
        pub struct CNTR6_SPEC;
        impl crate::RegisterSpec for CNTR6_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntr6::R](R) reader structure"]
        impl crate::Readable for CNTR6_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntr6::W](W) writer structure"]
        impl crate::Writable for CNTR6_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTR6 to value 0"]
        impl crate::Resettable for CNTR6_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PADDR6 register accessor: an alias for `Reg<PADDR6_SPEC>`"]
    pub type PADDR6 = crate::Reg<paddr6::PADDR6_SPEC>;
    #[doc = "DMA channel 6 peripheral address register"]
    pub mod paddr6 {
        #[doc = "Register `PADDR6` reader"]
        pub struct R(crate::R<PADDR6_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PADDR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PADDR6_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PADDR6_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PADDR6` writer"]
        pub struct W(crate::W<PADDR6_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PADDR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PADDR6_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PADDR6_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PA` reader - Peripheral address"]
        pub struct PA_R(crate::FieldReader<u32>);
        impl PA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PA` writer - Peripheral address"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 6 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [paddr6](index.html) module"]
        pub struct PADDR6_SPEC;
        impl crate::RegisterSpec for PADDR6_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [paddr6::R](R) reader structure"]
        impl crate::Readable for PADDR6_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [paddr6::W](W) writer structure"]
        impl crate::Writable for PADDR6_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PADDR6 to value 0"]
        impl crate::Resettable for PADDR6_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MADDR6 register accessor: an alias for `Reg<MADDR6_SPEC>`"]
    pub type MADDR6 = crate::Reg<maddr6::MADDR6_SPEC>;
    #[doc = "DMA channel 6 memory address register"]
    pub mod maddr6 {
        #[doc = "Register `MADDR6` reader"]
        pub struct R(crate::R<MADDR6_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MADDR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MADDR6_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MADDR6_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MADDR6` writer"]
        pub struct W(crate::W<MADDR6_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MADDR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MADDR6_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MADDR6_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MA` reader - Memory address"]
        pub struct MA_R(crate::FieldReader<u32>);
        impl MA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                MA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MA` writer - Memory address"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 6 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [maddr6](index.html) module"]
        pub struct MADDR6_SPEC;
        impl crate::RegisterSpec for MADDR6_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [maddr6::R](R) reader structure"]
        impl crate::Readable for MADDR6_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [maddr6::W](W) writer structure"]
        impl crate::Writable for MADDR6_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MADDR6 to value 0"]
        impl crate::Resettable for MADDR6_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR7 register accessor: an alias for `Reg<CFGR7_SPEC>`"]
    pub type CFGR7 = crate::Reg<cfgr7::CFGR7_SPEC>;
    #[doc = "DMA channel configuration register (DMA_CFGR)"]
    pub mod cfgr7 {
        #[doc = "Register `CFGR7` reader"]
        pub struct R(crate::R<CFGR7_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR7_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR7_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR7` writer"]
        pub struct W(crate::W<CFGR7_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR7_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR7_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EN` reader - Channel enable"]
        pub struct EN_R(crate::FieldReader<bool>);
        impl EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EN` writer - Channel enable"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transfer complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transfer complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `HTIE` reader - Half Transfer interrupt enable"]
        pub struct HTIE_R(crate::FieldReader<bool>);
        impl HTIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HTIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HTIE` writer - Half Transfer interrupt enable"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEIE` reader - Transfer error interrupt enable"]
        pub struct TEIE_R(crate::FieldReader<bool>);
        impl TEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TEIE` writer - Transfer error interrupt enable"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Data transfer direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Data transfer direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CIRC` reader - Circular mode"]
        pub struct CIRC_R(crate::FieldReader<bool>);
        impl CIRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIRC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIRC` writer - Circular mode"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PINC` reader - Peripheral increment mode"]
        pub struct PINC_R(crate::FieldReader<bool>);
        impl PINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PINC` writer - Peripheral increment mode"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `MINC` reader - Memory increment mode"]
        pub struct MINC_R(crate::FieldReader<bool>);
        impl MINC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MINC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MINC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MINC` writer - Memory increment mode"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `PSIZE` reader - Peripheral size"]
        pub struct PSIZE_R(crate::FieldReader<u8>);
        impl PSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSIZE` writer - Peripheral size"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `MSIZE` reader - Memory size"]
        pub struct MSIZE_R(crate::FieldReader<u8>);
        impl MSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSIZE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSIZE` writer - Memory size"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `PL` reader - Channel Priority level"]
        pub struct PL_R(crate::FieldReader<u8>);
        impl PL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PL` writer - Channel Priority level"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `MEM2MEM` reader - Memory to memory mode"]
        pub struct MEM2MEM_R(crate::FieldReader<bool>);
        impl MEM2MEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MEM2MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MEM2MEM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MEM2MEM` writer - Memory to memory mode"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 2 - Half Transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel Priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel configuration register (DMA_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr7](index.html) module"]
        pub struct CFGR7_SPEC;
        impl crate::RegisterSpec for CFGR7_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr7::R](R) reader structure"]
        impl crate::Readable for CFGR7_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr7::W](W) writer structure"]
        impl crate::Writable for CFGR7_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR7 to value 0"]
        impl crate::Resettable for CFGR7_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTR7 register accessor: an alias for `Reg<CNTR7_SPEC>`"]
    pub type CNTR7 = crate::Reg<cntr7::CNTR7_SPEC>;
    #[doc = "DMA channel 7 number of data register"]
    pub mod cntr7 {
        #[doc = "Register `CNTR7` reader"]
        pub struct R(crate::R<CNTR7_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTR7_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTR7_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTR7` writer"]
        pub struct W(crate::W<CNTR7_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTR7_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTR7_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NDT` reader - Number of data to transfer"]
        pub struct NDT_R(crate::FieldReader<u16>);
        impl NDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NDT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NDT` writer - Number of data to transfer"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 7 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr7](index.html) module"]
        pub struct CNTR7_SPEC;
        impl crate::RegisterSpec for CNTR7_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntr7::R](R) reader structure"]
        impl crate::Readable for CNTR7_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntr7::W](W) writer structure"]
        impl crate::Writable for CNTR7_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTR7 to value 0"]
        impl crate::Resettable for CNTR7_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PADDR7 register accessor: an alias for `Reg<PADDR7_SPEC>`"]
    pub type PADDR7 = crate::Reg<paddr7::PADDR7_SPEC>;
    #[doc = "DMA channel 7 peripheral address register"]
    pub mod paddr7 {
        #[doc = "Register `PADDR7` reader"]
        pub struct R(crate::R<PADDR7_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PADDR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PADDR7_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PADDR7_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PADDR7` writer"]
        pub struct W(crate::W<PADDR7_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PADDR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PADDR7_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PADDR7_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PA` reader - Peripheral address"]
        pub struct PA_R(crate::FieldReader<u32>);
        impl PA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PA` writer - Peripheral address"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 7 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [paddr7](index.html) module"]
        pub struct PADDR7_SPEC;
        impl crate::RegisterSpec for PADDR7_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [paddr7::R](R) reader structure"]
        impl crate::Readable for PADDR7_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [paddr7::W](W) writer structure"]
        impl crate::Writable for PADDR7_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PADDR7 to value 0"]
        impl crate::Resettable for PADDR7_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MADDR7 register accessor: an alias for `Reg<MADDR7_SPEC>`"]
    pub type MADDR7 = crate::Reg<maddr7::MADDR7_SPEC>;
    #[doc = "DMA channel 7 memory address register"]
    pub mod maddr7 {
        #[doc = "Register `MADDR7` reader"]
        pub struct R(crate::R<MADDR7_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MADDR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MADDR7_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MADDR7_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MADDR7` writer"]
        pub struct W(crate::W<MADDR7_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MADDR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MADDR7_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MADDR7_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MA` reader - Memory address"]
        pub struct MA_R(crate::FieldReader<u32>);
        impl MA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                MA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MA` writer - Memory address"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA channel 7 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [maddr7](index.html) module"]
        pub struct MADDR7_SPEC;
        impl crate::RegisterSpec for MADDR7_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [maddr7::R](R) reader structure"]
        impl crate::Readable for MADDR7_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [maddr7::W](W) writer structure"]
        impl crate::Writable for MADDR7_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MADDR7 to value 0"]
        impl crate::Resettable for MADDR7_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Real time clock"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtc::RegisterBlock = 0x4000_2800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
#[doc = "Real time clock"]
pub mod rtc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - RTC Control Register High"]
        pub ctlrh: crate::Reg<ctlrh::CTLRH_SPEC>,
        #[doc = "0x04 - RTC Control Register Low"]
        pub ctlrl: crate::Reg<ctlrl::CTLRL_SPEC>,
        #[doc = "0x08 - RTC Prescaler Load Register High"]
        pub pscrh: crate::Reg<pscrh::PSCRH_SPEC>,
        #[doc = "0x0c - RTC Prescaler Load Register Low"]
        pub pscrl: crate::Reg<pscrl::PSCRL_SPEC>,
        #[doc = "0x10 - RTC Prescaler Divider Register High"]
        pub divh: crate::Reg<divh::DIVH_SPEC>,
        #[doc = "0x14 - RTC Prescaler Divider Register Low"]
        pub divl: crate::Reg<divl::DIVL_SPEC>,
        #[doc = "0x18 - RTC Counter Register High"]
        pub cnth: crate::Reg<cnth::CNTH_SPEC>,
        #[doc = "0x1c - RTC Counter Register Low"]
        pub cntl: crate::Reg<cntl::CNTL_SPEC>,
        #[doc = "0x20 - RTC Alarm Register High"]
        pub alrmh: crate::Reg<alrmh::ALRMH_SPEC>,
        #[doc = "0x24 - RTC Alarm Register Low"]
        pub alrml: crate::Reg<alrml::ALRML_SPEC>,
    }
    #[doc = "CTLRH register accessor: an alias for `Reg<CTLRH_SPEC>`"]
    pub type CTLRH = crate::Reg<ctlrh::CTLRH_SPEC>;
    #[doc = "RTC Control Register High"]
    pub mod ctlrh {
        #[doc = "Register `CTLRH` reader"]
        pub struct R(crate::R<CTLRH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLRH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLRH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLRH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLRH` writer"]
        pub struct W(crate::W<CTLRH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLRH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLRH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLRH_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SECIE` reader - Second interrupt Enable"]
        pub struct SECIE_R(crate::FieldReader<bool>);
        impl SECIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SECIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SECIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SECIE` writer - Second interrupt Enable"]
        pub struct SECIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SECIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `ALRIE` reader - Alarm interrupt Enable"]
        pub struct ALRIE_R(crate::FieldReader<bool>);
        impl ALRIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ALRIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ALRIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ALRIE` writer - Alarm interrupt Enable"]
        pub struct ALRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `OWIE` reader - Overflow interrupt Enable"]
        pub struct OWIE_R(crate::FieldReader<bool>);
        impl OWIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OWIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OWIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OWIE` writer - Overflow interrupt Enable"]
        pub struct OWIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OWIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Second interrupt Enable"]
            #[inline(always)]
            pub fn secie(&self) -> SECIE_R {
                SECIE_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Alarm interrupt Enable"]
            #[inline(always)]
            pub fn alrie(&self) -> ALRIE_R {
                ALRIE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Overflow interrupt Enable"]
            #[inline(always)]
            pub fn owie(&self) -> OWIE_R {
                OWIE_R::new(((self.bits >> 2) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Second interrupt Enable"]
            #[inline(always)]
            pub fn secie(&mut self) -> SECIE_W {
                SECIE_W { w: self }
            }
            #[doc = "Bit 1 - Alarm interrupt Enable"]
            #[inline(always)]
            pub fn alrie(&mut self) -> ALRIE_W {
                ALRIE_W { w: self }
            }
            #[doc = "Bit 2 - Overflow interrupt Enable"]
            #[inline(always)]
            pub fn owie(&mut self) -> OWIE_W {
                OWIE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Control Register High\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlrh](index.html) module"]
        pub struct CTLRH_SPEC;
        impl crate::RegisterSpec for CTLRH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlrh::R](R) reader structure"]
        impl crate::Readable for CTLRH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlrh::W](W) writer structure"]
        impl crate::Writable for CTLRH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLRH to value 0"]
        impl crate::Resettable for CTLRH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLRL register accessor: an alias for `Reg<CTLRL_SPEC>`"]
    pub type CTLRL = crate::Reg<ctlrl::CTLRL_SPEC>;
    #[doc = "RTC Control Register Low"]
    pub mod ctlrl {
        #[doc = "Register `CTLRL` reader"]
        pub struct R(crate::R<CTLRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLRL` writer"]
        pub struct W(crate::W<CTLRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SECF` reader - Second Flag"]
        pub struct SECF_R(crate::FieldReader<bool>);
        impl SECF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SECF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SECF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SECF` writer - Second Flag"]
        pub struct SECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `ALRF` reader - Alarm Flag"]
        pub struct ALRF_R(crate::FieldReader<bool>);
        impl ALRF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ALRF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ALRF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ALRF` writer - Alarm Flag"]
        pub struct ALRF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `OWF` reader - Overflow Flag"]
        pub struct OWF_R(crate::FieldReader<bool>);
        impl OWF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OWF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OWF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OWF` writer - Overflow Flag"]
        pub struct OWF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OWF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RSF` reader - Registers Synchronized Flag"]
        pub struct RSF_R(crate::FieldReader<bool>);
        impl RSF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RSF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSF` writer - Registers Synchronized Flag"]
        pub struct RSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CNF` reader - Configuration Flag"]
        pub struct CNF_R(crate::FieldReader<bool>);
        impl CNF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CNF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNF` writer - Configuration Flag"]
        pub struct CNF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RTOFF` reader - RTC operation OFF"]
        pub struct RTOFF_R(crate::FieldReader<bool>);
        impl RTOFF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTOFF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTOFF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Second Flag"]
            #[inline(always)]
            pub fn secf(&self) -> SECF_R {
                SECF_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Alarm Flag"]
            #[inline(always)]
            pub fn alrf(&self) -> ALRF_R {
                ALRF_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Overflow Flag"]
            #[inline(always)]
            pub fn owf(&self) -> OWF_R {
                OWF_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Registers Synchronized Flag"]
            #[inline(always)]
            pub fn rsf(&self) -> RSF_R {
                RSF_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Configuration Flag"]
            #[inline(always)]
            pub fn cnf(&self) -> CNF_R {
                CNF_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - RTC operation OFF"]
            #[inline(always)]
            pub fn rtoff(&self) -> RTOFF_R {
                RTOFF_R::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Second Flag"]
            #[inline(always)]
            pub fn secf(&mut self) -> SECF_W {
                SECF_W { w: self }
            }
            #[doc = "Bit 1 - Alarm Flag"]
            #[inline(always)]
            pub fn alrf(&mut self) -> ALRF_W {
                ALRF_W { w: self }
            }
            #[doc = "Bit 2 - Overflow Flag"]
            #[inline(always)]
            pub fn owf(&mut self) -> OWF_W {
                OWF_W { w: self }
            }
            #[doc = "Bit 3 - Registers Synchronized Flag"]
            #[inline(always)]
            pub fn rsf(&mut self) -> RSF_W {
                RSF_W { w: self }
            }
            #[doc = "Bit 4 - Configuration Flag"]
            #[inline(always)]
            pub fn cnf(&mut self) -> CNF_W {
                CNF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Control Register Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlrl](index.html) module"]
        pub struct CTLRL_SPEC;
        impl crate::RegisterSpec for CTLRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlrl::R](R) reader structure"]
        impl crate::Readable for CTLRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlrl::W](W) writer structure"]
        impl crate::Writable for CTLRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLRL to value 0x20"]
        impl crate::Resettable for CTLRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x20
            }
        }
    }
    #[doc = "PSCRH register accessor: an alias for `Reg<PSCRH_SPEC>`"]
    pub type PSCRH = crate::Reg<pscrh::PSCRH_SPEC>;
    #[doc = "RTC Prescaler Load Register High"]
    pub mod pscrh {
        #[doc = "Register `PSCRH` writer"]
        pub struct W(crate::W<PSCRH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSCRH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSCRH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSCRH_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PRLH` writer - RTC Prescaler Load Register High"]
        pub struct PRLH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRLH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:3 - RTC Prescaler Load Register High"]
            #[inline(always)]
            pub fn prlh(&mut self) -> PRLH_W {
                PRLH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Prescaler Load Register High\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pscrh](index.html) module"]
        pub struct PSCRH_SPEC;
        impl crate::RegisterSpec for PSCRH_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [pscrh::W](W) writer structure"]
        impl crate::Writable for PSCRH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSCRH to value 0"]
        impl crate::Resettable for PSCRH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSCRL register accessor: an alias for `Reg<PSCRL_SPEC>`"]
    pub type PSCRL = crate::Reg<pscrl::PSCRL_SPEC>;
    #[doc = "RTC Prescaler Load Register Low"]
    pub mod pscrl {
        #[doc = "Register `PSCRL` writer"]
        pub struct W(crate::W<PSCRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSCRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSCRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSCRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PRLL` writer - RTC Prescaler Divider Register Low"]
        pub struct PRLL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRLL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC Prescaler Divider Register Low"]
            #[inline(always)]
            pub fn prll(&mut self) -> PRLL_W {
                PRLL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Prescaler Load Register Low\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pscrl](index.html) module"]
        pub struct PSCRL_SPEC;
        impl crate::RegisterSpec for PSCRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [pscrl::W](W) writer structure"]
        impl crate::Writable for PSCRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSCRL to value 0x8000"]
        impl crate::Resettable for PSCRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x8000
            }
        }
    }
    #[doc = "DIVH register accessor: an alias for `Reg<DIVH_SPEC>`"]
    pub type DIVH = crate::Reg<divh::DIVH_SPEC>;
    #[doc = "RTC Prescaler Divider Register High"]
    pub mod divh {
        #[doc = "Register `DIVH` reader"]
        pub struct R(crate::R<DIVH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIVH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIVH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIVH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `DIVH` reader - RTC prescaler divider register high"]
        pub struct DIVH_R(crate::FieldReader<u8>);
        impl DIVH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DIVH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIVH_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:3 - RTC prescaler divider register high"]
            #[inline(always)]
            pub fn divh(&self) -> DIVH_R {
                DIVH_R::new((self.bits & 0x0f) as u8)
            }
        }
        #[doc = "RTC Prescaler Divider Register High\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [divh](index.html) module"]
        pub struct DIVH_SPEC;
        impl crate::RegisterSpec for DIVH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [divh::R](R) reader structure"]
        impl crate::Readable for DIVH_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DIVH to value 0"]
        impl crate::Resettable for DIVH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIVL register accessor: an alias for `Reg<DIVL_SPEC>`"]
    pub type DIVL = crate::Reg<divl::DIVL_SPEC>;
    #[doc = "RTC Prescaler Divider Register Low"]
    pub mod divl {
        #[doc = "Register `DIVL` reader"]
        pub struct R(crate::R<DIVL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIVL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIVL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIVL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `DIVL` reader - RTC prescaler divider register Low"]
        pub struct DIVL_R(crate::FieldReader<u16>);
        impl DIVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DIVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIVL_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - RTC prescaler divider register Low"]
            #[inline(always)]
            pub fn divl(&self) -> DIVL_R {
                DIVL_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "RTC Prescaler Divider Register Low\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [divl](index.html) module"]
        pub struct DIVL_SPEC;
        impl crate::RegisterSpec for DIVL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [divl::R](R) reader structure"]
        impl crate::Readable for DIVL_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DIVL to value 0x8000"]
        impl crate::Resettable for DIVL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x8000
            }
        }
    }
    #[doc = "CNTH register accessor: an alias for `Reg<CNTH_SPEC>`"]
    pub type CNTH = crate::Reg<cnth::CNTH_SPEC>;
    #[doc = "RTC Counter Register High"]
    pub mod cnth {
        #[doc = "Register `CNTH` reader"]
        pub struct R(crate::R<CNTH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTH` writer"]
        pub struct W(crate::W<CNTH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTH_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CNTH` reader - RTC counter register high"]
        pub struct CNTH_R(crate::FieldReader<u16>);
        impl CNTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CNTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNTH_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNTH` writer - RTC counter register high"]
        pub struct CNTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - RTC counter register high"]
            #[inline(always)]
            pub fn cnth(&self) -> CNTH_R {
                CNTH_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC counter register high"]
            #[inline(always)]
            pub fn cnth(&mut self) -> CNTH_W {
                CNTH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Counter Register High\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnth](index.html) module"]
        pub struct CNTH_SPEC;
        impl crate::RegisterSpec for CNTH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnth::R](R) reader structure"]
        impl crate::Readable for CNTH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnth::W](W) writer structure"]
        impl crate::Writable for CNTH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTH to value 0"]
        impl crate::Resettable for CNTH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTL register accessor: an alias for `Reg<CNTL_SPEC>`"]
    pub type CNTL = crate::Reg<cntl::CNTL_SPEC>;
    #[doc = "RTC Counter Register Low"]
    pub mod cntl {
        #[doc = "Register `CNTL` reader"]
        pub struct R(crate::R<CNTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTL` writer"]
        pub struct W(crate::W<CNTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CNTL` reader - RTC counter register Low"]
        pub struct CNTL_R(crate::FieldReader<u16>);
        impl CNTL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CNTL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNTL_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNTL` writer - RTC counter register Low"]
        pub struct CNTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - RTC counter register Low"]
            #[inline(always)]
            pub fn cntl(&self) -> CNTL_R {
                CNTL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC counter register Low"]
            #[inline(always)]
            pub fn cntl(&mut self) -> CNTL_W {
                CNTL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Counter Register Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntl](index.html) module"]
        pub struct CNTL_SPEC;
        impl crate::RegisterSpec for CNTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntl::R](R) reader structure"]
        impl crate::Readable for CNTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntl::W](W) writer structure"]
        impl crate::Writable for CNTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTL to value 0"]
        impl crate::Resettable for CNTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ALRMH register accessor: an alias for `Reg<ALRMH_SPEC>`"]
    pub type ALRMH = crate::Reg<alrmh::ALRMH_SPEC>;
    #[doc = "RTC Alarm Register High"]
    pub mod alrmh {
        #[doc = "Register `ALRMH` writer"]
        pub struct W(crate::W<ALRMH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ALRMH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ALRMH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ALRMH_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ALRH` writer - RTC alarm register high"]
        pub struct ALRH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC alarm register high"]
            #[inline(always)]
            pub fn alrh(&mut self) -> ALRH_W {
                ALRH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Alarm Register High\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmh](index.html) module"]
        pub struct ALRMH_SPEC;
        impl crate::RegisterSpec for ALRMH_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [alrmh::W](W) writer structure"]
        impl crate::Writable for ALRMH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ALRMH to value 0xffff"]
        impl crate::Resettable for ALRMH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xffff
            }
        }
    }
    #[doc = "ALRML register accessor: an alias for `Reg<ALRML_SPEC>`"]
    pub type ALRML = crate::Reg<alrml::ALRML_SPEC>;
    #[doc = "RTC Alarm Register Low"]
    pub mod alrml {
        #[doc = "Register `ALRML` writer"]
        pub struct W(crate::W<ALRML_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ALRML_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ALRML_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ALRML_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ALRL` writer - RTC alarm register low"]
        pub struct ALRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC alarm register low"]
            #[inline(always)]
            pub fn alrl(&mut self) -> ALRL_W {
                ALRL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC Alarm Register Low\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrml](index.html) module"]
        pub struct ALRML_SPEC;
        impl crate::RegisterSpec for ALRML_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [alrml::W](W) writer structure"]
        impl crate::Writable for ALRML_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ALRML to value 0xffff"]
        impl crate::Resettable for ALRML_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xffff
            }
        }
    }
}
#[doc = "Backup registers"]
pub struct BKP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BKP {}
impl BKP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bkp::RegisterBlock = 0x4000_6c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bkp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BKP {
    type Target = bkp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BKP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BKP").finish()
    }
}
#[doc = "Backup registers"]
pub mod bkp {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Backup data register (BKP_DR)"]
        pub datar1: crate::Reg<datar1::DATAR1_SPEC>,
        #[doc = "0x04 - Backup data register (BKP_DR)"]
        pub datar2: crate::Reg<datar2::DATAR2_SPEC>,
        #[doc = "0x08 - Backup data register (BKP_DR)"]
        pub datar3: crate::Reg<datar3::DATAR3_SPEC>,
        #[doc = "0x0c - Backup data register (BKP_DR)"]
        pub datar4: crate::Reg<datar4::DATAR4_SPEC>,
        #[doc = "0x10 - Backup data register (BKP_DR)"]
        pub datar5: crate::Reg<datar5::DATAR5_SPEC>,
        #[doc = "0x14 - Backup data register (BKP_DR)"]
        pub datar6: crate::Reg<datar6::DATAR6_SPEC>,
        #[doc = "0x18 - Backup data register (BKP_DR)"]
        pub datar7: crate::Reg<datar7::DATAR7_SPEC>,
        #[doc = "0x1c - Backup data register (BKP_DR)"]
        pub datar8: crate::Reg<datar8::DATAR8_SPEC>,
        #[doc = "0x20 - Backup data register (BKP_DR)"]
        pub datar9: crate::Reg<datar9::DATAR9_SPEC>,
        #[doc = "0x24 - Backup data register (BKP_DR)"]
        pub datar10: crate::Reg<datar10::DATAR10_SPEC>,
        #[doc = "0x28 - RTC clock calibration register (BKP_OCTLR)"]
        pub octlr: crate::Reg<octlr::OCTLR_SPEC>,
        #[doc = "0x2c - Backup control register (BKP_TPCTLR)"]
        pub tpctlr: crate::Reg<tpctlr::TPCTLR_SPEC>,
        #[doc = "0x30 - BKP_TPCSR control/status register (BKP_CSR)"]
        pub tpcsr: crate::Reg<tpcsr::TPCSR_SPEC>,
        _reserved13: [u8; 0x08],
        #[doc = "0x3c - Backup data register (BKP_DR)"]
        pub datar11: crate::Reg<datar11::DATAR11_SPEC>,
        #[doc = "0x40 - Backup data register (BKP_DR)"]
        pub datar12: crate::Reg<datar12::DATAR12_SPEC>,
        #[doc = "0x44 - Backup data register (BKP_DR)"]
        pub datar13: crate::Reg<datar13::DATAR13_SPEC>,
        #[doc = "0x48 - Backup data register (BKP_DR)"]
        pub datar14: crate::Reg<datar14::DATAR14_SPEC>,
        #[doc = "0x4c - Backup data register (BKP_DR)"]
        pub datar15: crate::Reg<datar15::DATAR15_SPEC>,
        #[doc = "0x50 - Backup data register (BKP_DR)"]
        pub datar16: crate::Reg<datar16::DATAR16_SPEC>,
        #[doc = "0x54 - Backup data register (BKP_DR)"]
        pub datar17: crate::Reg<datar17::DATAR17_SPEC>,
        #[doc = "0x58 - Backup data register (BKP_DR)"]
        pub datar18: crate::Reg<datar18::DATAR18_SPEC>,
        #[doc = "0x5c - Backup data register (BKP_DR)"]
        pub datar19: crate::Reg<datar19::DATAR19_SPEC>,
        #[doc = "0x60 - Backup data register (BKP_DR)"]
        pub datar20: crate::Reg<datar20::DATAR20_SPEC>,
        #[doc = "0x64 - Backup data register (BKP_DR)"]
        pub datar21: crate::Reg<datar21::DATAR21_SPEC>,
        #[doc = "0x68 - Backup data register (BKP_DR)"]
        pub datar22: crate::Reg<datar22::DATAR22_SPEC>,
        #[doc = "0x6c - Backup data register (BKP_DR)"]
        pub datar23: crate::Reg<datar23::DATAR23_SPEC>,
        #[doc = "0x70 - Backup data register (BKP_DR)"]
        pub datar24: crate::Reg<datar24::DATAR24_SPEC>,
        #[doc = "0x74 - Backup data register (BKP_DR)"]
        pub datar25: crate::Reg<datar25::DATAR25_SPEC>,
        #[doc = "0x78 - Backup data register (BKP_DR)"]
        pub datar26: crate::Reg<datar26::DATAR26_SPEC>,
        #[doc = "0x7c - Backup data register (BKP_DR)"]
        pub datar27: crate::Reg<datar27::DATAR27_SPEC>,
        #[doc = "0x80 - Backup data register (BKP_DR)"]
        pub datar28: crate::Reg<datar28::DATAR28_SPEC>,
        #[doc = "0x84 - Backup data register (BKP_DR)"]
        pub datar29: crate::Reg<datar29::DATAR29_SPEC>,
        #[doc = "0x88 - Backup data register (BKP_DR)"]
        pub datar30: crate::Reg<datar30::DATAR30_SPEC>,
        #[doc = "0x8c - Backup data register (BKP_DR)"]
        pub datar31: crate::Reg<datar31::DATAR31_SPEC>,
        #[doc = "0x90 - Backup data register (BKP_DR)"]
        pub datar32: crate::Reg<datar32::DATAR32_SPEC>,
        #[doc = "0x94 - Backup data register (BKP_DR)"]
        pub datar33: crate::Reg<datar33::DATAR33_SPEC>,
        #[doc = "0x98 - Backup data register (BKP_DR)"]
        pub datar34: crate::Reg<datar34::DATAR34_SPEC>,
        #[doc = "0x9c - Backup data register (BKP_DR)"]
        pub datar35: crate::Reg<datar35::DATAR35_SPEC>,
        #[doc = "0xa0 - Backup data register (BKP_DR)"]
        pub datar36: crate::Reg<datar36::DATAR36_SPEC>,
        #[doc = "0xa4 - Backup data register (BKP_DR)"]
        pub datar37: crate::Reg<datar37::DATAR37_SPEC>,
        #[doc = "0xa8 - Backup data register (BKP_DR)"]
        pub datar38: crate::Reg<datar38::DATAR38_SPEC>,
        #[doc = "0xac - Backup data register (BKP_DR)"]
        pub datar39: crate::Reg<datar39::DATAR39_SPEC>,
        #[doc = "0xb0 - Backup data register (BKP_DR)"]
        pub datar40: crate::Reg<datar40::DATAR40_SPEC>,
        #[doc = "0xb4 - Backup data register (BKP_DR)"]
        pub datar41: crate::Reg<datar41::DATAR41_SPEC>,
        #[doc = "0xb8 - Backup data register (BKP_DR)"]
        pub datar42: crate::Reg<datar42::DATAR42_SPEC>,
    }
    #[doc = "DATAR1 register accessor: an alias for `Reg<DATAR1_SPEC>`"]
    pub type DATAR1 = crate::Reg<datar1::DATAR1_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar1 {
        #[doc = "Register `DATAR1` reader"]
        pub struct R(crate::R<DATAR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR1` writer"]
        pub struct W(crate::W<DATAR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D1` reader - Backup data"]
        pub struct D1_R(crate::FieldReader<u16>);
        impl D1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D1_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D1` writer - Backup data"]
        pub struct D1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d1(&self) -> D1_R {
                D1_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d1(&mut self) -> D1_W {
                D1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar1](index.html) module"]
        pub struct DATAR1_SPEC;
        impl crate::RegisterSpec for DATAR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar1::R](R) reader structure"]
        impl crate::Readable for DATAR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar1::W](W) writer structure"]
        impl crate::Writable for DATAR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR1 to value 0"]
        impl crate::Resettable for DATAR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR2 register accessor: an alias for `Reg<DATAR2_SPEC>`"]
    pub type DATAR2 = crate::Reg<datar2::DATAR2_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar2 {
        #[doc = "Register `DATAR2` reader"]
        pub struct R(crate::R<DATAR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR2` writer"]
        pub struct W(crate::W<DATAR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D2` reader - Backup data"]
        pub struct D2_R(crate::FieldReader<u16>);
        impl D2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D2_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D2` writer - Backup data"]
        pub struct D2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d2(&self) -> D2_R {
                D2_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d2(&mut self) -> D2_W {
                D2_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar2](index.html) module"]
        pub struct DATAR2_SPEC;
        impl crate::RegisterSpec for DATAR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar2::R](R) reader structure"]
        impl crate::Readable for DATAR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar2::W](W) writer structure"]
        impl crate::Writable for DATAR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR2 to value 0"]
        impl crate::Resettable for DATAR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR3 register accessor: an alias for `Reg<DATAR3_SPEC>`"]
    pub type DATAR3 = crate::Reg<datar3::DATAR3_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar3 {
        #[doc = "Register `DATAR3` reader"]
        pub struct R(crate::R<DATAR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR3` writer"]
        pub struct W(crate::W<DATAR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D3` reader - Backup data"]
        pub struct D3_R(crate::FieldReader<u16>);
        impl D3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D3_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D3` writer - Backup data"]
        pub struct D3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d3(&self) -> D3_R {
                D3_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d3(&mut self) -> D3_W {
                D3_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar3](index.html) module"]
        pub struct DATAR3_SPEC;
        impl crate::RegisterSpec for DATAR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar3::R](R) reader structure"]
        impl crate::Readable for DATAR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar3::W](W) writer structure"]
        impl crate::Writable for DATAR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR3 to value 0"]
        impl crate::Resettable for DATAR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR4 register accessor: an alias for `Reg<DATAR4_SPEC>`"]
    pub type DATAR4 = crate::Reg<datar4::DATAR4_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar4 {
        #[doc = "Register `DATAR4` reader"]
        pub struct R(crate::R<DATAR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR4` writer"]
        pub struct W(crate::W<DATAR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D4` reader - Backup data"]
        pub struct D4_R(crate::FieldReader<u16>);
        impl D4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D4_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D4` writer - Backup data"]
        pub struct D4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d4(&self) -> D4_R {
                D4_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d4(&mut self) -> D4_W {
                D4_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar4](index.html) module"]
        pub struct DATAR4_SPEC;
        impl crate::RegisterSpec for DATAR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar4::R](R) reader structure"]
        impl crate::Readable for DATAR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar4::W](W) writer structure"]
        impl crate::Writable for DATAR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR4 to value 0"]
        impl crate::Resettable for DATAR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR5 register accessor: an alias for `Reg<DATAR5_SPEC>`"]
    pub type DATAR5 = crate::Reg<datar5::DATAR5_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar5 {
        #[doc = "Register `DATAR5` reader"]
        pub struct R(crate::R<DATAR5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR5` writer"]
        pub struct W(crate::W<DATAR5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR5_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D5` reader - Backup data"]
        pub struct D5_R(crate::FieldReader<u16>);
        impl D5_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D5_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D5` writer - Backup data"]
        pub struct D5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d5(&self) -> D5_R {
                D5_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d5(&mut self) -> D5_W {
                D5_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar5](index.html) module"]
        pub struct DATAR5_SPEC;
        impl crate::RegisterSpec for DATAR5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar5::R](R) reader structure"]
        impl crate::Readable for DATAR5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar5::W](W) writer structure"]
        impl crate::Writable for DATAR5_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR5 to value 0"]
        impl crate::Resettable for DATAR5_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR6 register accessor: an alias for `Reg<DATAR6_SPEC>`"]
    pub type DATAR6 = crate::Reg<datar6::DATAR6_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar6 {
        #[doc = "Register `DATAR6` reader"]
        pub struct R(crate::R<DATAR6_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR6_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR6_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR6` writer"]
        pub struct W(crate::W<DATAR6_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR6_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR6_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D6` reader - Backup data"]
        pub struct D6_R(crate::FieldReader<u16>);
        impl D6_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D6_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D6` writer - Backup data"]
        pub struct D6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d6(&self) -> D6_R {
                D6_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d6(&mut self) -> D6_W {
                D6_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar6](index.html) module"]
        pub struct DATAR6_SPEC;
        impl crate::RegisterSpec for DATAR6_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar6::R](R) reader structure"]
        impl crate::Readable for DATAR6_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar6::W](W) writer structure"]
        impl crate::Writable for DATAR6_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR6 to value 0"]
        impl crate::Resettable for DATAR6_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR7 register accessor: an alias for `Reg<DATAR7_SPEC>`"]
    pub type DATAR7 = crate::Reg<datar7::DATAR7_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar7 {
        #[doc = "Register `DATAR7` reader"]
        pub struct R(crate::R<DATAR7_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR7_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR7_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR7` writer"]
        pub struct W(crate::W<DATAR7_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR7_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR7_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D7` reader - Backup data"]
        pub struct D7_R(crate::FieldReader<u16>);
        impl D7_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D7_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D7` writer - Backup data"]
        pub struct D7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d7(&self) -> D7_R {
                D7_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d7(&mut self) -> D7_W {
                D7_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar7](index.html) module"]
        pub struct DATAR7_SPEC;
        impl crate::RegisterSpec for DATAR7_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar7::R](R) reader structure"]
        impl crate::Readable for DATAR7_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar7::W](W) writer structure"]
        impl crate::Writable for DATAR7_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR7 to value 0"]
        impl crate::Resettable for DATAR7_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR8 register accessor: an alias for `Reg<DATAR8_SPEC>`"]
    pub type DATAR8 = crate::Reg<datar8::DATAR8_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar8 {
        #[doc = "Register `DATAR8` reader"]
        pub struct R(crate::R<DATAR8_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR8_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR8_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR8_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR8` writer"]
        pub struct W(crate::W<DATAR8_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR8_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR8_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR8_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D8` reader - Backup data"]
        pub struct D8_R(crate::FieldReader<u16>);
        impl D8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D8_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D8` writer - Backup data"]
        pub struct D8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d8(&self) -> D8_R {
                D8_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d8(&mut self) -> D8_W {
                D8_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar8](index.html) module"]
        pub struct DATAR8_SPEC;
        impl crate::RegisterSpec for DATAR8_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar8::R](R) reader structure"]
        impl crate::Readable for DATAR8_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar8::W](W) writer structure"]
        impl crate::Writable for DATAR8_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR8 to value 0"]
        impl crate::Resettable for DATAR8_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR9 register accessor: an alias for `Reg<DATAR9_SPEC>`"]
    pub type DATAR9 = crate::Reg<datar9::DATAR9_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar9 {
        #[doc = "Register `DATAR9` reader"]
        pub struct R(crate::R<DATAR9_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR9_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR9_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR9_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR9` writer"]
        pub struct W(crate::W<DATAR9_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR9_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR9_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR9_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D9` reader - Backup data"]
        pub struct D9_R(crate::FieldReader<u16>);
        impl D9_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D9_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D9` writer - Backup data"]
        pub struct D9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d9(&self) -> D9_R {
                D9_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d9(&mut self) -> D9_W {
                D9_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar9](index.html) module"]
        pub struct DATAR9_SPEC;
        impl crate::RegisterSpec for DATAR9_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar9::R](R) reader structure"]
        impl crate::Readable for DATAR9_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar9::W](W) writer structure"]
        impl crate::Writable for DATAR9_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR9 to value 0"]
        impl crate::Resettable for DATAR9_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR10 register accessor: an alias for `Reg<DATAR10_SPEC>`"]
    pub type DATAR10 = crate::Reg<datar10::DATAR10_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar10 {
        #[doc = "Register `DATAR10` reader"]
        pub struct R(crate::R<DATAR10_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR10_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR10_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR10_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR10` writer"]
        pub struct W(crate::W<DATAR10_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR10_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR10_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR10_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D10` reader - Backup data"]
        pub struct D10_R(crate::FieldReader<u16>);
        impl D10_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D10_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D10` writer - Backup data"]
        pub struct D10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d10(&self) -> D10_R {
                D10_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d10(&mut self) -> D10_W {
                D10_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar10](index.html) module"]
        pub struct DATAR10_SPEC;
        impl crate::RegisterSpec for DATAR10_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar10::R](R) reader structure"]
        impl crate::Readable for DATAR10_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar10::W](W) writer structure"]
        impl crate::Writable for DATAR10_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR10 to value 0"]
        impl crate::Resettable for DATAR10_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR11 register accessor: an alias for `Reg<DATAR11_SPEC>`"]
    pub type DATAR11 = crate::Reg<datar11::DATAR11_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar11 {
        #[doc = "Register `DATAR11` reader"]
        pub struct R(crate::R<DATAR11_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR11_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR11_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR11_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR11` writer"]
        pub struct W(crate::W<DATAR11_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR11_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR11_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR11_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DR11` reader - Backup data"]
        pub struct DR11_R(crate::FieldReader<u16>);
        impl DR11_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DR11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DR11_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DR11` writer - Backup data"]
        pub struct DR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn dr11(&self) -> DR11_R {
                DR11_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn dr11(&mut self) -> DR11_W {
                DR11_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar11](index.html) module"]
        pub struct DATAR11_SPEC;
        impl crate::RegisterSpec for DATAR11_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar11::R](R) reader structure"]
        impl crate::Readable for DATAR11_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar11::W](W) writer structure"]
        impl crate::Writable for DATAR11_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR11 to value 0"]
        impl crate::Resettable for DATAR11_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR12 register accessor: an alias for `Reg<DATAR12_SPEC>`"]
    pub type DATAR12 = crate::Reg<datar12::DATAR12_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar12 {
        #[doc = "Register `DATAR12` reader"]
        pub struct R(crate::R<DATAR12_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR12_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR12_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR12_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR12` writer"]
        pub struct W(crate::W<DATAR12_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR12_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR12_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR12_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DR12` reader - Backup data"]
        pub struct DR12_R(crate::FieldReader<u16>);
        impl DR12_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DR12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DR12_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DR12` writer - Backup data"]
        pub struct DR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn dr12(&self) -> DR12_R {
                DR12_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn dr12(&mut self) -> DR12_W {
                DR12_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar12](index.html) module"]
        pub struct DATAR12_SPEC;
        impl crate::RegisterSpec for DATAR12_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar12::R](R) reader structure"]
        impl crate::Readable for DATAR12_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar12::W](W) writer structure"]
        impl crate::Writable for DATAR12_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR12 to value 0"]
        impl crate::Resettable for DATAR12_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR13 register accessor: an alias for `Reg<DATAR13_SPEC>`"]
    pub type DATAR13 = crate::Reg<datar13::DATAR13_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar13 {
        #[doc = "Register `DATAR13` reader"]
        pub struct R(crate::R<DATAR13_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR13_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR13_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR13_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR13` writer"]
        pub struct W(crate::W<DATAR13_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR13_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR13_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR13_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DR13` reader - Backup data"]
        pub struct DR13_R(crate::FieldReader<u16>);
        impl DR13_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DR13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DR13_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DR13` writer - Backup data"]
        pub struct DR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn dr13(&self) -> DR13_R {
                DR13_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn dr13(&mut self) -> DR13_W {
                DR13_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar13](index.html) module"]
        pub struct DATAR13_SPEC;
        impl crate::RegisterSpec for DATAR13_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar13::R](R) reader structure"]
        impl crate::Readable for DATAR13_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar13::W](W) writer structure"]
        impl crate::Writable for DATAR13_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR13 to value 0"]
        impl crate::Resettable for DATAR13_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR14 register accessor: an alias for `Reg<DATAR14_SPEC>`"]
    pub type DATAR14 = crate::Reg<datar14::DATAR14_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar14 {
        #[doc = "Register `DATAR14` reader"]
        pub struct R(crate::R<DATAR14_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR14_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR14_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR14_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR14` writer"]
        pub struct W(crate::W<DATAR14_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR14_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR14_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR14_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D14` reader - Backup data"]
        pub struct D14_R(crate::FieldReader<u16>);
        impl D14_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D14_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D14` writer - Backup data"]
        pub struct D14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d14(&self) -> D14_R {
                D14_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d14(&mut self) -> D14_W {
                D14_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar14](index.html) module"]
        pub struct DATAR14_SPEC;
        impl crate::RegisterSpec for DATAR14_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar14::R](R) reader structure"]
        impl crate::Readable for DATAR14_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar14::W](W) writer structure"]
        impl crate::Writable for DATAR14_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR14 to value 0"]
        impl crate::Resettable for DATAR14_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR15 register accessor: an alias for `Reg<DATAR15_SPEC>`"]
    pub type DATAR15 = crate::Reg<datar15::DATAR15_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar15 {
        #[doc = "Register `DATAR15` reader"]
        pub struct R(crate::R<DATAR15_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR15_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR15_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR15_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR15` writer"]
        pub struct W(crate::W<DATAR15_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR15_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR15_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR15_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D15` reader - Backup data"]
        pub struct D15_R(crate::FieldReader<u16>);
        impl D15_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D15_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D15` writer - Backup data"]
        pub struct D15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d15(&self) -> D15_R {
                D15_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d15(&mut self) -> D15_W {
                D15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar15](index.html) module"]
        pub struct DATAR15_SPEC;
        impl crate::RegisterSpec for DATAR15_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar15::R](R) reader structure"]
        impl crate::Readable for DATAR15_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar15::W](W) writer structure"]
        impl crate::Writable for DATAR15_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR15 to value 0"]
        impl crate::Resettable for DATAR15_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR16 register accessor: an alias for `Reg<DATAR16_SPEC>`"]
    pub type DATAR16 = crate::Reg<datar16::DATAR16_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar16 {
        #[doc = "Register `DATAR16` reader"]
        pub struct R(crate::R<DATAR16_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR16_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR16_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR16_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR16` writer"]
        pub struct W(crate::W<DATAR16_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR16_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR16_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR16_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D16` reader - Backup data"]
        pub struct D16_R(crate::FieldReader<u16>);
        impl D16_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D16_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D16` writer - Backup data"]
        pub struct D16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D16_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d16(&self) -> D16_R {
                D16_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d16(&mut self) -> D16_W {
                D16_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar16](index.html) module"]
        pub struct DATAR16_SPEC;
        impl crate::RegisterSpec for DATAR16_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar16::R](R) reader structure"]
        impl crate::Readable for DATAR16_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar16::W](W) writer structure"]
        impl crate::Writable for DATAR16_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR16 to value 0"]
        impl crate::Resettable for DATAR16_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR17 register accessor: an alias for `Reg<DATAR17_SPEC>`"]
    pub type DATAR17 = crate::Reg<datar17::DATAR17_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar17 {
        #[doc = "Register `DATAR17` reader"]
        pub struct R(crate::R<DATAR17_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR17_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR17_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR17_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR17` writer"]
        pub struct W(crate::W<DATAR17_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR17_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR17_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR17_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D17` reader - Backup data"]
        pub struct D17_R(crate::FieldReader<u16>);
        impl D17_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D17_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D17` writer - Backup data"]
        pub struct D17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D17_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d17(&self) -> D17_R {
                D17_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d17(&mut self) -> D17_W {
                D17_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar17](index.html) module"]
        pub struct DATAR17_SPEC;
        impl crate::RegisterSpec for DATAR17_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar17::R](R) reader structure"]
        impl crate::Readable for DATAR17_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar17::W](W) writer structure"]
        impl crate::Writable for DATAR17_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR17 to value 0"]
        impl crate::Resettable for DATAR17_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR18 register accessor: an alias for `Reg<DATAR18_SPEC>`"]
    pub type DATAR18 = crate::Reg<datar18::DATAR18_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar18 {
        #[doc = "Register `DATAR18` reader"]
        pub struct R(crate::R<DATAR18_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR18_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR18_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR18_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR18` writer"]
        pub struct W(crate::W<DATAR18_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR18_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR18_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR18_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D18` reader - Backup data"]
        pub struct D18_R(crate::FieldReader<u16>);
        impl D18_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D18_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D18` writer - Backup data"]
        pub struct D18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D18_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d18(&self) -> D18_R {
                D18_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d18(&mut self) -> D18_W {
                D18_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar18](index.html) module"]
        pub struct DATAR18_SPEC;
        impl crate::RegisterSpec for DATAR18_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar18::R](R) reader structure"]
        impl crate::Readable for DATAR18_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar18::W](W) writer structure"]
        impl crate::Writable for DATAR18_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR18 to value 0"]
        impl crate::Resettable for DATAR18_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR19 register accessor: an alias for `Reg<DATAR19_SPEC>`"]
    pub type DATAR19 = crate::Reg<datar19::DATAR19_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar19 {
        #[doc = "Register `DATAR19` reader"]
        pub struct R(crate::R<DATAR19_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR19_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR19_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR19_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR19` writer"]
        pub struct W(crate::W<DATAR19_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR19_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR19_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR19_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D19` reader - Backup data"]
        pub struct D19_R(crate::FieldReader<u16>);
        impl D19_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D19_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D19` writer - Backup data"]
        pub struct D19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D19_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d19(&self) -> D19_R {
                D19_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d19(&mut self) -> D19_W {
                D19_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar19](index.html) module"]
        pub struct DATAR19_SPEC;
        impl crate::RegisterSpec for DATAR19_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar19::R](R) reader structure"]
        impl crate::Readable for DATAR19_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar19::W](W) writer structure"]
        impl crate::Writable for DATAR19_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR19 to value 0"]
        impl crate::Resettable for DATAR19_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR20 register accessor: an alias for `Reg<DATAR20_SPEC>`"]
    pub type DATAR20 = crate::Reg<datar20::DATAR20_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar20 {
        #[doc = "Register `DATAR20` reader"]
        pub struct R(crate::R<DATAR20_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR20_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR20_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR20_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR20` writer"]
        pub struct W(crate::W<DATAR20_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR20_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR20_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR20_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D20` reader - Backup data"]
        pub struct D20_R(crate::FieldReader<u16>);
        impl D20_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D20_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D20` writer - Backup data"]
        pub struct D20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D20_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d20(&self) -> D20_R {
                D20_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d20(&mut self) -> D20_W {
                D20_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar20](index.html) module"]
        pub struct DATAR20_SPEC;
        impl crate::RegisterSpec for DATAR20_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar20::R](R) reader structure"]
        impl crate::Readable for DATAR20_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar20::W](W) writer structure"]
        impl crate::Writable for DATAR20_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR20 to value 0"]
        impl crate::Resettable for DATAR20_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR21 register accessor: an alias for `Reg<DATAR21_SPEC>`"]
    pub type DATAR21 = crate::Reg<datar21::DATAR21_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar21 {
        #[doc = "Register `DATAR21` reader"]
        pub struct R(crate::R<DATAR21_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR21_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR21_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR21_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR21` writer"]
        pub struct W(crate::W<DATAR21_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR21_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR21_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR21_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D21` reader - Backup data"]
        pub struct D21_R(crate::FieldReader<u16>);
        impl D21_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D21_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D21` writer - Backup data"]
        pub struct D21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D21_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d21(&self) -> D21_R {
                D21_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d21(&mut self) -> D21_W {
                D21_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar21](index.html) module"]
        pub struct DATAR21_SPEC;
        impl crate::RegisterSpec for DATAR21_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar21::R](R) reader structure"]
        impl crate::Readable for DATAR21_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar21::W](W) writer structure"]
        impl crate::Writable for DATAR21_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR21 to value 0"]
        impl crate::Resettable for DATAR21_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR22 register accessor: an alias for `Reg<DATAR22_SPEC>`"]
    pub type DATAR22 = crate::Reg<datar22::DATAR22_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar22 {
        #[doc = "Register `DATAR22` reader"]
        pub struct R(crate::R<DATAR22_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR22_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR22_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR22_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR22` writer"]
        pub struct W(crate::W<DATAR22_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR22_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR22_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR22_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D22` reader - Backup data"]
        pub struct D22_R(crate::FieldReader<u16>);
        impl D22_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D22_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D22` writer - Backup data"]
        pub struct D22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D22_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d22(&self) -> D22_R {
                D22_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d22(&mut self) -> D22_W {
                D22_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar22](index.html) module"]
        pub struct DATAR22_SPEC;
        impl crate::RegisterSpec for DATAR22_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar22::R](R) reader structure"]
        impl crate::Readable for DATAR22_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar22::W](W) writer structure"]
        impl crate::Writable for DATAR22_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR22 to value 0"]
        impl crate::Resettable for DATAR22_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR23 register accessor: an alias for `Reg<DATAR23_SPEC>`"]
    pub type DATAR23 = crate::Reg<datar23::DATAR23_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar23 {
        #[doc = "Register `DATAR23` reader"]
        pub struct R(crate::R<DATAR23_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR23_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR23_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR23_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR23` writer"]
        pub struct W(crate::W<DATAR23_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR23_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR23_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR23_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D23` reader - Backup data"]
        pub struct D23_R(crate::FieldReader<u16>);
        impl D23_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D23_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D23` writer - Backup data"]
        pub struct D23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D23_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d23(&self) -> D23_R {
                D23_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d23(&mut self) -> D23_W {
                D23_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar23](index.html) module"]
        pub struct DATAR23_SPEC;
        impl crate::RegisterSpec for DATAR23_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar23::R](R) reader structure"]
        impl crate::Readable for DATAR23_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar23::W](W) writer structure"]
        impl crate::Writable for DATAR23_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR23 to value 0"]
        impl crate::Resettable for DATAR23_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR24 register accessor: an alias for `Reg<DATAR24_SPEC>`"]
    pub type DATAR24 = crate::Reg<datar24::DATAR24_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar24 {
        #[doc = "Register `DATAR24` reader"]
        pub struct R(crate::R<DATAR24_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR24_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR24_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR24_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR24` writer"]
        pub struct W(crate::W<DATAR24_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR24_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR24_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR24_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D24` reader - Backup data"]
        pub struct D24_R(crate::FieldReader<u16>);
        impl D24_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D24_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D24` writer - Backup data"]
        pub struct D24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D24_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d24(&self) -> D24_R {
                D24_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d24(&mut self) -> D24_W {
                D24_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar24](index.html) module"]
        pub struct DATAR24_SPEC;
        impl crate::RegisterSpec for DATAR24_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar24::R](R) reader structure"]
        impl crate::Readable for DATAR24_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar24::W](W) writer structure"]
        impl crate::Writable for DATAR24_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR24 to value 0"]
        impl crate::Resettable for DATAR24_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR25 register accessor: an alias for `Reg<DATAR25_SPEC>`"]
    pub type DATAR25 = crate::Reg<datar25::DATAR25_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar25 {
        #[doc = "Register `DATAR25` reader"]
        pub struct R(crate::R<DATAR25_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR25_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR25_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR25_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR25` writer"]
        pub struct W(crate::W<DATAR25_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR25_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR25_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR25_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D25` reader - Backup data"]
        pub struct D25_R(crate::FieldReader<u16>);
        impl D25_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D25_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D25` writer - Backup data"]
        pub struct D25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D25_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d25(&self) -> D25_R {
                D25_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d25(&mut self) -> D25_W {
                D25_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar25](index.html) module"]
        pub struct DATAR25_SPEC;
        impl crate::RegisterSpec for DATAR25_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar25::R](R) reader structure"]
        impl crate::Readable for DATAR25_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar25::W](W) writer structure"]
        impl crate::Writable for DATAR25_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR25 to value 0"]
        impl crate::Resettable for DATAR25_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR26 register accessor: an alias for `Reg<DATAR26_SPEC>`"]
    pub type DATAR26 = crate::Reg<datar26::DATAR26_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar26 {
        #[doc = "Register `DATAR26` reader"]
        pub struct R(crate::R<DATAR26_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR26_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR26_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR26_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR26` writer"]
        pub struct W(crate::W<DATAR26_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR26_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR26_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR26_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D26` reader - Backup data"]
        pub struct D26_R(crate::FieldReader<u16>);
        impl D26_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D26_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D26` writer - Backup data"]
        pub struct D26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D26_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d26(&self) -> D26_R {
                D26_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d26(&mut self) -> D26_W {
                D26_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar26](index.html) module"]
        pub struct DATAR26_SPEC;
        impl crate::RegisterSpec for DATAR26_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar26::R](R) reader structure"]
        impl crate::Readable for DATAR26_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar26::W](W) writer structure"]
        impl crate::Writable for DATAR26_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR26 to value 0"]
        impl crate::Resettable for DATAR26_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR27 register accessor: an alias for `Reg<DATAR27_SPEC>`"]
    pub type DATAR27 = crate::Reg<datar27::DATAR27_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar27 {
        #[doc = "Register `DATAR27` reader"]
        pub struct R(crate::R<DATAR27_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR27_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR27_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR27_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR27` writer"]
        pub struct W(crate::W<DATAR27_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR27_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR27_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR27_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D27` reader - Backup data"]
        pub struct D27_R(crate::FieldReader<u16>);
        impl D27_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D27_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D27` writer - Backup data"]
        pub struct D27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D27_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d27(&self) -> D27_R {
                D27_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d27(&mut self) -> D27_W {
                D27_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar27](index.html) module"]
        pub struct DATAR27_SPEC;
        impl crate::RegisterSpec for DATAR27_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar27::R](R) reader structure"]
        impl crate::Readable for DATAR27_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar27::W](W) writer structure"]
        impl crate::Writable for DATAR27_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR27 to value 0"]
        impl crate::Resettable for DATAR27_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR28 register accessor: an alias for `Reg<DATAR28_SPEC>`"]
    pub type DATAR28 = crate::Reg<datar28::DATAR28_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar28 {
        #[doc = "Register `DATAR28` reader"]
        pub struct R(crate::R<DATAR28_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR28_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR28_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR28_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR28` writer"]
        pub struct W(crate::W<DATAR28_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR28_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR28_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR28_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D28` reader - Backup data"]
        pub struct D28_R(crate::FieldReader<u16>);
        impl D28_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D28_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D28` writer - Backup data"]
        pub struct D28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D28_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d28(&self) -> D28_R {
                D28_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d28(&mut self) -> D28_W {
                D28_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar28](index.html) module"]
        pub struct DATAR28_SPEC;
        impl crate::RegisterSpec for DATAR28_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar28::R](R) reader structure"]
        impl crate::Readable for DATAR28_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar28::W](W) writer structure"]
        impl crate::Writable for DATAR28_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR28 to value 0"]
        impl crate::Resettable for DATAR28_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR29 register accessor: an alias for `Reg<DATAR29_SPEC>`"]
    pub type DATAR29 = crate::Reg<datar29::DATAR29_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar29 {
        #[doc = "Register `DATAR29` reader"]
        pub struct R(crate::R<DATAR29_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR29_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR29_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR29_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR29` writer"]
        pub struct W(crate::W<DATAR29_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR29_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR29_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR29_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D29` reader - Backup data"]
        pub struct D29_R(crate::FieldReader<u16>);
        impl D29_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D29_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D29` writer - Backup data"]
        pub struct D29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D29_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d29(&self) -> D29_R {
                D29_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d29(&mut self) -> D29_W {
                D29_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar29](index.html) module"]
        pub struct DATAR29_SPEC;
        impl crate::RegisterSpec for DATAR29_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar29::R](R) reader structure"]
        impl crate::Readable for DATAR29_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar29::W](W) writer structure"]
        impl crate::Writable for DATAR29_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR29 to value 0"]
        impl crate::Resettable for DATAR29_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR30 register accessor: an alias for `Reg<DATAR30_SPEC>`"]
    pub type DATAR30 = crate::Reg<datar30::DATAR30_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar30 {
        #[doc = "Register `DATAR30` reader"]
        pub struct R(crate::R<DATAR30_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR30_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR30_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR30_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR30` writer"]
        pub struct W(crate::W<DATAR30_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR30_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR30_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR30_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D30` reader - Backup data"]
        pub struct D30_R(crate::FieldReader<u16>);
        impl D30_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D30_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D30` writer - Backup data"]
        pub struct D30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D30_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d30(&self) -> D30_R {
                D30_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d30(&mut self) -> D30_W {
                D30_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar30](index.html) module"]
        pub struct DATAR30_SPEC;
        impl crate::RegisterSpec for DATAR30_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar30::R](R) reader structure"]
        impl crate::Readable for DATAR30_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar30::W](W) writer structure"]
        impl crate::Writable for DATAR30_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR30 to value 0"]
        impl crate::Resettable for DATAR30_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR31 register accessor: an alias for `Reg<DATAR31_SPEC>`"]
    pub type DATAR31 = crate::Reg<datar31::DATAR31_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar31 {
        #[doc = "Register `DATAR31` reader"]
        pub struct R(crate::R<DATAR31_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR31_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR31_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR31_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR31` writer"]
        pub struct W(crate::W<DATAR31_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR31_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR31_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR31_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D31` reader - Backup data"]
        pub struct D31_R(crate::FieldReader<u16>);
        impl D31_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D31_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D31` writer - Backup data"]
        pub struct D31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D31_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d31(&self) -> D31_R {
                D31_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d31(&mut self) -> D31_W {
                D31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar31](index.html) module"]
        pub struct DATAR31_SPEC;
        impl crate::RegisterSpec for DATAR31_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar31::R](R) reader structure"]
        impl crate::Readable for DATAR31_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar31::W](W) writer structure"]
        impl crate::Writable for DATAR31_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR31 to value 0"]
        impl crate::Resettable for DATAR31_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR32 register accessor: an alias for `Reg<DATAR32_SPEC>`"]
    pub type DATAR32 = crate::Reg<datar32::DATAR32_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar32 {
        #[doc = "Register `DATAR32` reader"]
        pub struct R(crate::R<DATAR32_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR32_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR32_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR32_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR32` writer"]
        pub struct W(crate::W<DATAR32_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR32_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR32_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR32_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D32` reader - Backup data"]
        pub struct D32_R(crate::FieldReader<u16>);
        impl D32_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D32_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D32` writer - Backup data"]
        pub struct D32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D32_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d32(&self) -> D32_R {
                D32_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d32(&mut self) -> D32_W {
                D32_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar32](index.html) module"]
        pub struct DATAR32_SPEC;
        impl crate::RegisterSpec for DATAR32_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar32::R](R) reader structure"]
        impl crate::Readable for DATAR32_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar32::W](W) writer structure"]
        impl crate::Writable for DATAR32_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR32 to value 0"]
        impl crate::Resettable for DATAR32_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR33 register accessor: an alias for `Reg<DATAR33_SPEC>`"]
    pub type DATAR33 = crate::Reg<datar33::DATAR33_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar33 {
        #[doc = "Register `DATAR33` reader"]
        pub struct R(crate::R<DATAR33_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR33_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR33_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR33_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR33` writer"]
        pub struct W(crate::W<DATAR33_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR33_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR33_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR33_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D33` reader - Backup data"]
        pub struct D33_R(crate::FieldReader<u16>);
        impl D33_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D33_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D33` writer - Backup data"]
        pub struct D33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D33_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d33(&self) -> D33_R {
                D33_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d33(&mut self) -> D33_W {
                D33_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar33](index.html) module"]
        pub struct DATAR33_SPEC;
        impl crate::RegisterSpec for DATAR33_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar33::R](R) reader structure"]
        impl crate::Readable for DATAR33_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar33::W](W) writer structure"]
        impl crate::Writable for DATAR33_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR33 to value 0"]
        impl crate::Resettable for DATAR33_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR34 register accessor: an alias for `Reg<DATAR34_SPEC>`"]
    pub type DATAR34 = crate::Reg<datar34::DATAR34_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar34 {
        #[doc = "Register `DATAR34` reader"]
        pub struct R(crate::R<DATAR34_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR34_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR34_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR34_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR34` writer"]
        pub struct W(crate::W<DATAR34_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR34_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR34_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR34_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D34` reader - Backup data"]
        pub struct D34_R(crate::FieldReader<u16>);
        impl D34_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D34_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D34` writer - Backup data"]
        pub struct D34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D34_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d34(&self) -> D34_R {
                D34_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d34(&mut self) -> D34_W {
                D34_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar34](index.html) module"]
        pub struct DATAR34_SPEC;
        impl crate::RegisterSpec for DATAR34_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar34::R](R) reader structure"]
        impl crate::Readable for DATAR34_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar34::W](W) writer structure"]
        impl crate::Writable for DATAR34_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR34 to value 0"]
        impl crate::Resettable for DATAR34_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR35 register accessor: an alias for `Reg<DATAR35_SPEC>`"]
    pub type DATAR35 = crate::Reg<datar35::DATAR35_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar35 {
        #[doc = "Register `DATAR35` reader"]
        pub struct R(crate::R<DATAR35_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR35_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR35_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR35_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR35` writer"]
        pub struct W(crate::W<DATAR35_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR35_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR35_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR35_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D35` reader - Backup data"]
        pub struct D35_R(crate::FieldReader<u16>);
        impl D35_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D35_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D35` writer - Backup data"]
        pub struct D35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D35_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d35(&self) -> D35_R {
                D35_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d35(&mut self) -> D35_W {
                D35_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar35](index.html) module"]
        pub struct DATAR35_SPEC;
        impl crate::RegisterSpec for DATAR35_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar35::R](R) reader structure"]
        impl crate::Readable for DATAR35_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar35::W](W) writer structure"]
        impl crate::Writable for DATAR35_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR35 to value 0"]
        impl crate::Resettable for DATAR35_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR36 register accessor: an alias for `Reg<DATAR36_SPEC>`"]
    pub type DATAR36 = crate::Reg<datar36::DATAR36_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar36 {
        #[doc = "Register `DATAR36` reader"]
        pub struct R(crate::R<DATAR36_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR36_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR36_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR36_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR36` writer"]
        pub struct W(crate::W<DATAR36_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR36_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR36_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR36_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D36` reader - Backup data"]
        pub struct D36_R(crate::FieldReader<u16>);
        impl D36_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D36_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D36` writer - Backup data"]
        pub struct D36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D36_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d36(&self) -> D36_R {
                D36_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d36(&mut self) -> D36_W {
                D36_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar36](index.html) module"]
        pub struct DATAR36_SPEC;
        impl crate::RegisterSpec for DATAR36_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar36::R](R) reader structure"]
        impl crate::Readable for DATAR36_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar36::W](W) writer structure"]
        impl crate::Writable for DATAR36_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR36 to value 0"]
        impl crate::Resettable for DATAR36_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR37 register accessor: an alias for `Reg<DATAR37_SPEC>`"]
    pub type DATAR37 = crate::Reg<datar37::DATAR37_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar37 {
        #[doc = "Register `DATAR37` reader"]
        pub struct R(crate::R<DATAR37_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR37_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR37_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR37_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR37` writer"]
        pub struct W(crate::W<DATAR37_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR37_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR37_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR37_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D37` reader - Backup data"]
        pub struct D37_R(crate::FieldReader<u16>);
        impl D37_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D37_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D37` writer - Backup data"]
        pub struct D37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D37_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d37(&self) -> D37_R {
                D37_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d37(&mut self) -> D37_W {
                D37_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar37](index.html) module"]
        pub struct DATAR37_SPEC;
        impl crate::RegisterSpec for DATAR37_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar37::R](R) reader structure"]
        impl crate::Readable for DATAR37_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar37::W](W) writer structure"]
        impl crate::Writable for DATAR37_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR37 to value 0"]
        impl crate::Resettable for DATAR37_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR38 register accessor: an alias for `Reg<DATAR38_SPEC>`"]
    pub type DATAR38 = crate::Reg<datar38::DATAR38_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar38 {
        #[doc = "Register `DATAR38` reader"]
        pub struct R(crate::R<DATAR38_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR38_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR38_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR38_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR38` writer"]
        pub struct W(crate::W<DATAR38_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR38_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR38_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR38_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D38` reader - Backup data"]
        pub struct D38_R(crate::FieldReader<u16>);
        impl D38_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D38_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D38` writer - Backup data"]
        pub struct D38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D38_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d38(&self) -> D38_R {
                D38_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d38(&mut self) -> D38_W {
                D38_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar38](index.html) module"]
        pub struct DATAR38_SPEC;
        impl crate::RegisterSpec for DATAR38_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar38::R](R) reader structure"]
        impl crate::Readable for DATAR38_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar38::W](W) writer structure"]
        impl crate::Writable for DATAR38_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR38 to value 0"]
        impl crate::Resettable for DATAR38_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR39 register accessor: an alias for `Reg<DATAR39_SPEC>`"]
    pub type DATAR39 = crate::Reg<datar39::DATAR39_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar39 {
        #[doc = "Register `DATAR39` reader"]
        pub struct R(crate::R<DATAR39_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR39_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR39_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR39_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR39` writer"]
        pub struct W(crate::W<DATAR39_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR39_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR39_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR39_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D39` reader - Backup data"]
        pub struct D39_R(crate::FieldReader<u16>);
        impl D39_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D39_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D39` writer - Backup data"]
        pub struct D39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D39_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d39(&self) -> D39_R {
                D39_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d39(&mut self) -> D39_W {
                D39_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar39](index.html) module"]
        pub struct DATAR39_SPEC;
        impl crate::RegisterSpec for DATAR39_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar39::R](R) reader structure"]
        impl crate::Readable for DATAR39_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar39::W](W) writer structure"]
        impl crate::Writable for DATAR39_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR39 to value 0"]
        impl crate::Resettable for DATAR39_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR40 register accessor: an alias for `Reg<DATAR40_SPEC>`"]
    pub type DATAR40 = crate::Reg<datar40::DATAR40_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar40 {
        #[doc = "Register `DATAR40` reader"]
        pub struct R(crate::R<DATAR40_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR40_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR40_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR40_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR40` writer"]
        pub struct W(crate::W<DATAR40_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR40_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR40_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR40_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D40` reader - Backup data"]
        pub struct D40_R(crate::FieldReader<u16>);
        impl D40_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D40_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D40` writer - Backup data"]
        pub struct D40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D40_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d40(&self) -> D40_R {
                D40_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d40(&mut self) -> D40_W {
                D40_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar40](index.html) module"]
        pub struct DATAR40_SPEC;
        impl crate::RegisterSpec for DATAR40_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar40::R](R) reader structure"]
        impl crate::Readable for DATAR40_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar40::W](W) writer structure"]
        impl crate::Writable for DATAR40_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR40 to value 0"]
        impl crate::Resettable for DATAR40_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR41 register accessor: an alias for `Reg<DATAR41_SPEC>`"]
    pub type DATAR41 = crate::Reg<datar41::DATAR41_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar41 {
        #[doc = "Register `DATAR41` reader"]
        pub struct R(crate::R<DATAR41_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR41_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR41_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR41_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR41` writer"]
        pub struct W(crate::W<DATAR41_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR41_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR41_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR41_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D41` reader - Backup data"]
        pub struct D41_R(crate::FieldReader<u16>);
        impl D41_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D41_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D41` writer - Backup data"]
        pub struct D41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D41_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d41(&self) -> D41_R {
                D41_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d41(&mut self) -> D41_W {
                D41_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar41](index.html) module"]
        pub struct DATAR41_SPEC;
        impl crate::RegisterSpec for DATAR41_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar41::R](R) reader structure"]
        impl crate::Readable for DATAR41_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar41::W](W) writer structure"]
        impl crate::Writable for DATAR41_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR41 to value 0"]
        impl crate::Resettable for DATAR41_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR42 register accessor: an alias for `Reg<DATAR42_SPEC>`"]
    pub type DATAR42 = crate::Reg<datar42::DATAR42_SPEC>;
    #[doc = "Backup data register (BKP_DR)"]
    pub mod datar42 {
        #[doc = "Register `DATAR42` reader"]
        pub struct R(crate::R<DATAR42_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR42_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR42_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR42_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR42` writer"]
        pub struct W(crate::W<DATAR42_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR42_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR42_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR42_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `D42` reader - Backup data"]
        pub struct D42_R(crate::FieldReader<u16>);
        impl D42_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                D42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for D42_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `D42` writer - Backup data"]
        pub struct D42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> D42_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d42(&self) -> D42_R {
                D42_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn d42(&mut self) -> D42_W {
                D42_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup data register (BKP_DR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar42](index.html) module"]
        pub struct DATAR42_SPEC;
        impl crate::RegisterSpec for DATAR42_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar42::R](R) reader structure"]
        impl crate::Readable for DATAR42_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar42::W](W) writer structure"]
        impl crate::Writable for DATAR42_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR42 to value 0"]
        impl crate::Resettable for DATAR42_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "OCTLR register accessor: an alias for `Reg<OCTLR_SPEC>`"]
    pub type OCTLR = crate::Reg<octlr::OCTLR_SPEC>;
    #[doc = "RTC clock calibration register (BKP_OCTLR)"]
    pub mod octlr {
        #[doc = "Register `OCTLR` reader"]
        pub struct R(crate::R<OCTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<OCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<OCTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<OCTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `OCTLR` writer"]
        pub struct W(crate::W<OCTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<OCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<OCTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<OCTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CAL` reader - Calibration value"]
        pub struct CAL_R(crate::FieldReader<u8>);
        impl CAL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAL` writer - Calibration value"]
        pub struct CAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                self.w
            }
        }
        #[doc = "Field `CCO` reader - Calibration Clock Output"]
        pub struct CCO_R(crate::FieldReader<bool>);
        impl CCO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCO_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCO` writer - Calibration Clock Output"]
        pub struct CCO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `ASOE` reader - Alarm or second output enable"]
        pub struct ASOE_R(crate::FieldReader<bool>);
        impl ASOE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ASOE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ASOE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ASOE` writer - Alarm or second output enable"]
        pub struct ASOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ASOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `ASOS` reader - Alarm or second output selection"]
        pub struct ASOS_R(crate::FieldReader<bool>);
        impl ASOS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ASOS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ASOS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ASOS` writer - Alarm or second output selection"]
        pub struct ASOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ASOS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - Calibration value"]
            #[inline(always)]
            pub fn cal(&self) -> CAL_R {
                CAL_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - Calibration Clock Output"]
            #[inline(always)]
            pub fn cco(&self) -> CCO_R {
                CCO_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Alarm or second output enable"]
            #[inline(always)]
            pub fn asoe(&self) -> ASOE_R {
                ASOE_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Alarm or second output selection"]
            #[inline(always)]
            pub fn asos(&self) -> ASOS_R {
                ASOS_R::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - Calibration value"]
            #[inline(always)]
            pub fn cal(&mut self) -> CAL_W {
                CAL_W { w: self }
            }
            #[doc = "Bit 7 - Calibration Clock Output"]
            #[inline(always)]
            pub fn cco(&mut self) -> CCO_W {
                CCO_W { w: self }
            }
            #[doc = "Bit 8 - Alarm or second output enable"]
            #[inline(always)]
            pub fn asoe(&mut self) -> ASOE_W {
                ASOE_W { w: self }
            }
            #[doc = "Bit 9 - Alarm or second output selection"]
            #[inline(always)]
            pub fn asos(&mut self) -> ASOS_W {
                ASOS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTC clock calibration register (BKP_OCTLR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [octlr](index.html) module"]
        pub struct OCTLR_SPEC;
        impl crate::RegisterSpec for OCTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [octlr::R](R) reader structure"]
        impl crate::Readable for OCTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [octlr::W](W) writer structure"]
        impl crate::Writable for OCTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets OCTLR to value 0"]
        impl crate::Resettable for OCTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TPCTLR register accessor: an alias for `Reg<TPCTLR_SPEC>`"]
    pub type TPCTLR = crate::Reg<tpctlr::TPCTLR_SPEC>;
    #[doc = "Backup control register (BKP_TPCTLR)"]
    pub mod tpctlr {
        #[doc = "Register `TPCTLR` reader"]
        pub struct R(crate::R<TPCTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TPCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TPCTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TPCTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TPCTLR` writer"]
        pub struct W(crate::W<TPCTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TPCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TPCTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TPCTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TPE` reader - Tamper pin enable"]
        pub struct TPE_R(crate::FieldReader<bool>);
        impl TPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TPE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TPE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TPE` writer - Tamper pin enable"]
        pub struct TPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `TPAL` reader - Tamper pin active level"]
        pub struct TPAL_R(crate::FieldReader<bool>);
        impl TPAL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TPAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TPAL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TPAL` writer - Tamper pin active level"]
        pub struct TPAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TPAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Tamper pin enable"]
            #[inline(always)]
            pub fn tpe(&self) -> TPE_R {
                TPE_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Tamper pin active level"]
            #[inline(always)]
            pub fn tpal(&self) -> TPAL_R {
                TPAL_R::new(((self.bits >> 1) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Tamper pin enable"]
            #[inline(always)]
            pub fn tpe(&mut self) -> TPE_W {
                TPE_W { w: self }
            }
            #[doc = "Bit 1 - Tamper pin active level"]
            #[inline(always)]
            pub fn tpal(&mut self) -> TPAL_W {
                TPAL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Backup control register (BKP_TPCTLR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tpctlr](index.html) module"]
        pub struct TPCTLR_SPEC;
        impl crate::RegisterSpec for TPCTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tpctlr::R](R) reader structure"]
        impl crate::Readable for TPCTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tpctlr::W](W) writer structure"]
        impl crate::Writable for TPCTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TPCTLR to value 0"]
        impl crate::Resettable for TPCTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TPCSR register accessor: an alias for `Reg<TPCSR_SPEC>`"]
    pub type TPCSR = crate::Reg<tpcsr::TPCSR_SPEC>;
    #[doc = "BKP_TPCSR control/status register (BKP_CSR)"]
    pub mod tpcsr {
        #[doc = "Register `TPCSR` reader"]
        pub struct R(crate::R<TPCSR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TPCSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TPCSR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TPCSR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TPCSR` writer"]
        pub struct W(crate::W<TPCSR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TPCSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TPCSR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TPCSR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CTE` writer - Clear Tamper event"]
        pub struct CTE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `CTI` writer - Clear Tamper Interrupt"]
        pub struct CTI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `TPIE` reader - Tamper Pin interrupt enable"]
        pub struct TPIE_R(crate::FieldReader<bool>);
        impl TPIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TPIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TPIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TPIE` writer - Tamper Pin interrupt enable"]
        pub struct TPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TEF` reader - Tamper Event Flag"]
        pub struct TEF_R(crate::FieldReader<bool>);
        impl TEF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TEF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TEF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIF` reader - Tamper Interrupt Flag"]
        pub struct TIF_R(crate::FieldReader<bool>);
        impl TIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 2 - Tamper Pin interrupt enable"]
            #[inline(always)]
            pub fn tpie(&self) -> TPIE_R {
                TPIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 8 - Tamper Event Flag"]
            #[inline(always)]
            pub fn tef(&self) -> TEF_R {
                TEF_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Tamper Interrupt Flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Clear Tamper event"]
            #[inline(always)]
            pub fn cte(&mut self) -> CTE_W {
                CTE_W { w: self }
            }
            #[doc = "Bit 1 - Clear Tamper Interrupt"]
            #[inline(always)]
            pub fn cti(&mut self) -> CTI_W {
                CTI_W { w: self }
            }
            #[doc = "Bit 2 - Tamper Pin interrupt enable"]
            #[inline(always)]
            pub fn tpie(&mut self) -> TPIE_W {
                TPIE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BKP_TPCSR control/status register (BKP_CSR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tpcsr](index.html) module"]
        pub struct TPCSR_SPEC;
        impl crate::RegisterSpec for TPCSR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tpcsr::R](R) reader structure"]
        impl crate::Readable for TPCSR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tpcsr::W](W) writer structure"]
        impl crate::Writable for TPCSR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TPCSR to value 0"]
        impl crate::Resettable for TPCSR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Independent watchdog"]
pub struct IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IWDG {}
impl IWDG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iwdg::RegisterBlock = 0x4000_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
#[doc = "Independent watchdog"]
pub mod iwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Key register (IWDG_CTLR)"]
        pub ctlr: crate::Reg<ctlr::CTLR_SPEC>,
        #[doc = "0x04 - Prescaler register (IWDG_PSCR)"]
        pub pscr: crate::Reg<pscr::PSCR_SPEC>,
        #[doc = "0x08 - Reload register (IWDG_RLDR)"]
        pub rldr: crate::Reg<rldr::RLDR_SPEC>,
        #[doc = "0x0c - Status register (IWDG_SR)"]
        pub statr: crate::Reg<statr::STATR_SPEC>,
    }
    #[doc = "CTLR register accessor: an alias for `Reg<CTLR_SPEC>`"]
    pub type CTLR = crate::Reg<ctlr::CTLR_SPEC>;
    #[doc = "Key register (IWDG_CTLR)"]
    pub mod ctlr {
        #[doc = "Register `CTLR` writer"]
        pub struct W(crate::W<CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `KEY` writer - Key value"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Key value"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Key register (IWDG_CTLR)\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr](index.html) module"]
        pub struct CTLR_SPEC;
        impl crate::RegisterSpec for CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr::W](W) writer structure"]
        impl crate::Writable for CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR to value 0"]
        impl crate::Resettable for CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSCR register accessor: an alias for `Reg<PSCR_SPEC>`"]
    pub type PSCR = crate::Reg<pscr::PSCR_SPEC>;
    #[doc = "Prescaler register (IWDG_PSCR)"]
    pub mod pscr {
        #[doc = "Register `PSCR` reader"]
        pub struct R(crate::R<PSCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSCR` writer"]
        pub struct W(crate::W<PSCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PR` reader - Prescaler divider"]
        pub struct PR_R(crate::FieldReader<u8>);
        impl PR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PR_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PR` writer - Prescaler divider"]
        pub struct PR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !7) | (value as u32 & 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&self) -> PR_R {
                PR_R::new((self.bits & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&mut self) -> PR_W {
                PR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Prescaler register (IWDG_PSCR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pscr](index.html) module"]
        pub struct PSCR_SPEC;
        impl crate::RegisterSpec for PSCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pscr::R](R) reader structure"]
        impl crate::Readable for PSCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pscr::W](W) writer structure"]
        impl crate::Writable for PSCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSCR to value 0"]
        impl crate::Resettable for PSCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RLDR register accessor: an alias for `Reg<RLDR_SPEC>`"]
    pub type RLDR = crate::Reg<rldr::RLDR_SPEC>;
    #[doc = "Reload register (IWDG_RLDR)"]
    pub mod rldr {
        #[doc = "Register `RLDR` reader"]
        pub struct R(crate::R<RLDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RLDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RLDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RLDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RLDR` writer"]
        pub struct W(crate::W<RLDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RLDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RLDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RLDR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RL` reader - Watchdog counter reload value"]
        pub struct RL_R(crate::FieldReader<u16>);
        impl RL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                RL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RL_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RL` writer - Watchdog counter reload value"]
        pub struct RL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&self) -> RL_R {
                RL_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&mut self) -> RL_W {
                RL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Reload register (IWDG_RLDR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rldr](index.html) module"]
        pub struct RLDR_SPEC;
        impl crate::RegisterSpec for RLDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rldr::R](R) reader structure"]
        impl crate::Readable for RLDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rldr::W](W) writer structure"]
        impl crate::Writable for RLDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RLDR to value 0x0fff"]
        impl crate::Resettable for RLDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0fff
            }
        }
    }
    #[doc = "STATR register accessor: an alias for `Reg<STATR_SPEC>`"]
    pub type STATR = crate::Reg<statr::STATR_SPEC>;
    #[doc = "Status register (IWDG_SR)"]
    pub mod statr {
        #[doc = "Register `STATR` reader"]
        pub struct R(crate::R<STATR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PVU` reader - Watchdog prescaler value update"]
        pub struct PVU_R(crate::FieldReader<bool>);
        impl PVU_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PVU_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PVU_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RVU` reader - Watchdog counter reload value update"]
        pub struct RVU_R(crate::FieldReader<bool>);
        impl RVU_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RVU_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RVU_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Watchdog prescaler value update"]
            #[inline(always)]
            pub fn pvu(&self) -> PVU_R {
                PVU_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Watchdog counter reload value update"]
            #[inline(always)]
            pub fn rvu(&self) -> RVU_R {
                RVU_R::new(((self.bits >> 1) & 1) != 0)
            }
        }
        #[doc = "Status register (IWDG_SR)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [statr](index.html) module"]
        pub struct STATR_SPEC;
        impl crate::RegisterSpec for STATR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [statr::R](R) reader structure"]
        impl crate::Readable for STATR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets STATR to value 0"]
        impl crate::Resettable for STATR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Window watchdog"]
pub struct WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WWDG {}
impl WWDG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wwdg::RegisterBlock = 0x4000_2c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
#[doc = "Window watchdog"]
pub mod wwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register (WWDG_CR)"]
        pub ctlr: crate::Reg<ctlr::CTLR_SPEC>,
        #[doc = "0x04 - Configuration register (WWDG_CFR)"]
        pub cfgr: crate::Reg<cfgr::CFGR_SPEC>,
        #[doc = "0x08 - Status register (WWDG_SR)"]
        pub statr: crate::Reg<statr::STATR_SPEC>,
    }
    #[doc = "CTLR register accessor: an alias for `Reg<CTLR_SPEC>`"]
    pub type CTLR = crate::Reg<ctlr::CTLR_SPEC>;
    #[doc = "Control register (WWDG_CR)"]
    pub mod ctlr {
        #[doc = "Register `CTLR` reader"]
        pub struct R(crate::R<CTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR` writer"]
        pub struct W(crate::W<CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `T` reader - 7-bit counter (MSB to LSB)"]
        pub struct T_R(crate::FieldReader<u8>);
        impl T_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                T_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for T_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `T` writer - 7-bit counter (MSB to LSB)"]
        pub struct T_W<'a> {
            w: &'a mut W,
        }
        impl<'a> T_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                self.w
            }
        }
        #[doc = "Field `WDGA` reader - Activation bit"]
        pub struct WDGA_R(crate::FieldReader<bool>);
        impl WDGA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WDGA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDGA_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDGA` writer - Activation bit"]
        pub struct WDGA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - 7-bit counter (MSB to LSB)"]
            #[inline(always)]
            pub fn t(&self) -> T_R {
                T_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdga(&self) -> WDGA_R {
                WDGA_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - 7-bit counter (MSB to LSB)"]
            #[inline(always)]
            pub fn t(&mut self) -> T_W {
                T_W { w: self }
            }
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdga(&mut self) -> WDGA_W {
                WDGA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register (WWDG_CR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr](index.html) module"]
        pub struct CTLR_SPEC;
        impl crate::RegisterSpec for CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr::R](R) reader structure"]
        impl crate::Readable for CTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr::W](W) writer structure"]
        impl crate::Writable for CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR to value 0x7f"]
        impl crate::Resettable for CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x7f
            }
        }
    }
    #[doc = "CFGR register accessor: an alias for `Reg<CFGR_SPEC>`"]
    pub type CFGR = crate::Reg<cfgr::CFGR_SPEC>;
    #[doc = "Configuration register (WWDG_CFR)"]
    pub mod cfgr {
        #[doc = "Register `CFGR` reader"]
        pub struct R(crate::R<CFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR` writer"]
        pub struct W(crate::W<CFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `W` reader - 7-bit window value"]
        pub struct W_R(crate::FieldReader<u8>);
        impl W_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                W_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for W_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `W` writer - 7-bit window value"]
        pub struct W_W<'a> {
            w: &'a mut W,
        }
        impl<'a> W_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                self.w
            }
        }
        #[doc = "Field `WDGTB` reader - Timer Base"]
        pub struct WDGTB_R(crate::FieldReader<u8>);
        impl WDGTB_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                WDGTB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDGTB_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDGTB` writer - Timer Base"]
        pub struct WDGTB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGTB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 7)) | ((value as u32 & 3) << 7);
                self.w
            }
        }
        #[doc = "Field `EWI` reader - Early Wakeup Interrupt"]
        pub struct EWI_R(crate::FieldReader<bool>);
        impl EWI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EWI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EWI_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EWI` writer - Early Wakeup Interrupt"]
        pub struct EWI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&self) -> W_R {
                W_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bits 7:8 - Timer Base"]
            #[inline(always)]
            pub fn wdgtb(&self) -> WDGTB_R {
                WDGTB_R::new(((self.bits >> 7) & 3) as u8)
            }
            #[doc = "Bit 9 - Early Wakeup Interrupt"]
            #[inline(always)]
            pub fn ewi(&self) -> EWI_R {
                EWI_R::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&mut self) -> W_W {
                W_W { w: self }
            }
            #[doc = "Bits 7:8 - Timer Base"]
            #[inline(always)]
            pub fn wdgtb(&mut self) -> WDGTB_W {
                WDGTB_W { w: self }
            }
            #[doc = "Bit 9 - Early Wakeup Interrupt"]
            #[inline(always)]
            pub fn ewi(&mut self) -> EWI_W {
                EWI_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Configuration register (WWDG_CFR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](index.html) module"]
        pub struct CFGR_SPEC;
        impl crate::RegisterSpec for CFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr::R](R) reader structure"]
        impl crate::Readable for CFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr::W](W) writer structure"]
        impl crate::Writable for CFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR to value 0x7f"]
        impl crate::Resettable for CFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x7f
            }
        }
    }
    #[doc = "STATR register accessor: an alias for `Reg<STATR_SPEC>`"]
    pub type STATR = crate::Reg<statr::STATR_SPEC>;
    #[doc = "Status register (WWDG_SR)"]
    pub mod statr {
        #[doc = "Register `STATR` reader"]
        pub struct R(crate::R<STATR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STATR` writer"]
        pub struct W(crate::W<STATR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STATR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STATR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `WEIF` reader - Early Wakeup Interrupt Flag"]
        pub struct WEIF_R(crate::FieldReader<bool>);
        impl WEIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WEIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WEIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WEIF` writer - Early Wakeup Interrupt Flag"]
        pub struct WEIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WEIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Early Wakeup Interrupt Flag"]
            #[inline(always)]
            pub fn weif(&self) -> WEIF_R {
                WEIF_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Early Wakeup Interrupt Flag"]
            #[inline(always)]
            pub fn weif(&mut self) -> WEIF_W {
                WEIF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status register (WWDG_SR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [statr](index.html) module"]
        pub struct STATR_SPEC;
        impl crate::RegisterSpec for STATR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [statr::R](R) reader structure"]
        impl crate::Readable for STATR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [statr::W](W) writer structure"]
        impl crate::Writable for STATR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STATR to value 0"]
        impl crate::Resettable for STATR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Advanced timer"]
pub struct TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1 {}
impl TIM1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim1::RegisterBlock = 0x4001_2c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
#[doc = "Advanced timer"]
pub mod tim1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub ctlr1: crate::Reg<ctlr1::CTLR1_SPEC>,
        #[doc = "0x04 - control register 2"]
        pub ctlr2: crate::Reg<ctlr2::CTLR2_SPEC>,
        #[doc = "0x08 - slave mode control register"]
        pub smcfgr: crate::Reg<smcfgr::SMCFGR_SPEC>,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dmaintenr: crate::Reg<dmaintenr::DMAINTENR_SPEC>,
        #[doc = "0x10 - status register"]
        pub intfr: crate::Reg<intfr::INTFR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub swevgr: crate::Reg<swevgr::SWEVGR_SPEC>,
        _reserved_6_chctlr1: [u8; 0x04],
        _reserved_7_chctlr2: [u8; 0x04],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: crate::Reg<ccer::CCER_SPEC>,
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub atrlr: crate::Reg<atrlr::ATRLR_SPEC>,
        #[doc = "0x30 - repetition counter register"]
        pub rptcr: crate::Reg<rptcr::RPTCR_SPEC>,
        #[doc = "0x34 - capture/compare register 1"]
        pub ch1cvr: crate::Reg<ch1cvr::CH1CVR_SPEC>,
        #[doc = "0x38 - capture/compare register 2"]
        pub ch2cvr: crate::Reg<ch2cvr::CH2CVR_SPEC>,
        #[doc = "0x3c - capture/compare register 3"]
        pub ch3cvr: crate::Reg<ch3cvr::CH3CVR_SPEC>,
        #[doc = "0x40 - capture/compare register 4"]
        pub ch4cvr: crate::Reg<ch4cvr::CH4CVR_SPEC>,
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: crate::Reg<bdtr::BDTR_SPEC>,
        #[doc = "0x48 - DMA control register"]
        pub dmacfgr: crate::Reg<dmacfgr::DMACFGR_SPEC>,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmaadr: crate::Reg<dmaadr::DMAADR_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn chctlr1_input(&self) -> &crate::Reg<chctlr1_input::CHCTLR1_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<chctlr1_input::CHCTLR1_INPUT_SPEC>)
            }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn chctlr1_output(&self) -> &crate::Reg<chctlr1_output::CHCTLR1_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<chctlr1_output::CHCTLR1_OUTPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn chctlr2_input(&self) -> &crate::Reg<chctlr2_input::CHCTLR2_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<chctlr2_input::CHCTLR2_INPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn chctlr2_output(&self) -> &crate::Reg<chctlr2_output::CHCTLR2_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<chctlr2_output::CHCTLR2_OUTPUT_SPEC>)
            }
        }
    }
    #[doc = "CTLR1 register accessor: an alias for `Reg<CTLR1_SPEC>`"]
    pub type CTLR1 = crate::Reg<ctlr1::CTLR1_SPEC>;
    #[doc = "control register 1"]
    pub mod ctlr1 {
        #[doc = "Register `CTLR1` reader"]
        pub struct R(crate::R<CTLR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR1` writer"]
        pub struct W(crate::W<CTLR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CKD` reader - Clock division"]
        pub struct CKD_R(crate::FieldReader<u8>);
        impl CKD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CKD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CKD_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CKD` writer - Clock division"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `ARPE` reader - Auto-reload preload enable"]
        pub struct ARPE_R(crate::FieldReader<bool>);
        impl ARPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARPE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARPE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARPE` writer - Auto-reload preload enable"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `CMS` reader - Center-aligned mode selection"]
        pub struct CMS_R(crate::FieldReader<u8>);
        impl CMS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CMS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMS` writer - Center-aligned mode selection"]
        pub struct CMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 5)) | ((value as u32 & 3) << 5);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `OPM` reader - One-pulse mode"]
        pub struct OPM_R(crate::FieldReader<bool>);
        impl OPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OPM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OPM` writer - One-pulse mode"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `URS` reader - Update request source"]
        pub struct URS_R(crate::FieldReader<bool>);
        impl URS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                URS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for URS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `URS` writer - Update request source"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `UDIS` reader - Update disable"]
        pub struct UDIS_R(crate::FieldReader<bool>);
        impl UDIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UDIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UDIS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UDIS` writer - Update disable"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `CEN` reader - Counter enable"]
        pub struct CEN_R(crate::FieldReader<bool>);
        impl CEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CEN` writer - Counter enable"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&self) -> CMS_R {
                CMS_R::new(((self.bits >> 5) & 3) as u8)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&mut self) -> CMS_W {
                CMS_W { w: self }
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr1](index.html) module"]
        pub struct CTLR1_SPEC;
        impl crate::RegisterSpec for CTLR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr1::R](R) reader structure"]
        impl crate::Readable for CTLR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr1::W](W) writer structure"]
        impl crate::Writable for CTLR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR1 to value 0"]
        impl crate::Resettable for CTLR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR2 register accessor: an alias for `Reg<CTLR2_SPEC>`"]
    pub type CTLR2 = crate::Reg<ctlr2::CTLR2_SPEC>;
    #[doc = "control register 2"]
    pub mod ctlr2 {
        #[doc = "Register `CTLR2` reader"]
        pub struct R(crate::R<CTLR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR2` writer"]
        pub struct W(crate::W<CTLR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OIS4` reader - Output Idle state 4"]
        pub struct OIS4_R(crate::FieldReader<bool>);
        impl OIS4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OIS4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OIS4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OIS4` writer - Output Idle state 4"]
        pub struct OIS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `OIS3N` reader - Output Idle state 3"]
        pub struct OIS3N_R(crate::FieldReader<bool>);
        impl OIS3N_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OIS3N_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OIS3N_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OIS3N` writer - Output Idle state 3"]
        pub struct OIS3N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS3N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `OIS3` reader - Output Idle state 3"]
        pub struct OIS3_R(crate::FieldReader<bool>);
        impl OIS3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OIS3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OIS3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OIS3` writer - Output Idle state 3"]
        pub struct OIS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `OIS2N` reader - Output Idle state 2"]
        pub struct OIS2N_R(crate::FieldReader<bool>);
        impl OIS2N_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OIS2N_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OIS2N_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OIS2N` writer - Output Idle state 2"]
        pub struct OIS2N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS2N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `OIS2` reader - Output Idle state 2"]
        pub struct OIS2_R(crate::FieldReader<bool>);
        impl OIS2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OIS2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OIS2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OIS2` writer - Output Idle state 2"]
        pub struct OIS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `OIS1N` reader - Output Idle state 1"]
        pub struct OIS1N_R(crate::FieldReader<bool>);
        impl OIS1N_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OIS1N_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OIS1N_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OIS1N` writer - Output Idle state 1"]
        pub struct OIS1N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `OIS1` reader - Output Idle state 1"]
        pub struct OIS1_R(crate::FieldReader<bool>);
        impl OIS1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OIS1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OIS1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OIS1` writer - Output Idle state 1"]
        pub struct OIS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `TI1S` reader - TI1 selection"]
        pub struct TI1S_R(crate::FieldReader<bool>);
        impl TI1S_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TI1S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TI1S_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TI1S` writer - TI1 selection"]
        pub struct TI1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `MMS` reader - Master mode selection"]
        pub struct MMS_R(crate::FieldReader<u8>);
        impl MMS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MMS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MMS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MMS` writer - Master mode selection"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `CCDS` reader - Capture/compare DMA selection"]
        pub struct CCDS_R(crate::FieldReader<bool>);
        impl CCDS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCDS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCDS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCDS` writer - Capture/compare DMA selection"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CCUS` reader - Capture/compare control update selection"]
        pub struct CCUS_R(crate::FieldReader<bool>);
        impl CCUS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCUS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCUS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCUS` writer - Capture/compare control update selection"]
        pub struct CCUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CCPC` reader - Capture/compare preloaded control"]
        pub struct CCPC_R(crate::FieldReader<bool>);
        impl CCPC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCPC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCPC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCPC` writer - Capture/compare preloaded control"]
        pub struct CCPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCPC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Output Idle state 4"]
            #[inline(always)]
            pub fn ois4(&self) -> OIS4_R {
                OIS4_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3n(&self) -> OIS3N_R {
                OIS3N_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3(&self) -> OIS3_R {
                OIS3_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2n(&self) -> OIS2N_R {
                OIS2N_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&self) -> OIS2_R {
                OIS2_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&self) -> OIS1N_R {
                OIS1N_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&self) -> OIS1_R {
                OIS1_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&self) -> TI1S_R {
                TI1S_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&self) -> CCUS_R {
                CCUS_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&self) -> CCPC_R {
                CCPC_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Output Idle state 4"]
            #[inline(always)]
            pub fn ois4(&mut self) -> OIS4_W {
                OIS4_W { w: self }
            }
            #[doc = "Bit 13 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3n(&mut self) -> OIS3N_W {
                OIS3N_W { w: self }
            }
            #[doc = "Bit 12 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3(&mut self) -> OIS3_W {
                OIS3_W { w: self }
            }
            #[doc = "Bit 11 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2n(&mut self) -> OIS2N_W {
                OIS2N_W { w: self }
            }
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&mut self) -> OIS2_W {
                OIS2_W { w: self }
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&mut self) -> OIS1N_W {
                OIS1N_W { w: self }
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&mut self) -> OIS1_W {
                OIS1_W { w: self }
            }
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&mut self) -> TI1S_W {
                TI1S_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&mut self) -> CCUS_W {
                CCUS_W { w: self }
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&mut self) -> CCPC_W {
                CCPC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr2](index.html) module"]
        pub struct CTLR2_SPEC;
        impl crate::RegisterSpec for CTLR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr2::R](R) reader structure"]
        impl crate::Readable for CTLR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr2::W](W) writer structure"]
        impl crate::Writable for CTLR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR2 to value 0"]
        impl crate::Resettable for CTLR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SMCFGR register accessor: an alias for `Reg<SMCFGR_SPEC>`"]
    pub type SMCFGR = crate::Reg<smcfgr::SMCFGR_SPEC>;
    #[doc = "slave mode control register"]
    pub mod smcfgr {
        #[doc = "Register `SMCFGR` reader"]
        pub struct R(crate::R<SMCFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SMCFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SMCFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SMCFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SMCFGR` writer"]
        pub struct W(crate::W<SMCFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SMCFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SMCFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SMCFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ETP` reader - External trigger polarity"]
        pub struct ETP_R(crate::FieldReader<bool>);
        impl ETP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETP` writer - External trigger polarity"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `ECE` reader - External clock enable"]
        pub struct ECE_R(crate::FieldReader<bool>);
        impl ECE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ECE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ECE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ECE` writer - External clock enable"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `ETPS` reader - External trigger prescaler"]
        pub struct ETPS_R(crate::FieldReader<u8>);
        impl ETPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ETPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETPS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETPS` writer - External trigger prescaler"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `ETF` reader - External trigger filter"]
        pub struct ETF_R(crate::FieldReader<u8>);
        impl ETF_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ETF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETF_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETF` writer - External trigger filter"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | ((value as u32 & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Field `MSM` reader - Master/Slave mode"]
        pub struct MSM_R(crate::FieldReader<bool>);
        impl MSM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSM` writer - Master/Slave mode"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TS` reader - Trigger selection"]
        pub struct TS_R(crate::FieldReader<u8>);
        impl TS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TS` writer - Trigger selection"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `SMS` reader - Slave mode selection"]
        pub struct SMS_R(crate::FieldReader<u8>);
        impl SMS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMS` writer - Slave mode selection"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !7) | (value as u32 & 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcfgr](index.html) module"]
        pub struct SMCFGR_SPEC;
        impl crate::RegisterSpec for SMCFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [smcfgr::R](R) reader structure"]
        impl crate::Readable for SMCFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [smcfgr::W](W) writer structure"]
        impl crate::Writable for SMCFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SMCFGR to value 0"]
        impl crate::Resettable for SMCFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAINTENR register accessor: an alias for `Reg<DMAINTENR_SPEC>`"]
    pub type DMAINTENR = crate::Reg<dmaintenr::DMAINTENR_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dmaintenr {
        #[doc = "Register `DMAINTENR` reader"]
        pub struct R(crate::R<DMAINTENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAINTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAINTENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAINTENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAINTENR` writer"]
        pub struct W(crate::W<DMAINTENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAINTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAINTENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAINTENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TDE` reader - Trigger DMA request enable"]
        pub struct TDE_R(crate::FieldReader<bool>);
        impl TDE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TDE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TDE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TDE` writer - Trigger DMA request enable"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `COMDE` reader - COM DMA request enable"]
        pub struct COMDE_R(crate::FieldReader<bool>);
        impl COMDE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                COMDE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for COMDE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `COMDE` writer - COM DMA request enable"]
        pub struct COMDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `CC4DE` reader - Capture/Compare 4 DMA request enable"]
        pub struct CC4DE_R(crate::FieldReader<bool>);
        impl CC4DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4DE` writer - Capture/Compare 4 DMA request enable"]
        pub struct CC4DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `CC3DE` reader - Capture/Compare 3 DMA request enable"]
        pub struct CC3DE_R(crate::FieldReader<bool>);
        impl CC3DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3DE` writer - Capture/Compare 3 DMA request enable"]
        pub struct CC3DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `CC2DE` reader - Capture/Compare 2 DMA request enable"]
        pub struct CC2DE_R(crate::FieldReader<bool>);
        impl CC2DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2DE` writer - Capture/Compare 2 DMA request enable"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC1DE` reader - Capture/Compare 1 DMA request enable"]
        pub struct CC1DE_R(crate::FieldReader<bool>);
        impl CC1DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1DE` writer - Capture/Compare 1 DMA request enable"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `UDE` reader - Update DMA request enable"]
        pub struct UDE_R(crate::FieldReader<bool>);
        impl UDE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UDE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UDE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UDE` writer - Update DMA request enable"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `BIE` reader - Break interrupt enable"]
        pub struct BIE_R(crate::FieldReader<bool>);
        impl BIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIE` writer - Break interrupt enable"]
        pub struct BIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TIE` reader - Trigger interrupt enable"]
        pub struct TIE_R(crate::FieldReader<bool>);
        impl TIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIE` writer - Trigger interrupt enable"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `COMIE` reader - COM interrupt enable"]
        pub struct COMIE_R(crate::FieldReader<bool>);
        impl COMIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                COMIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for COMIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `COMIE` writer - COM interrupt enable"]
        pub struct COMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `CC4IE` reader - Capture/Compare 4 interrupt enable"]
        pub struct CC4IE_R(crate::FieldReader<bool>);
        impl CC4IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4IE` writer - Capture/Compare 4 interrupt enable"]
        pub struct CC4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC3IE` reader - Capture/Compare 3 interrupt enable"]
        pub struct CC3IE_R(crate::FieldReader<bool>);
        impl CC3IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3IE` writer - Capture/Compare 3 interrupt enable"]
        pub struct CC3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CC2IE` reader - Capture/Compare 2 interrupt enable"]
        pub struct CC2IE_R(crate::FieldReader<bool>);
        impl CC2IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2IE` writer - Capture/Compare 2 interrupt enable"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1IE` reader - Capture/Compare 1 interrupt enable"]
        pub struct CC1IE_R(crate::FieldReader<bool>);
        impl CC1IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1IE` writer - Capture/Compare 1 interrupt enable"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `UIE` reader - Update interrupt enable"]
        pub struct UIE_R(crate::FieldReader<bool>);
        impl UIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UIE` writer - Update interrupt enable"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&self) -> COMDE_R {
                COMDE_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&self) -> CC4DE_R {
                CC4DE_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&self) -> CC3DE_R {
                CC3DE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&self) -> BIE_R {
                BIE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&self) -> COMIE_R {
                COMIE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&self) -> CC4IE_R {
                CC4IE_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&self) -> CC3IE_R {
                CC3IE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&mut self) -> COMDE_W {
                COMDE_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&mut self) -> CC4DE_W {
                CC4DE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&mut self) -> CC3DE_W {
                CC3DE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&mut self) -> BIE_W {
                BIE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&mut self) -> COMIE_W {
                COMIE_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&mut self) -> CC4IE_W {
                CC4IE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&mut self) -> CC3IE_W {
                CC3IE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaintenr](index.html) module"]
        pub struct DMAINTENR_SPEC;
        impl crate::RegisterSpec for DMAINTENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmaintenr::R](R) reader structure"]
        impl crate::Readable for DMAINTENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmaintenr::W](W) writer structure"]
        impl crate::Writable for DMAINTENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAINTENR to value 0"]
        impl crate::Resettable for DMAINTENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "INTFR register accessor: an alias for `Reg<INTFR_SPEC>`"]
    pub type INTFR = crate::Reg<intfr::INTFR_SPEC>;
    #[doc = "status register"]
    pub mod intfr {
        #[doc = "Register `INTFR` reader"]
        pub struct R(crate::R<INTFR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INTFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INTFR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INTFR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `INTFR` writer"]
        pub struct W(crate::W<INTFR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<INTFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<INTFR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<INTFR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CC4OF` reader - Capture/Compare 4 overcapture flag"]
        pub struct CC4OF_R(crate::FieldReader<bool>);
        impl CC4OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4OF` writer - Capture/Compare 4 overcapture flag"]
        pub struct CC4OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `CC3OF` reader - Capture/Compare 3 overcapture flag"]
        pub struct CC3OF_R(crate::FieldReader<bool>);
        impl CC3OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3OF` writer - Capture/Compare 3 overcapture flag"]
        pub struct CC3OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `CC2OF` reader - Capture/compare 2 overcapture flag"]
        pub struct CC2OF_R(crate::FieldReader<bool>);
        impl CC2OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2OF` writer - Capture/compare 2 overcapture flag"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag"]
        pub struct CC1OF_R(crate::FieldReader<bool>);
        impl CC1OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `BIF` reader - Break interrupt flag"]
        pub struct BIF_R(crate::FieldReader<bool>);
        impl BIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIF` writer - Break interrupt flag"]
        pub struct BIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TIF` reader - Trigger interrupt flag"]
        pub struct TIF_R(crate::FieldReader<bool>);
        impl TIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIF` writer - Trigger interrupt flag"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `COMIF` reader - COM interrupt flag"]
        pub struct COMIF_R(crate::FieldReader<bool>);
        impl COMIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                COMIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for COMIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `COMIF` writer - COM interrupt flag"]
        pub struct COMIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `CC4IF` reader - Capture/Compare 4 interrupt flag"]
        pub struct CC4IF_R(crate::FieldReader<bool>);
        impl CC4IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4IF` writer - Capture/Compare 4 interrupt flag"]
        pub struct CC4IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC3IF` reader - Capture/Compare 3 interrupt flag"]
        pub struct CC3IF_R(crate::FieldReader<bool>);
        impl CC3IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3IF` writer - Capture/Compare 3 interrupt flag"]
        pub struct CC3IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CC2IF` reader - Capture/Compare 2 interrupt flag"]
        pub struct CC2IF_R(crate::FieldReader<bool>);
        impl CC2IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2IF` writer - Capture/Compare 2 interrupt flag"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1IF` reader - Capture/compare 1 interrupt flag"]
        pub struct CC1IF_R(crate::FieldReader<bool>);
        impl CC1IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1IF` writer - Capture/compare 1 interrupt flag"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `UIF` reader - Update interrupt flag"]
        pub struct UIF_R(crate::FieldReader<bool>);
        impl UIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UIF` writer - Update interrupt flag"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&self) -> CC4OF_R {
                CC4OF_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&self) -> CC3OF_R {
                CC3OF_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&self) -> BIF_R {
                BIF_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&self) -> COMIF_R {
                COMIF_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&self) -> CC4IF_R {
                CC4IF_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&self) -> CC3IF_R {
                CC3IF_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&mut self) -> CC4OF_W {
                CC4OF_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&mut self) -> CC3OF_W {
                CC3OF_W { w: self }
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&mut self) -> BIF_W {
                BIF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&mut self) -> COMIF_W {
                COMIF_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&mut self) -> CC4IF_W {
                CC4IF_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&mut self) -> CC3IF_W {
                CC3IF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intfr](index.html) module"]
        pub struct INTFR_SPEC;
        impl crate::RegisterSpec for INTFR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [intfr::R](R) reader structure"]
        impl crate::Readable for INTFR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [intfr::W](W) writer structure"]
        impl crate::Writable for INTFR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets INTFR to value 0"]
        impl crate::Resettable for INTFR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SWEVGR register accessor: an alias for `Reg<SWEVGR_SPEC>`"]
    pub type SWEVGR = crate::Reg<swevgr::SWEVGR_SPEC>;
    #[doc = "event generation register"]
    pub mod swevgr {
        #[doc = "Register `SWEVGR` writer"]
        pub struct W(crate::W<SWEVGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SWEVGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SWEVGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SWEVGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BG` writer - Break generation"]
        pub struct BG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TG` writer - Trigger generation"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `COMG` writer - Capture/Compare control update generation"]
        pub struct COMG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `CC4G` writer - Capture/compare 4 generation"]
        pub struct CC4G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC3G` writer - Capture/compare 3 generation"]
        pub struct CC3G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CC2G` writer - Capture/compare 2 generation"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1G` writer - Capture/compare 1 generation"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `UG` writer - Update generation"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 7 - Break generation"]
            #[inline(always)]
            pub fn bg(&mut self) -> BG_W {
                BG_W { w: self }
            }
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare control update generation"]
            #[inline(always)]
            pub fn comg(&mut self) -> COMG_W {
                COMG_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&mut self) -> CC4G_W {
                CC4G_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&mut self) -> CC3G_W {
                CC3G_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swevgr](index.html) module"]
        pub struct SWEVGR_SPEC;
        impl crate::RegisterSpec for SWEVGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [swevgr::W](W) writer structure"]
        impl crate::Writable for SWEVGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SWEVGR to value 0"]
        impl crate::Resettable for SWEVGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR1_Output register accessor: an alias for `Reg<CHCTLR1_OUTPUT_SPEC>`"]
    pub type CHCTLR1_OUTPUT = crate::Reg<chctlr1_output::CHCTLR1_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod chctlr1_output {
        #[doc = "Register `CHCTLR1_Output` reader"]
        pub struct R(crate::R<CHCTLR1_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR1_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR1_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR1_Output` writer"]
        pub struct W(crate::W<CHCTLR1_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR1_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR1_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OC2CE` reader - Output Compare 2 clear enable"]
        pub struct OC2CE_R(crate::FieldReader<bool>);
        impl OC2CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC2CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2CE` writer - Output Compare 2 clear enable"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `OC2M` reader - Output Compare 2 mode"]
        pub struct OC2M_R(crate::FieldReader<u8>);
        impl OC2M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC2M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2M` writer - Output Compare 2 mode"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 12)) | ((value as u32 & 7) << 12);
                self.w
            }
        }
        #[doc = "Field `OC2PE` reader - Output Compare 2 preload enable"]
        pub struct OC2PE_R(crate::FieldReader<bool>);
        impl OC2PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC2PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2PE` writer - Output Compare 2 preload enable"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `OC2FE` reader - Output Compare 2 fast enable"]
        pub struct OC2FE_R(crate::FieldReader<bool>);
        impl OC2FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC2FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2FE` writer - Output Compare 2 fast enable"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC2S` reader - Capture/Compare 2 selection"]
        pub struct CC2S_R(crate::FieldReader<u8>);
        impl CC2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2S` writer - Capture/Compare 2 selection"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `OC1CE` reader - Output Compare 1 clear enable"]
        pub struct OC1CE_R(crate::FieldReader<bool>);
        impl OC1CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC1CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1CE` writer - Output Compare 1 clear enable"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `OC1M` reader - Output Compare 1 mode"]
        pub struct OC1M_R(crate::FieldReader<u8>);
        impl OC1M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC1M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1M` writer - Output Compare 1 mode"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `OC1PE` reader - Output Compare 1 preload enable"]
        pub struct OC1PE_R(crate::FieldReader<bool>);
        impl OC1PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC1PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1PE` writer - Output Compare 1 preload enable"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `OC1FE` reader - Output Compare 1 fast enable"]
        pub struct OC1FE_R(crate::FieldReader<bool>);
        impl OC1FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC1FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1FE` writer - Output Compare 1 fast enable"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1S` reader - Capture/Compare 1 selection"]
        pub struct CC1S_R(crate::FieldReader<u8>);
        impl CC1S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC1S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1S` writer - Capture/Compare 1 selection"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr1_output](index.html) module"]
        pub struct CHCTLR1_OUTPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR1_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr1_output::R](R) reader structure"]
        impl crate::Readable for CHCTLR1_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr1_output::W](W) writer structure"]
        impl crate::Writable for CHCTLR1_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR1_Output to value 0"]
        impl crate::Resettable for CHCTLR1_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR1_Input register accessor: an alias for `Reg<CHCTLR1_INPUT_SPEC>`"]
    pub type CHCTLR1_INPUT = crate::Reg<chctlr1_input::CHCTLR1_INPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod chctlr1_input {
        #[doc = "Register `CHCTLR1_Input` reader"]
        pub struct R(crate::R<CHCTLR1_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR1_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR1_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR1_Input` writer"]
        pub struct W(crate::W<CHCTLR1_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR1_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR1_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IC2F` reader - Input capture 2 filter"]
        pub struct IC2F_R(crate::FieldReader<u8>);
        impl IC2F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC2F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC2F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC2F` writer - Input capture 2 filter"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Field `IC2PCS` reader - Input capture 2 prescaler"]
        pub struct IC2PCS_R(crate::FieldReader<u8>);
        impl IC2PCS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC2PCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC2PCS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC2PCS` writer - Input capture 2 prescaler"]
        pub struct IC2PCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PCS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `CC2S` reader - Capture/Compare 2 selection"]
        pub struct CC2S_R(crate::FieldReader<u8>);
        impl CC2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2S` writer - Capture/Compare 2 selection"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `IC1F` reader - Input capture 1 filter"]
        pub struct IC1F_R(crate::FieldReader<u8>);
        impl IC1F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC1F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC1F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC1F` writer - Input capture 1 filter"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `ICPCS` reader - Input capture 1 prescaler"]
        pub struct ICPCS_R(crate::FieldReader<u8>);
        impl ICPCS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ICPCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ICPCS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ICPCS` writer - Input capture 1 prescaler"]
        pub struct ICPCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ICPCS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u32 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1S` reader - Capture/Compare 1 selection"]
        pub struct CC1S_R(crate::FieldReader<u8>);
        impl CC1S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC1S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1S` writer - Capture/Compare 1 selection"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2pcs(&self) -> IC2PCS_R {
                IC2PCS_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn icpcs(&self) -> ICPCS_R {
                ICPCS_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2pcs(&mut self) -> IC2PCS_W {
                IC2PCS_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn icpcs(&mut self) -> ICPCS_W {
                ICPCS_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr1_input](index.html) module"]
        pub struct CHCTLR1_INPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR1_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr1_input::R](R) reader structure"]
        impl crate::Readable for CHCTLR1_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr1_input::W](W) writer structure"]
        impl crate::Writable for CHCTLR1_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR1_Input to value 0"]
        impl crate::Resettable for CHCTLR1_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR2_Output register accessor: an alias for `Reg<CHCTLR2_OUTPUT_SPEC>`"]
    pub type CHCTLR2_OUTPUT = crate::Reg<chctlr2_output::CHCTLR2_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod chctlr2_output {
        #[doc = "Register `CHCTLR2_Output` reader"]
        pub struct R(crate::R<CHCTLR2_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR2_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR2_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR2_Output` writer"]
        pub struct W(crate::W<CHCTLR2_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR2_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR2_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OC4CE` reader - Output compare 4 clear enable"]
        pub struct OC4CE_R(crate::FieldReader<bool>);
        impl OC4CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC4CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4CE` writer - Output compare 4 clear enable"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `OC4M` reader - Output compare 4 mode"]
        pub struct OC4M_R(crate::FieldReader<u8>);
        impl OC4M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC4M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4M` writer - Output compare 4 mode"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 12)) | ((value as u32 & 7) << 12);
                self.w
            }
        }
        #[doc = "Field `OC4PE` reader - Output compare 4 preload enable"]
        pub struct OC4PE_R(crate::FieldReader<bool>);
        impl OC4PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC4PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4PE` writer - Output compare 4 preload enable"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `OC4FE` reader - Output compare 4 fast enable"]
        pub struct OC4FE_R(crate::FieldReader<bool>);
        impl OC4FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC4FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4FE` writer - Output compare 4 fast enable"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC4S` reader - Capture/Compare 4 selection"]
        pub struct CC4S_R(crate::FieldReader<u8>);
        impl CC4S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC4S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4S` writer - Capture/Compare 4 selection"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `OC3CE` reader - Output compare 3 clear enable"]
        pub struct OC3CE_R(crate::FieldReader<bool>);
        impl OC3CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC3CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3CE` writer - Output compare 3 clear enable"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `OC3M` reader - Output compare 3 mode"]
        pub struct OC3M_R(crate::FieldReader<u8>);
        impl OC3M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC3M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3M` writer - Output compare 3 mode"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `OC3PE` reader - Output compare 3 preload enable"]
        pub struct OC3PE_R(crate::FieldReader<bool>);
        impl OC3PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC3PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3PE` writer - Output compare 3 preload enable"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `OC3FE` reader - Output compare 3 fast enable"]
        pub struct OC3FE_R(crate::FieldReader<bool>);
        impl OC3FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC3FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3FE` writer - Output compare 3 fast enable"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC3S` reader - Capture/Compare 3 selection"]
        pub struct CC3S_R(crate::FieldReader<u8>);
        impl CC3S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC3S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3S` writer - Capture/Compare 3 selection"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr2_output](index.html) module"]
        pub struct CHCTLR2_OUTPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR2_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr2_output::R](R) reader structure"]
        impl crate::Readable for CHCTLR2_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr2_output::W](W) writer structure"]
        impl crate::Writable for CHCTLR2_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR2_Output to value 0"]
        impl crate::Resettable for CHCTLR2_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR2_Input register accessor: an alias for `Reg<CHCTLR2_INPUT_SPEC>`"]
    pub type CHCTLR2_INPUT = crate::Reg<chctlr2_input::CHCTLR2_INPUT_SPEC>;
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod chctlr2_input {
        #[doc = "Register `CHCTLR2_Input` reader"]
        pub struct R(crate::R<CHCTLR2_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR2_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR2_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR2_Input` writer"]
        pub struct W(crate::W<CHCTLR2_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR2_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR2_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IC4F` reader - Input capture 4 filter"]
        pub struct IC4F_R(crate::FieldReader<u8>);
        impl IC4F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC4F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC4F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC4F` writer - Input capture 4 filter"]
        pub struct IC4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Field `IC4PSC` reader - Input capture 4 prescaler"]
        pub struct IC4PSC_R(crate::FieldReader<u8>);
        impl IC4PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC4PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC4PSC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC4PSC` writer - Input capture 4 prescaler"]
        pub struct IC4PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `CC4S` reader - Capture/Compare 4 selection"]
        pub struct CC4S_R(crate::FieldReader<u8>);
        impl CC4S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC4S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4S` writer - Capture/Compare 4 selection"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `IC3F` reader - Input capture 3 filter"]
        pub struct IC3F_R(crate::FieldReader<u8>);
        impl IC3F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC3F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC3F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC3F` writer - Input capture 3 filter"]
        pub struct IC3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `IC3PSC` reader - Input capture 3 prescaler"]
        pub struct IC3PSC_R(crate::FieldReader<u8>);
        impl IC3PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC3PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC3PSC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC3PSC` writer - Input capture 3 prescaler"]
        pub struct IC3PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u32 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `CC3S` reader - Capture/compare 3 selection"]
        pub struct CC3S_R(crate::FieldReader<u8>);
        impl CC3S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC3S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3S` writer - Capture/compare 3 selection"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&self) -> IC4F_R {
                IC4F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&self) -> IC4PSC_R {
                IC4PSC_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&self) -> IC3F_R {
                IC3F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&self) -> IC3PSC_R {
                IC3PSC_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 0:1 - Capture/compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&mut self) -> IC4F_W {
                IC4F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&mut self) -> IC4PSC_W {
                IC4PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&mut self) -> IC3F_W {
                IC3F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&mut self) -> IC3PSC_W {
                IC3PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr2_input](index.html) module"]
        pub struct CHCTLR2_INPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR2_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr2_input::R](R) reader structure"]
        impl crate::Readable for CHCTLR2_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr2_input::W](W) writer structure"]
        impl crate::Writable for CHCTLR2_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR2_Input to value 0"]
        impl crate::Resettable for CHCTLR2_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCER register accessor: an alias for `Reg<CCER_SPEC>`"]
    pub type CCER = crate::Reg<ccer::CCER_SPEC>;
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Register `CCER` reader"]
        pub struct R(crate::R<CCER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCER` writer"]
        pub struct W(crate::W<CCER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCER_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CC4P` reader - Capture/Compare 3 output Polarity"]
        pub struct CC4P_R(crate::FieldReader<bool>);
        impl CC4P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4P` writer - Capture/Compare 3 output Polarity"]
        pub struct CC4P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `CC4E` reader - Capture/Compare 4 output enable"]
        pub struct CC4E_R(crate::FieldReader<bool>);
        impl CC4E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4E` writer - Capture/Compare 4 output enable"]
        pub struct CC4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `CC3NP` reader - Capture/Compare 3 output Polarity"]
        pub struct CC3NP_R(crate::FieldReader<bool>);
        impl CC3NP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3NP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3NP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3NP` writer - Capture/Compare 3 output Polarity"]
        pub struct CC3NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `CC3NE` reader - Capture/Compare 3 complementary output enable"]
        pub struct CC3NE_R(crate::FieldReader<bool>);
        impl CC3NE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3NE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3NE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3NE` writer - Capture/Compare 3 complementary output enable"]
        pub struct CC3NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC3P` reader - Capture/Compare 3 output Polarity"]
        pub struct CC3P_R(crate::FieldReader<bool>);
        impl CC3P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3P` writer - Capture/Compare 3 output Polarity"]
        pub struct CC3P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `CC3E` reader - Capture/Compare 3 output enable"]
        pub struct CC3E_R(crate::FieldReader<bool>);
        impl CC3E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3E` writer - Capture/Compare 3 output enable"]
        pub struct CC3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `CC2NP` reader - Capture/Compare 2 output Polarity"]
        pub struct CC2NP_R(crate::FieldReader<bool>);
        impl CC2NP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2NP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2NP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2NP` writer - Capture/Compare 2 output Polarity"]
        pub struct CC2NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `CC2NE` reader - Capture/Compare 2 complementary output enable"]
        pub struct CC2NE_R(crate::FieldReader<bool>);
        impl CC2NE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2NE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2NE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2NE` writer - Capture/Compare 2 complementary output enable"]
        pub struct CC2NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `CC2P` reader - Capture/Compare 2 output Polarity"]
        pub struct CC2P_R(crate::FieldReader<bool>);
        impl CC2P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2P` writer - Capture/Compare 2 output Polarity"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `CC2E` reader - Capture/Compare 2 output enable"]
        pub struct CC2E_R(crate::FieldReader<bool>);
        impl CC2E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2E` writer - Capture/Compare 2 output enable"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC1NP` reader - Capture/Compare 1 output Polarity"]
        pub struct CC1NP_R(crate::FieldReader<bool>);
        impl CC1NP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1NP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1NP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1NP` writer - Capture/Compare 1 output Polarity"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CC1NE` reader - Capture/Compare 1 complementary output enable"]
        pub struct CC1NE_R(crate::FieldReader<bool>);
        impl CC1NE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1NE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1NE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1NE` writer - Capture/Compare 1 complementary output enable"]
        pub struct CC1NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1P` reader - Capture/Compare 1 output Polarity"]
        pub struct CC1P_R(crate::FieldReader<bool>);
        impl CC1P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1P` writer - Capture/Compare 1 output Polarity"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `CC1E` reader - Capture/Compare 1 output enable"]
        pub struct CC1E_R(crate::FieldReader<bool>);
        impl CC1E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1E` writer - Capture/Compare 1 output enable"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&self) -> CC4P_R {
                CC4P_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&self) -> CC4E_R {
                CC4E_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&self) -> CC3NP_R {
                CC3NP_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
            #[inline(always)]
            pub fn cc3ne(&self) -> CC3NE_R {
                CC3NE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&self) -> CC3P_R {
                CC3P_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&self) -> CC3E_R {
                CC3E_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&self) -> CC2NP_R {
                CC2NP_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
            #[inline(always)]
            pub fn cc2ne(&self) -> CC2NE_R {
                CC2NE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&self) -> CC1NE_R {
                CC1NE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&mut self) -> CC4P_W {
                CC4P_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&mut self) -> CC4E_W {
                CC4E_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&mut self) -> CC3NP_W {
                CC3NP_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
            #[inline(always)]
            pub fn cc3ne(&mut self) -> CC3NE_W {
                CC3NE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&mut self) -> CC3P_W {
                CC3P_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&mut self) -> CC3E_W {
                CC3E_W { w: self }
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&mut self) -> CC2NP_W {
                CC2NP_W { w: self }
            }
            #[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
            #[inline(always)]
            pub fn cc2ne(&mut self) -> CC2NE_W {
                CC2NE_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&mut self) -> CC1NE_W {
                CC1NE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](index.html) module"]
        pub struct CCER_SPEC;
        impl crate::RegisterSpec for CCER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccer::R](R) reader structure"]
        impl crate::Readable for CCER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccer::W](W) writer structure"]
        impl crate::Writable for CCER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCER to value 0"]
        impl crate::Resettable for CCER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CNT` reader - counter value"]
        pub struct CNT_R(crate::FieldReader<u16>);
        impl CNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNT` writer - counter value"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PSC` reader - Prescaler value"]
        pub struct PSC_R(crate::FieldReader<u16>);
        impl PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSC_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSC` writer - Prescaler value"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ATRLR register accessor: an alias for `Reg<ATRLR_SPEC>`"]
    pub type ATRLR = crate::Reg<atrlr::ATRLR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod atrlr {
        #[doc = "Register `ATRLR` reader"]
        pub struct R(crate::R<ATRLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ATRLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ATRLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ATRLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ATRLR` writer"]
        pub struct W(crate::W<ATRLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ATRLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ATRLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ATRLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ATRLR` reader - Auto-reload value"]
        pub struct ATRLR_R(crate::FieldReader<u16>);
        impl ATRLR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                ATRLR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ATRLR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ATRLR` writer - Auto-reload value"]
        pub struct ATRLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ATRLR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn atrlr(&self) -> ATRLR_R {
                ATRLR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn atrlr(&mut self) -> ATRLR_W {
                ATRLR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [atrlr](index.html) module"]
        pub struct ATRLR_SPEC;
        impl crate::RegisterSpec for ATRLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [atrlr::R](R) reader structure"]
        impl crate::Readable for ATRLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [atrlr::W](W) writer structure"]
        impl crate::Writable for ATRLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ATRLR to value 0"]
        impl crate::Resettable for ATRLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RPTCR register accessor: an alias for `Reg<RPTCR_SPEC>`"]
    pub type RPTCR = crate::Reg<rptcr::RPTCR_SPEC>;
    #[doc = "repetition counter register"]
    pub mod rptcr {
        #[doc = "Register `RPTCR` reader"]
        pub struct R(crate::R<RPTCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RPTCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RPTCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RPTCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RPTCR` writer"]
        pub struct W(crate::W<RPTCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RPTCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RPTCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RPTCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RPTCR` reader - Repetition counter value"]
        pub struct RPTCR_R(crate::FieldReader<u8>);
        impl RPTCR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RPTCR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RPTCR_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RPTCR` writer - Repetition counter value"]
        pub struct RPTCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPTCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rptcr(&self) -> RPTCR_R {
                RPTCR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rptcr(&mut self) -> RPTCR_W {
                RPTCR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rptcr](index.html) module"]
        pub struct RPTCR_SPEC;
        impl crate::RegisterSpec for RPTCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rptcr::R](R) reader structure"]
        impl crate::Readable for RPTCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rptcr::W](W) writer structure"]
        impl crate::Writable for RPTCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RPTCR to value 0"]
        impl crate::Resettable for RPTCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH1CVR register accessor: an alias for `Reg<CH1CVR_SPEC>`"]
    pub type CH1CVR = crate::Reg<ch1cvr::CH1CVR_SPEC>;
    #[doc = "capture/compare register 1"]
    pub mod ch1cvr {
        #[doc = "Register `CH1CVR` reader"]
        pub struct R(crate::R<CH1CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH1CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH1CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH1CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH1CVR` writer"]
        pub struct W(crate::W<CH1CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH1CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH1CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH1CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH1CVR` reader - Capture/Compare 1 value"]
        pub struct CH1CVR_R(crate::FieldReader<u16>);
        impl CH1CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH1CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH1CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH1CVR` writer - Capture/Compare 1 value"]
        pub struct CH1CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ch1cvr(&self) -> CH1CVR_R {
                CH1CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ch1cvr(&mut self) -> CH1CVR_W {
                CH1CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch1cvr](index.html) module"]
        pub struct CH1CVR_SPEC;
        impl crate::RegisterSpec for CH1CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch1cvr::R](R) reader structure"]
        impl crate::Readable for CH1CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch1cvr::W](W) writer structure"]
        impl crate::Writable for CH1CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH1CVR to value 0"]
        impl crate::Resettable for CH1CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH2CVR register accessor: an alias for `Reg<CH2CVR_SPEC>`"]
    pub type CH2CVR = crate::Reg<ch2cvr::CH2CVR_SPEC>;
    #[doc = "capture/compare register 2"]
    pub mod ch2cvr {
        #[doc = "Register `CH2CVR` reader"]
        pub struct R(crate::R<CH2CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH2CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH2CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH2CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH2CVR` writer"]
        pub struct W(crate::W<CH2CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH2CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH2CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH2CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH2CVR` reader - Capture/Compare 2 value"]
        pub struct CH2CVR_R(crate::FieldReader<u16>);
        impl CH2CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH2CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH2CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH2CVR` writer - Capture/Compare 2 value"]
        pub struct CH2CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ch2cvr(&self) -> CH2CVR_R {
                CH2CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ch2cvr(&mut self) -> CH2CVR_W {
                CH2CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch2cvr](index.html) module"]
        pub struct CH2CVR_SPEC;
        impl crate::RegisterSpec for CH2CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch2cvr::R](R) reader structure"]
        impl crate::Readable for CH2CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch2cvr::W](W) writer structure"]
        impl crate::Writable for CH2CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH2CVR to value 0"]
        impl crate::Resettable for CH2CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH3CVR register accessor: an alias for `Reg<CH3CVR_SPEC>`"]
    pub type CH3CVR = crate::Reg<ch3cvr::CH3CVR_SPEC>;
    #[doc = "capture/compare register 3"]
    pub mod ch3cvr {
        #[doc = "Register `CH3CVR` reader"]
        pub struct R(crate::R<CH3CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH3CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH3CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH3CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH3CVR` writer"]
        pub struct W(crate::W<CH3CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH3CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH3CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH3CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH3CVR` reader - Capture/Compare value"]
        pub struct CH3CVR_R(crate::FieldReader<u16>);
        impl CH3CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH3CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH3CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH3CVR` writer - Capture/Compare value"]
        pub struct CH3CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch3cvr(&self) -> CH3CVR_R {
                CH3CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch3cvr(&mut self) -> CH3CVR_W {
                CH3CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch3cvr](index.html) module"]
        pub struct CH3CVR_SPEC;
        impl crate::RegisterSpec for CH3CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch3cvr::R](R) reader structure"]
        impl crate::Readable for CH3CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch3cvr::W](W) writer structure"]
        impl crate::Writable for CH3CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH3CVR to value 0"]
        impl crate::Resettable for CH3CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH4CVR register accessor: an alias for `Reg<CH4CVR_SPEC>`"]
    pub type CH4CVR = crate::Reg<ch4cvr::CH4CVR_SPEC>;
    #[doc = "capture/compare register 4"]
    pub mod ch4cvr {
        #[doc = "Register `CH4CVR` reader"]
        pub struct R(crate::R<CH4CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH4CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH4CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH4CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH4CVR` writer"]
        pub struct W(crate::W<CH4CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH4CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH4CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH4CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH4CVR` reader - Capture/Compare value"]
        pub struct CH4CVR_R(crate::FieldReader<u16>);
        impl CH4CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH4CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH4CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH4CVR` writer - Capture/Compare value"]
        pub struct CH4CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch4cvr(&self) -> CH4CVR_R {
                CH4CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch4cvr(&mut self) -> CH4CVR_W {
                CH4CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch4cvr](index.html) module"]
        pub struct CH4CVR_SPEC;
        impl crate::RegisterSpec for CH4CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch4cvr::R](R) reader structure"]
        impl crate::Readable for CH4CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch4cvr::W](W) writer structure"]
        impl crate::Writable for CH4CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH4CVR to value 0"]
        impl crate::Resettable for CH4CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BDTR register accessor: an alias for `Reg<BDTR_SPEC>`"]
    pub type BDTR = crate::Reg<bdtr::BDTR_SPEC>;
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Register `BDTR` reader"]
        pub struct R(crate::R<BDTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BDTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BDTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BDTR` writer"]
        pub struct W(crate::W<BDTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BDTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BDTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MOE` reader - Main output enable"]
        pub struct MOE_R(crate::FieldReader<bool>);
        impl MOE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MOE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MOE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MOE` writer - Main output enable"]
        pub struct MOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `AOE` reader - Automatic output enable"]
        pub struct AOE_R(crate::FieldReader<bool>);
        impl AOE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AOE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AOE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AOE` writer - Automatic output enable"]
        pub struct AOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `BKP` reader - Break polarity"]
        pub struct BKP_R(crate::FieldReader<bool>);
        impl BKP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BKP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BKP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BKP` writer - Break polarity"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `BKE` reader - Break enable"]
        pub struct BKE_R(crate::FieldReader<bool>);
        impl BKE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BKE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BKE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BKE` writer - Break enable"]
        pub struct BKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `OSSR` reader - Off-state selection for Run mode"]
        pub struct OSSR_R(crate::FieldReader<bool>);
        impl OSSR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OSSR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OSSR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OSSR` writer - Off-state selection for Run mode"]
        pub struct OSSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `OSSI` reader - Off-state selection for Idle mode"]
        pub struct OSSI_R(crate::FieldReader<bool>);
        impl OSSI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OSSI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OSSI_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OSSI` writer - Off-state selection for Idle mode"]
        pub struct OSSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `LOCK` reader - Lock configuration"]
        pub struct LOCK_R(crate::FieldReader<u8>);
        impl LOCK_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                LOCK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LOCK_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LOCK` writer - Lock configuration"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `DTG` reader - Dead-time generator setup"]
        pub struct DTG_R(crate::FieldReader<u8>);
        impl DTG_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DTG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DTG_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DTG` writer - Dead-time generator setup"]
        pub struct DTG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&self) -> MOE_R {
                MOE_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&self) -> AOE_R {
                AOE_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&self) -> BKE_R {
                BKE_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&self) -> OSSR_R {
                OSSR_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&self) -> OSSI_R {
                OSSI_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&self) -> DTG_R {
                DTG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&mut self) -> MOE_W {
                MOE_W { w: self }
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&mut self) -> AOE_W {
                AOE_W { w: self }
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&mut self) -> BKE_W {
                BKE_W { w: self }
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&mut self) -> OSSR_W {
                OSSR_W { w: self }
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&mut self) -> OSSI_W {
                OSSI_W { w: self }
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&mut self) -> DTG_W {
                DTG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](index.html) module"]
        pub struct BDTR_SPEC;
        impl crate::RegisterSpec for BDTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bdtr::R](R) reader structure"]
        impl crate::Readable for BDTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bdtr::W](W) writer structure"]
        impl crate::Writable for BDTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BDTR to value 0"]
        impl crate::Resettable for BDTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMACFGR register accessor: an alias for `Reg<DMACFGR_SPEC>`"]
    pub type DMACFGR = crate::Reg<dmacfgr::DMACFGR_SPEC>;
    #[doc = "DMA control register"]
    pub mod dmacfgr {
        #[doc = "Register `DMACFGR` reader"]
        pub struct R(crate::R<DMACFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMACFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMACFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMACFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMACFGR` writer"]
        pub struct W(crate::W<DMACFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMACFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMACFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMACFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DBL` reader - DMA burst length"]
        pub struct DBL_R(crate::FieldReader<u8>);
        impl DBL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DBL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBL` writer - DMA burst length"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | ((value as u32 & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Field `DBA` reader - DMA base address"]
        pub struct DBA_R(crate::FieldReader<u8>);
        impl DBA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DBA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBA_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBA` writer - DMA base address"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u32 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmacfgr](index.html) module"]
        pub struct DMACFGR_SPEC;
        impl crate::RegisterSpec for DMACFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmacfgr::R](R) reader structure"]
        impl crate::Readable for DMACFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmacfgr::W](W) writer structure"]
        impl crate::Writable for DMACFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMACFGR to value 0"]
        impl crate::Resettable for DMACFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAADR register accessor: an alias for `Reg<DMAADR_SPEC>`"]
    pub type DMAADR = crate::Reg<dmaadr::DMAADR_SPEC>;
    #[doc = "DMA address for full transfer"]
    pub mod dmaadr {
        #[doc = "Register `DMAADR` reader"]
        pub struct R(crate::R<DMAADR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAADR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAADR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAADR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAADR` writer"]
        pub struct W(crate::W<DMAADR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAADR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAADR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAADR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DMAADR` reader - DMA register for burst accesses"]
        pub struct DMAADR_R(crate::FieldReader<u16>);
        impl DMAADR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DMAADR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAADR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAADR` writer - DMA register for burst accesses"]
        pub struct DMAADR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAADR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmaadr(&self) -> DMAADR_R {
                DMAADR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmaadr(&mut self) -> DMAADR_W {
                DMAADR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaadr](index.html) module"]
        pub struct DMAADR_SPEC;
        impl crate::RegisterSpec for DMAADR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmaadr::R](R) reader structure"]
        impl crate::Readable for DMAADR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmaadr::W](W) writer structure"]
        impl crate::Writable for DMAADR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAADR to value 0"]
        impl crate::Resettable for DMAADR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General purpose timer"]
pub struct TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2 {}
impl TIM2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tim2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub ctlr1: crate::Reg<ctlr1::CTLR1_SPEC>,
        #[doc = "0x04 - control register 2"]
        pub ctlr2: crate::Reg<ctlr2::CTLR2_SPEC>,
        #[doc = "0x08 - slave mode control register"]
        pub smcfgr: crate::Reg<smcfgr::SMCFGR_SPEC>,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dmaintenr: crate::Reg<dmaintenr::DMAINTENR_SPEC>,
        #[doc = "0x10 - status register"]
        pub intfr: crate::Reg<intfr::INTFR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub swevgr: crate::Reg<swevgr::SWEVGR_SPEC>,
        _reserved_6_chctlr1: [u8; 0x04],
        _reserved_7_chctlr2: [u8; 0x04],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: crate::Reg<ccer::CCER_SPEC>,
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub atrlr: crate::Reg<atrlr::ATRLR_SPEC>,
        _reserved12: [u8; 0x04],
        #[doc = "0x34 - capture/compare register 1"]
        pub ch1cvr: crate::Reg<ch1cvr::CH1CVR_SPEC>,
        #[doc = "0x38 - capture/compare register 2"]
        pub ch2cvr: crate::Reg<ch2cvr::CH2CVR_SPEC>,
        #[doc = "0x3c - capture/compare register 3"]
        pub ch3cvr: crate::Reg<ch3cvr::CH3CVR_SPEC>,
        #[doc = "0x40 - capture/compare register 4"]
        pub ch4cvr: crate::Reg<ch4cvr::CH4CVR_SPEC>,
        _reserved16: [u8; 0x04],
        #[doc = "0x48 - DMA control register"]
        pub dmacfgr: crate::Reg<dmacfgr::DMACFGR_SPEC>,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmaadr: crate::Reg<dmaadr::DMAADR_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn chctlr1_input(&self) -> &crate::Reg<chctlr1_input::CHCTLR1_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<chctlr1_input::CHCTLR1_INPUT_SPEC>)
            }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn chctlr1_output(&self) -> &crate::Reg<chctlr1_output::CHCTLR1_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<chctlr1_output::CHCTLR1_OUTPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn chctlr2_input(&self) -> &crate::Reg<chctlr2_input::CHCTLR2_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<chctlr2_input::CHCTLR2_INPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn chctlr2_output(&self) -> &crate::Reg<chctlr2_output::CHCTLR2_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<chctlr2_output::CHCTLR2_OUTPUT_SPEC>)
            }
        }
    }
    #[doc = "CTLR1 register accessor: an alias for `Reg<CTLR1_SPEC>`"]
    pub type CTLR1 = crate::Reg<ctlr1::CTLR1_SPEC>;
    #[doc = "control register 1"]
    pub mod ctlr1 {
        #[doc = "Register `CTLR1` reader"]
        pub struct R(crate::R<CTLR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR1` writer"]
        pub struct W(crate::W<CTLR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CKD` reader - Clock division"]
        pub struct CKD_R(crate::FieldReader<u8>);
        impl CKD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CKD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CKD_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CKD` writer - Clock division"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `ARPE` reader - Auto-reload preload enable"]
        pub struct ARPE_R(crate::FieldReader<bool>);
        impl ARPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARPE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARPE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARPE` writer - Auto-reload preload enable"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `CMS` reader - Center-aligned mode selection"]
        pub struct CMS_R(crate::FieldReader<u8>);
        impl CMS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CMS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMS` writer - Center-aligned mode selection"]
        pub struct CMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 5)) | ((value as u32 & 3) << 5);
                self.w
            }
        }
        #[doc = "Field `DIR` reader - Direction"]
        pub struct DIR_R(crate::FieldReader<bool>);
        impl DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIR` writer - Direction"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `OPM` reader - One-pulse mode"]
        pub struct OPM_R(crate::FieldReader<bool>);
        impl OPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OPM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OPM` writer - One-pulse mode"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `URS` reader - Update request source"]
        pub struct URS_R(crate::FieldReader<bool>);
        impl URS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                URS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for URS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `URS` writer - Update request source"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `UDIS` reader - Update disable"]
        pub struct UDIS_R(crate::FieldReader<bool>);
        impl UDIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UDIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UDIS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UDIS` writer - Update disable"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `CEN` reader - Counter enable"]
        pub struct CEN_R(crate::FieldReader<bool>);
        impl CEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CEN` writer - Counter enable"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&self) -> CMS_R {
                CMS_R::new(((self.bits >> 5) & 3) as u8)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&mut self) -> CMS_W {
                CMS_W { w: self }
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr1](index.html) module"]
        pub struct CTLR1_SPEC;
        impl crate::RegisterSpec for CTLR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr1::R](R) reader structure"]
        impl crate::Readable for CTLR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr1::W](W) writer structure"]
        impl crate::Writable for CTLR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR1 to value 0"]
        impl crate::Resettable for CTLR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR2 register accessor: an alias for `Reg<CTLR2_SPEC>`"]
    pub type CTLR2 = crate::Reg<ctlr2::CTLR2_SPEC>;
    #[doc = "control register 2"]
    pub mod ctlr2 {
        #[doc = "Register `CTLR2` reader"]
        pub struct R(crate::R<CTLR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR2` writer"]
        pub struct W(crate::W<CTLR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TI1S` reader - TI1 selection"]
        pub struct TI1S_R(crate::FieldReader<bool>);
        impl TI1S_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TI1S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TI1S_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TI1S` writer - TI1 selection"]
        pub struct TI1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `MMS` reader - Master mode selection"]
        pub struct MMS_R(crate::FieldReader<u8>);
        impl MMS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MMS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MMS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MMS` writer - Master mode selection"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `CCDS` reader - Capture/compare DMA selection"]
        pub struct CCDS_R(crate::FieldReader<bool>);
        impl CCDS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCDS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCDS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCDS` writer - Capture/compare DMA selection"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CCUS` reader - Update selection"]
        pub struct CCUS_R(crate::FieldReader<bool>);
        impl CCUS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCUS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCUS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCUS` writer - Update selection"]
        pub struct CCUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CCPC` reader - Compare selection"]
        pub struct CCPC_R(crate::FieldReader<bool>);
        impl CCPC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCPC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCPC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCPC` writer - Compare selection"]
        pub struct CCPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCPC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&self) -> TI1S_R {
                TI1S_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Update selection"]
            #[inline(always)]
            pub fn ccus(&self) -> CCUS_R {
                CCUS_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 0 - Compare selection"]
            #[inline(always)]
            pub fn ccpc(&self) -> CCPC_R {
                CCPC_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&mut self) -> TI1S_W {
                TI1S_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
            #[doc = "Bit 2 - Update selection"]
            #[inline(always)]
            pub fn ccus(&mut self) -> CCUS_W {
                CCUS_W { w: self }
            }
            #[doc = "Bit 0 - Compare selection"]
            #[inline(always)]
            pub fn ccpc(&mut self) -> CCPC_W {
                CCPC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr2](index.html) module"]
        pub struct CTLR2_SPEC;
        impl crate::RegisterSpec for CTLR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr2::R](R) reader structure"]
        impl crate::Readable for CTLR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr2::W](W) writer structure"]
        impl crate::Writable for CTLR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR2 to value 0"]
        impl crate::Resettable for CTLR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SMCFGR register accessor: an alias for `Reg<SMCFGR_SPEC>`"]
    pub type SMCFGR = crate::Reg<smcfgr::SMCFGR_SPEC>;
    #[doc = "slave mode control register"]
    pub mod smcfgr {
        #[doc = "Register `SMCFGR` reader"]
        pub struct R(crate::R<SMCFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SMCFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SMCFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SMCFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SMCFGR` writer"]
        pub struct W(crate::W<SMCFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SMCFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SMCFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SMCFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ETP` reader - External trigger polarity"]
        pub struct ETP_R(crate::FieldReader<bool>);
        impl ETP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETP` writer - External trigger polarity"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `ECE` reader - External clock enable"]
        pub struct ECE_R(crate::FieldReader<bool>);
        impl ECE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ECE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ECE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ECE` writer - External clock enable"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `ETPS` reader - External trigger prescaler"]
        pub struct ETPS_R(crate::FieldReader<u8>);
        impl ETPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ETPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETPS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETPS` writer - External trigger prescaler"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `ETF` reader - External trigger filter"]
        pub struct ETF_R(crate::FieldReader<u8>);
        impl ETF_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ETF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETF_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETF` writer - External trigger filter"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | ((value as u32 & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Field `MSM` reader - Master/Slave mode"]
        pub struct MSM_R(crate::FieldReader<bool>);
        impl MSM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSM` writer - Master/Slave mode"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TS` reader - Trigger selection"]
        pub struct TS_R(crate::FieldReader<u8>);
        impl TS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TS` writer - Trigger selection"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `SMS` reader - Slave mode selection"]
        pub struct SMS_R(crate::FieldReader<u8>);
        impl SMS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMS_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMS` writer - Slave mode selection"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !7) | (value as u32 & 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcfgr](index.html) module"]
        pub struct SMCFGR_SPEC;
        impl crate::RegisterSpec for SMCFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [smcfgr::R](R) reader structure"]
        impl crate::Readable for SMCFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [smcfgr::W](W) writer structure"]
        impl crate::Writable for SMCFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SMCFGR to value 0"]
        impl crate::Resettable for SMCFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAINTENR register accessor: an alias for `Reg<DMAINTENR_SPEC>`"]
    pub type DMAINTENR = crate::Reg<dmaintenr::DMAINTENR_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dmaintenr {
        #[doc = "Register `DMAINTENR` reader"]
        pub struct R(crate::R<DMAINTENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAINTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAINTENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAINTENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAINTENR` writer"]
        pub struct W(crate::W<DMAINTENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAINTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAINTENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAINTENR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TDE` reader - Trigger DMA request enable"]
        pub struct TDE_R(crate::FieldReader<bool>);
        impl TDE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TDE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TDE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TDE` writer - Trigger DMA request enable"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `COMDE` reader - COM DMA request enable"]
        pub struct COMDE_R(crate::FieldReader<bool>);
        impl COMDE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                COMDE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for COMDE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `COMDE` writer - COM DMA request enable"]
        pub struct COMDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `CC4DE` reader - Capture/Compare 4 DMA request enable"]
        pub struct CC4DE_R(crate::FieldReader<bool>);
        impl CC4DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4DE` writer - Capture/Compare 4 DMA request enable"]
        pub struct CC4DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `CC3DE` reader - Capture/Compare 3 DMA request enable"]
        pub struct CC3DE_R(crate::FieldReader<bool>);
        impl CC3DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3DE` writer - Capture/Compare 3 DMA request enable"]
        pub struct CC3DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `CC2DE` reader - Capture/Compare 2 DMA request enable"]
        pub struct CC2DE_R(crate::FieldReader<bool>);
        impl CC2DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2DE` writer - Capture/Compare 2 DMA request enable"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC1DE` reader - Capture/Compare 1 DMA request enable"]
        pub struct CC1DE_R(crate::FieldReader<bool>);
        impl CC1DE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1DE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1DE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1DE` writer - Capture/Compare 1 DMA request enable"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `UDE` reader - Update DMA request enable"]
        pub struct UDE_R(crate::FieldReader<bool>);
        impl UDE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UDE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UDE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UDE` writer - Update DMA request enable"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `TIE` reader - Trigger interrupt enable"]
        pub struct TIE_R(crate::FieldReader<bool>);
        impl TIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIE` writer - Trigger interrupt enable"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `CC4IE` reader - Capture/Compare 4 interrupt enable"]
        pub struct CC4IE_R(crate::FieldReader<bool>);
        impl CC4IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4IE` writer - Capture/Compare 4 interrupt enable"]
        pub struct CC4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC3IE` reader - Capture/Compare 3 interrupt enable"]
        pub struct CC3IE_R(crate::FieldReader<bool>);
        impl CC3IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3IE` writer - Capture/Compare 3 interrupt enable"]
        pub struct CC3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CC2IE` reader - Capture/Compare 2 interrupt enable"]
        pub struct CC2IE_R(crate::FieldReader<bool>);
        impl CC2IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2IE` writer - Capture/Compare 2 interrupt enable"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1IE` reader - Capture/Compare 1 interrupt enable"]
        pub struct CC1IE_R(crate::FieldReader<bool>);
        impl CC1IE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1IE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1IE` writer - Capture/Compare 1 interrupt enable"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `UIE` reader - Update interrupt enable"]
        pub struct UIE_R(crate::FieldReader<bool>);
        impl UIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UIE` writer - Update interrupt enable"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&self) -> COMDE_R {
                COMDE_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&self) -> CC4DE_R {
                CC4DE_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&self) -> CC3DE_R {
                CC3DE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&self) -> CC4IE_R {
                CC4IE_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&self) -> CC3IE_R {
                CC3IE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&mut self) -> COMDE_W {
                COMDE_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&mut self) -> CC4DE_W {
                CC4DE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&mut self) -> CC3DE_W {
                CC3DE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&mut self) -> CC4IE_W {
                CC4IE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&mut self) -> CC3IE_W {
                CC3IE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaintenr](index.html) module"]
        pub struct DMAINTENR_SPEC;
        impl crate::RegisterSpec for DMAINTENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmaintenr::R](R) reader structure"]
        impl crate::Readable for DMAINTENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmaintenr::W](W) writer structure"]
        impl crate::Writable for DMAINTENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAINTENR to value 0"]
        impl crate::Resettable for DMAINTENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "INTFR register accessor: an alias for `Reg<INTFR_SPEC>`"]
    pub type INTFR = crate::Reg<intfr::INTFR_SPEC>;
    #[doc = "status register"]
    pub mod intfr {
        #[doc = "Register `INTFR` reader"]
        pub struct R(crate::R<INTFR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INTFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INTFR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INTFR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `INTFR` writer"]
        pub struct W(crate::W<INTFR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<INTFR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<INTFR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<INTFR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CC4OF` reader - Capture/Compare 4 overcapture flag"]
        pub struct CC4OF_R(crate::FieldReader<bool>);
        impl CC4OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4OF` writer - Capture/Compare 4 overcapture flag"]
        pub struct CC4OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `CC3OF` reader - Capture/Compare 3 overcapture flag"]
        pub struct CC3OF_R(crate::FieldReader<bool>);
        impl CC3OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3OF` writer - Capture/Compare 3 overcapture flag"]
        pub struct CC3OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `CC2OF` reader - Capture/compare 2 overcapture flag"]
        pub struct CC2OF_R(crate::FieldReader<bool>);
        impl CC2OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2OF` writer - Capture/compare 2 overcapture flag"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag"]
        pub struct CC1OF_R(crate::FieldReader<bool>);
        impl CC1OF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1OF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `TIF` reader - Trigger interrupt flag"]
        pub struct TIF_R(crate::FieldReader<bool>);
        impl TIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIF` writer - Trigger interrupt flag"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `CC4IF` reader - Capture/Compare 4 interrupt flag"]
        pub struct CC4IF_R(crate::FieldReader<bool>);
        impl CC4IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4IF` writer - Capture/Compare 4 interrupt flag"]
        pub struct CC4IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC3IF` reader - Capture/Compare 3 interrupt flag"]
        pub struct CC3IF_R(crate::FieldReader<bool>);
        impl CC3IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3IF` writer - Capture/Compare 3 interrupt flag"]
        pub struct CC3IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CC2IF` reader - Capture/Compare 2 interrupt flag"]
        pub struct CC2IF_R(crate::FieldReader<bool>);
        impl CC2IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2IF` writer - Capture/Compare 2 interrupt flag"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1IF` reader - Capture/compare 1 interrupt flag"]
        pub struct CC1IF_R(crate::FieldReader<bool>);
        impl CC1IF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1IF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1IF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1IF` writer - Capture/compare 1 interrupt flag"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `UIF` reader - Update interrupt flag"]
        pub struct UIF_R(crate::FieldReader<bool>);
        impl UIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UIF` writer - Update interrupt flag"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&self) -> CC4OF_R {
                CC4OF_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&self) -> CC3OF_R {
                CC3OF_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&self) -> CC4IF_R {
                CC4IF_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&self) -> CC3IF_R {
                CC3IF_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&mut self) -> CC4OF_W {
                CC4OF_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&mut self) -> CC3OF_W {
                CC3OF_W { w: self }
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&mut self) -> CC4IF_W {
                CC4IF_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&mut self) -> CC3IF_W {
                CC3IF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intfr](index.html) module"]
        pub struct INTFR_SPEC;
        impl crate::RegisterSpec for INTFR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [intfr::R](R) reader structure"]
        impl crate::Readable for INTFR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [intfr::W](W) writer structure"]
        impl crate::Writable for INTFR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets INTFR to value 0"]
        impl crate::Resettable for INTFR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SWEVGR register accessor: an alias for `Reg<SWEVGR_SPEC>`"]
    pub type SWEVGR = crate::Reg<swevgr::SWEVGR_SPEC>;
    #[doc = "event generation register"]
    pub mod swevgr {
        #[doc = "Register `SWEVGR` writer"]
        pub struct W(crate::W<SWEVGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SWEVGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SWEVGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SWEVGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BG` writer - Brake generation"]
        pub struct BG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TG` writer - Trigger generation"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `COMG` writer - Capture/compare generation"]
        pub struct COMG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `CC4G` writer - Capture/compare 4 generation"]
        pub struct CC4G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC3G` writer - Capture/compare 3 generation"]
        pub struct CC3G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CC2G` writer - Capture/compare 2 generation"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1G` writer - Capture/compare 1 generation"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `UG` writer - Update generation"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 7 - Brake generation"]
            #[inline(always)]
            pub fn bg(&mut self) -> BG_W {
                BG_W { w: self }
            }
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 5 - Capture/compare generation"]
            #[inline(always)]
            pub fn comg(&mut self) -> COMG_W {
                COMG_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&mut self) -> CC4G_W {
                CC4G_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&mut self) -> CC3G_W {
                CC3G_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swevgr](index.html) module"]
        pub struct SWEVGR_SPEC;
        impl crate::RegisterSpec for SWEVGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [swevgr::W](W) writer structure"]
        impl crate::Writable for SWEVGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SWEVGR to value 0"]
        impl crate::Resettable for SWEVGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR1_Output register accessor: an alias for `Reg<CHCTLR1_OUTPUT_SPEC>`"]
    pub type CHCTLR1_OUTPUT = crate::Reg<chctlr1_output::CHCTLR1_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (output mode)"]
    pub mod chctlr1_output {
        #[doc = "Register `CHCTLR1_Output` reader"]
        pub struct R(crate::R<CHCTLR1_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR1_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR1_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR1_Output` writer"]
        pub struct W(crate::W<CHCTLR1_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR1_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR1_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OC2CE` reader - Output compare 2 clear enable"]
        pub struct OC2CE_R(crate::FieldReader<bool>);
        impl OC2CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC2CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2CE` writer - Output compare 2 clear enable"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `OC2M` reader - Output compare 2 mode"]
        pub struct OC2M_R(crate::FieldReader<u8>);
        impl OC2M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC2M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2M` writer - Output compare 2 mode"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 12)) | ((value as u32 & 7) << 12);
                self.w
            }
        }
        #[doc = "Field `OC2PE` reader - Output compare 2 preload enable"]
        pub struct OC2PE_R(crate::FieldReader<bool>);
        impl OC2PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC2PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2PE` writer - Output compare 2 preload enable"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `OC2FE` reader - Output compare 2 fast enable"]
        pub struct OC2FE_R(crate::FieldReader<bool>);
        impl OC2FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC2FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC2FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC2FE` writer - Output compare 2 fast enable"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC2S` reader - Capture/Compare 2 selection"]
        pub struct CC2S_R(crate::FieldReader<u8>);
        impl CC2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2S` writer - Capture/Compare 2 selection"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `OC1CE` reader - Output compare 1 clear enable"]
        pub struct OC1CE_R(crate::FieldReader<bool>);
        impl OC1CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC1CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1CE` writer - Output compare 1 clear enable"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `OC1M` reader - Output compare 1 mode"]
        pub struct OC1M_R(crate::FieldReader<u8>);
        impl OC1M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC1M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1M` writer - Output compare 1 mode"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `OC1PE` reader - Output compare 1 preload enable"]
        pub struct OC1PE_R(crate::FieldReader<bool>);
        impl OC1PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC1PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1PE` writer - Output compare 1 preload enable"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `OC1FE` reader - Output compare 1 fast enable"]
        pub struct OC1FE_R(crate::FieldReader<bool>);
        impl OC1FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC1FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC1FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC1FE` writer - Output compare 1 fast enable"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1S` reader - Capture/Compare 1 selection"]
        pub struct CC1S_R(crate::FieldReader<u8>);
        impl CC1S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC1S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1S` writer - Capture/Compare 1 selection"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr1_output](index.html) module"]
        pub struct CHCTLR1_OUTPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR1_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr1_output::R](R) reader structure"]
        impl crate::Readable for CHCTLR1_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr1_output::W](W) writer structure"]
        impl crate::Writable for CHCTLR1_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR1_Output to value 0"]
        impl crate::Resettable for CHCTLR1_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR1_Input register accessor: an alias for `Reg<CHCTLR1_INPUT_SPEC>`"]
    pub type CHCTLR1_INPUT = crate::Reg<chctlr1_input::CHCTLR1_INPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod chctlr1_input {
        #[doc = "Register `CHCTLR1_Input` reader"]
        pub struct R(crate::R<CHCTLR1_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR1_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR1_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR1_Input` writer"]
        pub struct W(crate::W<CHCTLR1_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR1_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR1_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IC2F` reader - Input capture 2 filter"]
        pub struct IC2F_R(crate::FieldReader<u8>);
        impl IC2F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC2F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC2F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC2F` writer - Input capture 2 filter"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Field `IC2PSC` reader - Input capture 2 prescaler"]
        pub struct IC2PSC_R(crate::FieldReader<u8>);
        impl IC2PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC2PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC2PSC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC2PSC` writer - Input capture 2 prescaler"]
        pub struct IC2PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `CC2S` reader - Capture/compare 2 selection"]
        pub struct CC2S_R(crate::FieldReader<u8>);
        impl CC2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2S` writer - Capture/compare 2 selection"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `IC1F` reader - Input capture 1 filter"]
        pub struct IC1F_R(crate::FieldReader<u8>);
        impl IC1F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC1F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC1F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC1F` writer - Input capture 1 filter"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `IC1PSC` reader - Input capture 1 prescaler"]
        pub struct IC1PSC_R(crate::FieldReader<u8>);
        impl IC1PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC1PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC1PSC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC1PSC` writer - Input capture 1 prescaler"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u32 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `CC1S` reader - Capture/Compare 1 selection"]
        pub struct CC1S_R(crate::FieldReader<u8>);
        impl CC1S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC1S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1S` writer - Capture/Compare 1 selection"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&self) -> IC2PSC_R {
                IC2PSC_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Capture/compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&mut self) -> IC2PSC_W {
                IC2PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr1_input](index.html) module"]
        pub struct CHCTLR1_INPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR1_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr1_input::R](R) reader structure"]
        impl crate::Readable for CHCTLR1_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr1_input::W](W) writer structure"]
        impl crate::Writable for CHCTLR1_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR1_Input to value 0"]
        impl crate::Resettable for CHCTLR1_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR2_Output register accessor: an alias for `Reg<CHCTLR2_OUTPUT_SPEC>`"]
    pub type CHCTLR2_OUTPUT = crate::Reg<chctlr2_output::CHCTLR2_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register 2 (output mode)"]
    pub mod chctlr2_output {
        #[doc = "Register `CHCTLR2_Output` reader"]
        pub struct R(crate::R<CHCTLR2_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR2_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR2_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR2_Output` writer"]
        pub struct W(crate::W<CHCTLR2_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR2_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR2_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OC4CE` reader - Output compare 4 clear enable"]
        pub struct OC4CE_R(crate::FieldReader<bool>);
        impl OC4CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC4CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4CE` writer - Output compare 4 clear enable"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `OC4M` reader - Output compare 4 mode"]
        pub struct OC4M_R(crate::FieldReader<u8>);
        impl OC4M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC4M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4M` writer - Output compare 4 mode"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 12)) | ((value as u32 & 7) << 12);
                self.w
            }
        }
        #[doc = "Field `OC4PE` reader - Output compare 4 preload enable"]
        pub struct OC4PE_R(crate::FieldReader<bool>);
        impl OC4PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC4PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4PE` writer - Output compare 4 preload enable"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `OC4FE` reader - Output compare 4 fast enable"]
        pub struct OC4FE_R(crate::FieldReader<bool>);
        impl OC4FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC4FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC4FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC4FE` writer - Output compare 4 fast enable"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CC4S` reader - Capture/Compare 4 selection"]
        pub struct CC4S_R(crate::FieldReader<u8>);
        impl CC4S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC4S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4S` writer - Capture/Compare 4 selection"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `OC3CE` reader - Output compare 3 clear enable"]
        pub struct OC3CE_R(crate::FieldReader<bool>);
        impl OC3CE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC3CE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3CE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3CE` writer - Output compare 3 clear enable"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `OC3M` reader - Output compare 3 mode"]
        pub struct OC3M_R(crate::FieldReader<u8>);
        impl OC3M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OC3M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3M_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3M` writer - Output compare 3 mode"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 4)) | ((value as u32 & 7) << 4);
                self.w
            }
        }
        #[doc = "Field `OC3PE` reader - Output compare 3 preload enable"]
        pub struct OC3PE_R(crate::FieldReader<bool>);
        impl OC3PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC3PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3PE` writer - Output compare 3 preload enable"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `OC3FE` reader - Output compare 3 fast enable"]
        pub struct OC3FE_R(crate::FieldReader<bool>);
        impl OC3FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OC3FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OC3FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OC3FE` writer - Output compare 3 fast enable"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CC3S` reader - Capture/Compare 3 selection"]
        pub struct CC3S_R(crate::FieldReader<u8>);
        impl CC3S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC3S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3S` writer - Capture/Compare 3 selection"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 2 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr2_output](index.html) module"]
        pub struct CHCTLR2_OUTPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR2_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr2_output::R](R) reader structure"]
        impl crate::Readable for CHCTLR2_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr2_output::W](W) writer structure"]
        impl crate::Writable for CHCTLR2_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR2_Output to value 0"]
        impl crate::Resettable for CHCTLR2_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHCTLR2_Input register accessor: an alias for `Reg<CHCTLR2_INPUT_SPEC>`"]
    pub type CHCTLR2_INPUT = crate::Reg<chctlr2_input::CHCTLR2_INPUT_SPEC>;
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod chctlr2_input {
        #[doc = "Register `CHCTLR2_Input` reader"]
        pub struct R(crate::R<CHCTLR2_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHCTLR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHCTLR2_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHCTLR2_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CHCTLR2_Input` writer"]
        pub struct W(crate::W<CHCTLR2_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CHCTLR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CHCTLR2_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CHCTLR2_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IC4F` reader - Input capture 4 filter"]
        pub struct IC4F_R(crate::FieldReader<u8>);
        impl IC4F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC4F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC4F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC4F` writer - Input capture 4 filter"]
        pub struct IC4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u32 & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Field `IC4PSC` reader - Input capture 4 prescaler"]
        pub struct IC4PSC_R(crate::FieldReader<u8>);
        impl IC4PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC4PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC4PSC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC4PSC` writer - Input capture 4 prescaler"]
        pub struct IC4PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 10)) | ((value as u32 & 3) << 10);
                self.w
            }
        }
        #[doc = "Field `CC4S` reader - Capture/Compare 4 selection"]
        pub struct CC4S_R(crate::FieldReader<u8>);
        impl CC4S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC4S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4S` writer - Capture/Compare 4 selection"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `IC3F` reader - Input capture 3 filter"]
        pub struct IC3F_R(crate::FieldReader<u8>);
        impl IC3F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC3F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC3F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC3F` writer - Input capture 3 filter"]
        pub struct IC3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u32 & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Field `IC3PSC` reader - Input capture 3 prescaler"]
        pub struct IC3PSC_R(crate::FieldReader<u8>);
        impl IC3PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IC3PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IC3PSC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IC3PSC` writer - Input capture 3 prescaler"]
        pub struct IC3PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u32 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `CC3S` reader - Capture/Compare 3 selection"]
        pub struct CC3S_R(crate::FieldReader<u8>);
        impl CC3S_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CC3S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3S_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3S` writer - Capture/Compare 3 selection"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u32 & 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&self) -> IC4F_R {
                IC4F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&self) -> IC4PSC_R {
                IC4PSC_R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&self) -> IC3F_R {
                IC3F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&self) -> IC3PSC_R {
                IC3PSC_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&mut self) -> IC4F_W {
                IC4F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&mut self) -> IC4PSC_W {
                IC4PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&mut self) -> IC3F_W {
                IC3F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&mut self) -> IC3PSC_W {
                IC3PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctlr2_input](index.html) module"]
        pub struct CHCTLR2_INPUT_SPEC;
        impl crate::RegisterSpec for CHCTLR2_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chctlr2_input::R](R) reader structure"]
        impl crate::Readable for CHCTLR2_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [chctlr2_input::W](W) writer structure"]
        impl crate::Writable for CHCTLR2_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CHCTLR2_Input to value 0"]
        impl crate::Resettable for CHCTLR2_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCER register accessor: an alias for `Reg<CCER_SPEC>`"]
    pub type CCER = crate::Reg<ccer::CCER_SPEC>;
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Register `CCER` reader"]
        pub struct R(crate::R<CCER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCER` writer"]
        pub struct W(crate::W<CCER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCER_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CC4P` reader - Capture/Compare 3 output Polarity"]
        pub struct CC4P_R(crate::FieldReader<bool>);
        impl CC4P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4P` writer - Capture/Compare 3 output Polarity"]
        pub struct CC4P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `CC4E` reader - Capture/Compare 4 output enable"]
        pub struct CC4E_R(crate::FieldReader<bool>);
        impl CC4E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC4E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC4E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC4E` writer - Capture/Compare 4 output enable"]
        pub struct CC4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `CC3P` reader - Capture/Compare 3 output Polarity"]
        pub struct CC3P_R(crate::FieldReader<bool>);
        impl CC3P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3P` writer - Capture/Compare 3 output Polarity"]
        pub struct CC3P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `CC3E` reader - Capture/Compare 3 output enable"]
        pub struct CC3E_R(crate::FieldReader<bool>);
        impl CC3E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC3E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC3E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC3E` writer - Capture/Compare 3 output enable"]
        pub struct CC3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `CC2P` reader - Capture/Compare 2 output Polarity"]
        pub struct CC2P_R(crate::FieldReader<bool>);
        impl CC2P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2P` writer - Capture/Compare 2 output Polarity"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `CC2E` reader - Capture/Compare 2 output enable"]
        pub struct CC2E_R(crate::FieldReader<bool>);
        impl CC2E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC2E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC2E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC2E` writer - Capture/Compare 2 output enable"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `CC1P` reader - Capture/Compare 1 output Polarity"]
        pub struct CC1P_R(crate::FieldReader<bool>);
        impl CC1P_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1P_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1P_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1P` writer - Capture/Compare 1 output Polarity"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `CC1E` reader - Capture/Compare 1 output enable"]
        pub struct CC1E_R(crate::FieldReader<bool>);
        impl CC1E_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CC1E_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CC1E_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CC1E` writer - Capture/Compare 1 output enable"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&self) -> CC4P_R {
                CC4P_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&self) -> CC4E_R {
                CC4E_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&self) -> CC3P_R {
                CC3P_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&self) -> CC3E_R {
                CC3E_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&mut self) -> CC4P_W {
                CC4P_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&mut self) -> CC4E_W {
                CC4E_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&mut self) -> CC3P_W {
                CC3P_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&mut self) -> CC3E_W {
                CC3E_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](index.html) module"]
        pub struct CCER_SPEC;
        impl crate::RegisterSpec for CCER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccer::R](R) reader structure"]
        impl crate::Readable for CCER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccer::W](W) writer structure"]
        impl crate::Writable for CCER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCER to value 0"]
        impl crate::Resettable for CCER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CNT` reader - counter value"]
        pub struct CNT_R(crate::FieldReader<u16>);
        impl CNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNT` writer - counter value"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PSC` reader - Prescaler value"]
        pub struct PSC_R(crate::FieldReader<u16>);
        impl PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSC_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSC` writer - Prescaler value"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ATRLR register accessor: an alias for `Reg<ATRLR_SPEC>`"]
    pub type ATRLR = crate::Reg<atrlr::ATRLR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod atrlr {
        #[doc = "Register `ATRLR` reader"]
        pub struct R(crate::R<ATRLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ATRLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ATRLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ATRLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ATRLR` writer"]
        pub struct W(crate::W<ATRLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ATRLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ATRLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ATRLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ATRLR` reader - Auto-reload value"]
        pub struct ATRLR_R(crate::FieldReader<u16>);
        impl ATRLR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                ATRLR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ATRLR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ATRLR` writer - Auto-reload value"]
        pub struct ATRLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ATRLR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn atrlr(&self) -> ATRLR_R {
                ATRLR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn atrlr(&mut self) -> ATRLR_W {
                ATRLR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [atrlr](index.html) module"]
        pub struct ATRLR_SPEC;
        impl crate::RegisterSpec for ATRLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [atrlr::R](R) reader structure"]
        impl crate::Readable for ATRLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [atrlr::W](W) writer structure"]
        impl crate::Writable for ATRLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ATRLR to value 0"]
        impl crate::Resettable for ATRLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH1CVR register accessor: an alias for `Reg<CH1CVR_SPEC>`"]
    pub type CH1CVR = crate::Reg<ch1cvr::CH1CVR_SPEC>;
    #[doc = "capture/compare register 1"]
    pub mod ch1cvr {
        #[doc = "Register `CH1CVR` reader"]
        pub struct R(crate::R<CH1CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH1CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH1CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH1CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH1CVR` writer"]
        pub struct W(crate::W<CH1CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH1CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH1CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH1CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH1CVR` reader - Capture/Compare 1 value"]
        pub struct CH1CVR_R(crate::FieldReader<u16>);
        impl CH1CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH1CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH1CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH1CVR` writer - Capture/Compare 1 value"]
        pub struct CH1CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ch1cvr(&self) -> CH1CVR_R {
                CH1CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ch1cvr(&mut self) -> CH1CVR_W {
                CH1CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch1cvr](index.html) module"]
        pub struct CH1CVR_SPEC;
        impl crate::RegisterSpec for CH1CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch1cvr::R](R) reader structure"]
        impl crate::Readable for CH1CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch1cvr::W](W) writer structure"]
        impl crate::Writable for CH1CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH1CVR to value 0"]
        impl crate::Resettable for CH1CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH2CVR register accessor: an alias for `Reg<CH2CVR_SPEC>`"]
    pub type CH2CVR = crate::Reg<ch2cvr::CH2CVR_SPEC>;
    #[doc = "capture/compare register 2"]
    pub mod ch2cvr {
        #[doc = "Register `CH2CVR` reader"]
        pub struct R(crate::R<CH2CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH2CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH2CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH2CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH2CVR` writer"]
        pub struct W(crate::W<CH2CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH2CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH2CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH2CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH2CVR` reader - Capture/Compare 2 value"]
        pub struct CH2CVR_R(crate::FieldReader<u16>);
        impl CH2CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH2CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH2CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH2CVR` writer - Capture/Compare 2 value"]
        pub struct CH2CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ch2cvr(&self) -> CH2CVR_R {
                CH2CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ch2cvr(&mut self) -> CH2CVR_W {
                CH2CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch2cvr](index.html) module"]
        pub struct CH2CVR_SPEC;
        impl crate::RegisterSpec for CH2CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch2cvr::R](R) reader structure"]
        impl crate::Readable for CH2CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch2cvr::W](W) writer structure"]
        impl crate::Writable for CH2CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH2CVR to value 0"]
        impl crate::Resettable for CH2CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH3CVR register accessor: an alias for `Reg<CH3CVR_SPEC>`"]
    pub type CH3CVR = crate::Reg<ch3cvr::CH3CVR_SPEC>;
    #[doc = "capture/compare register 3"]
    pub mod ch3cvr {
        #[doc = "Register `CH3CVR` reader"]
        pub struct R(crate::R<CH3CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH3CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH3CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH3CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH3CVR` writer"]
        pub struct W(crate::W<CH3CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH3CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH3CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH3CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH3CVR` reader - Capture/Compare value"]
        pub struct CH3CVR_R(crate::FieldReader<u16>);
        impl CH3CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH3CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH3CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH3CVR` writer - Capture/Compare value"]
        pub struct CH3CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch3cvr(&self) -> CH3CVR_R {
                CH3CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch3cvr(&mut self) -> CH3CVR_W {
                CH3CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch3cvr](index.html) module"]
        pub struct CH3CVR_SPEC;
        impl crate::RegisterSpec for CH3CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch3cvr::R](R) reader structure"]
        impl crate::Readable for CH3CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch3cvr::W](W) writer structure"]
        impl crate::Writable for CH3CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH3CVR to value 0"]
        impl crate::Resettable for CH3CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CH4CVR register accessor: an alias for `Reg<CH4CVR_SPEC>`"]
    pub type CH4CVR = crate::Reg<ch4cvr::CH4CVR_SPEC>;
    #[doc = "capture/compare register 4"]
    pub mod ch4cvr {
        #[doc = "Register `CH4CVR` reader"]
        pub struct R(crate::R<CH4CVR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CH4CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CH4CVR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CH4CVR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CH4CVR` writer"]
        pub struct W(crate::W<CH4CVR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CH4CVR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CH4CVR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CH4CVR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CH4CVR` reader - Capture/Compare value"]
        pub struct CH4CVR_R(crate::FieldReader<u16>);
        impl CH4CVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CH4CVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CH4CVR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CH4CVR` writer - Capture/Compare value"]
        pub struct CH4CVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4CVR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch4cvr(&self) -> CH4CVR_R {
                CH4CVR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ch4cvr(&mut self) -> CH4CVR_W {
                CH4CVR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch4cvr](index.html) module"]
        pub struct CH4CVR_SPEC;
        impl crate::RegisterSpec for CH4CVR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ch4cvr::R](R) reader structure"]
        impl crate::Readable for CH4CVR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ch4cvr::W](W) writer structure"]
        impl crate::Writable for CH4CVR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CH4CVR to value 0"]
        impl crate::Resettable for CH4CVR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMACFGR register accessor: an alias for `Reg<DMACFGR_SPEC>`"]
    pub type DMACFGR = crate::Reg<dmacfgr::DMACFGR_SPEC>;
    #[doc = "DMA control register"]
    pub mod dmacfgr {
        #[doc = "Register `DMACFGR` reader"]
        pub struct R(crate::R<DMACFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMACFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMACFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMACFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMACFGR` writer"]
        pub struct W(crate::W<DMACFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMACFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMACFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMACFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DBL` reader - DMA burst length"]
        pub struct DBL_R(crate::FieldReader<u8>);
        impl DBL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DBL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBL` writer - DMA burst length"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | ((value as u32 & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Field `DBA` reader - DMA base address"]
        pub struct DBA_R(crate::FieldReader<u8>);
        impl DBA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DBA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBA_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBA` writer - DMA base address"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u32 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmacfgr](index.html) module"]
        pub struct DMACFGR_SPEC;
        impl crate::RegisterSpec for DMACFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmacfgr::R](R) reader structure"]
        impl crate::Readable for DMACFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmacfgr::W](W) writer structure"]
        impl crate::Writable for DMACFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMACFGR to value 0"]
        impl crate::Resettable for DMACFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAADR register accessor: an alias for `Reg<DMAADR_SPEC>`"]
    pub type DMAADR = crate::Reg<dmaadr::DMAADR_SPEC>;
    #[doc = "DMA address for full transfer"]
    pub mod dmaadr {
        #[doc = "Register `DMAADR` reader"]
        pub struct R(crate::R<DMAADR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAADR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAADR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAADR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAADR` writer"]
        pub struct W(crate::W<DMAADR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAADR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAADR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAADR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DMAADR` reader - DMA register for burst accesses"]
        pub struct DMAADR_R(crate::FieldReader<u16>);
        impl DMAADR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DMAADR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAADR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAADR` writer - DMA register for burst accesses"]
        pub struct DMAADR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAADR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmaadr(&self) -> DMAADR_R {
                DMAADR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmaadr(&mut self) -> DMAADR_W {
                DMAADR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaadr](index.html) module"]
        pub struct DMAADR_SPEC;
        impl crate::RegisterSpec for DMAADR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmaadr::R](R) reader structure"]
        impl crate::Readable for DMAADR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmaadr::W](W) writer structure"]
        impl crate::Writable for DMAADR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAADR to value 0"]
        impl crate::Resettable for DMAADR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General purpose timer"]
pub struct TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3 {}
impl TIM3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM3 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
#[doc = "General purpose timer"]
pub use tim2 as tim3;
#[doc = "General purpose timer"]
pub struct TIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM4 {}
impl TIM4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM4 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
#[doc = "General purpose timer"]
pub use tim2 as tim4;
#[doc = "Inter integrated circuit"]
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub mod i2c1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register 1"]
        pub ctlr1: crate::Reg<ctlr1::CTLR1_SPEC>,
        #[doc = "0x04 - Control register 2"]
        pub ctlr2: crate::Reg<ctlr2::CTLR2_SPEC>,
        #[doc = "0x08 - Own address register 1"]
        pub oaddr1: crate::Reg<oaddr1::OADDR1_SPEC>,
        #[doc = "0x0c - Own address register 2"]
        pub oaddr2: crate::Reg<oaddr2::OADDR2_SPEC>,
        #[doc = "0x10 - Data register"]
        pub datar: crate::Reg<datar::DATAR_SPEC>,
        #[doc = "0x14 - Status register 1"]
        pub star1: crate::Reg<star1::STAR1_SPEC>,
        #[doc = "0x18 - Status register 2"]
        pub star2: crate::Reg<star2::STAR2_SPEC>,
        #[doc = "0x1c - Clock control register"]
        pub ckcfgr: crate::Reg<ckcfgr::CKCFGR_SPEC>,
        #[doc = "0x20 - Raise time register"]
        pub rtr: crate::Reg<rtr::RTR_SPEC>,
    }
    #[doc = "CTLR1 register accessor: an alias for `Reg<CTLR1_SPEC>`"]
    pub type CTLR1 = crate::Reg<ctlr1::CTLR1_SPEC>;
    #[doc = "Control register 1"]
    pub mod ctlr1 {
        #[doc = "Register `CTLR1` reader"]
        pub struct R(crate::R<CTLR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR1` writer"]
        pub struct W(crate::W<CTLR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SWRST` reader - Software reset"]
        pub struct SWRST_R(crate::FieldReader<bool>);
        impl SWRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SWRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SWRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SWRST` writer - Software reset"]
        pub struct SWRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `ALERT` reader - SMBus alert"]
        pub struct ALERT_R(crate::FieldReader<bool>);
        impl ALERT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ALERT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ALERT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ALERT` writer - SMBus alert"]
        pub struct ALERT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALERT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `PEC` reader - Packet error checking"]
        pub struct PEC_R(crate::FieldReader<bool>);
        impl PEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PEC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PEC` writer - Packet error checking"]
        pub struct PEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `POS` reader - Acknowledge/PEC Position (for data reception)"]
        pub struct POS_R(crate::FieldReader<bool>);
        impl POS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POS` writer - Acknowledge/PEC Position (for data reception)"]
        pub struct POS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `ACK` reader - Acknowledge enable"]
        pub struct ACK_R(crate::FieldReader<bool>);
        impl ACK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACK` writer - Acknowledge enable"]
        pub struct ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `STOP` reader - Stop generation"]
        pub struct STOP_R(crate::FieldReader<bool>);
        impl STOP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STOP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STOP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STOP` writer - Stop generation"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `START` reader - Start generation"]
        pub struct START_R(crate::FieldReader<bool>);
        impl START_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                START_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for START_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `START` writer - Start generation"]
        pub struct START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `NOSTRETCH` reader - Clock stretching disable (Slave mode)"]
        pub struct NOSTRETCH_R(crate::FieldReader<bool>);
        impl NOSTRETCH_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NOSTRETCH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NOSTRETCH_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NOSTRETCH` writer - Clock stretching disable (Slave mode)"]
        pub struct NOSTRETCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOSTRETCH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `ENGC` reader - General call enable"]
        pub struct ENGC_R(crate::FieldReader<bool>);
        impl ENGC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENGC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENGC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENGC` writer - General call enable"]
        pub struct ENGC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENGC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `ENPEC` reader - PEC enable"]
        pub struct ENPEC_R(crate::FieldReader<bool>);
        impl ENPEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENPEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENPEC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENPEC` writer - PEC enable"]
        pub struct ENPEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENPEC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `ENARP` reader - ARP enable"]
        pub struct ENARP_R(crate::FieldReader<bool>);
        impl ENARP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENARP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENARP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENARP` writer - ARP enable"]
        pub struct ENARP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENARP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `SMBTYPE` reader - SMBus type"]
        pub struct SMBTYPE_R(crate::FieldReader<bool>);
        impl SMBTYPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMBTYPE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMBTYPE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMBTYPE` writer - SMBus type"]
        pub struct SMBTYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBTYPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `SMBUS` reader - SMBus mode"]
        pub struct SMBUS_R(crate::FieldReader<bool>);
        impl SMBUS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMBUS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMBUS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMBUS` writer - SMBus mode"]
        pub struct SMBUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `PE` reader - Peripheral enable"]
        pub struct PE_R(crate::FieldReader<bool>);
        impl PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PE` writer - Peripheral enable"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            pub fn swrst(&self) -> SWRST_R {
                SWRST_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            pub fn alert(&self) -> ALERT_R {
                ALERT_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Packet error checking"]
            #[inline(always)]
            pub fn pec(&self) -> PEC_R {
                PEC_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Acknowledge/PEC Position (for data reception)"]
            #[inline(always)]
            pub fn pos(&self) -> POS_R {
                POS_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Acknowledge enable"]
            #[inline(always)]
            pub fn ack(&self) -> ACK_R {
                ACK_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Stop generation"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Start generation"]
            #[inline(always)]
            pub fn start(&self) -> START_R {
                START_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - Clock stretching disable (Slave mode)"]
            #[inline(always)]
            pub fn nostretch(&self) -> NOSTRETCH_R {
                NOSTRETCH_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - General call enable"]
            #[inline(always)]
            pub fn engc(&self) -> ENGC_R {
                ENGC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - PEC enable"]
            #[inline(always)]
            pub fn enpec(&self) -> ENPEC_R {
                ENPEC_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - ARP enable"]
            #[inline(always)]
            pub fn enarp(&self) -> ENARP_R {
                ENARP_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - SMBus type"]
            #[inline(always)]
            pub fn smbtype(&self) -> SMBTYPE_R {
                SMBTYPE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 1 - SMBus mode"]
            #[inline(always)]
            pub fn smbus(&self) -> SMBUS_R {
                SMBUS_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            pub fn swrst(&mut self) -> SWRST_W {
                SWRST_W { w: self }
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            pub fn alert(&mut self) -> ALERT_W {
                ALERT_W { w: self }
            }
            #[doc = "Bit 12 - Packet error checking"]
            #[inline(always)]
            pub fn pec(&mut self) -> PEC_W {
                PEC_W { w: self }
            }
            #[doc = "Bit 11 - Acknowledge/PEC Position (for data reception)"]
            #[inline(always)]
            pub fn pos(&mut self) -> POS_W {
                POS_W { w: self }
            }
            #[doc = "Bit 10 - Acknowledge enable"]
            #[inline(always)]
            pub fn ack(&mut self) -> ACK_W {
                ACK_W { w: self }
            }
            #[doc = "Bit 9 - Stop generation"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 8 - Start generation"]
            #[inline(always)]
            pub fn start(&mut self) -> START_W {
                START_W { w: self }
            }
            #[doc = "Bit 7 - Clock stretching disable (Slave mode)"]
            #[inline(always)]
            pub fn nostretch(&mut self) -> NOSTRETCH_W {
                NOSTRETCH_W { w: self }
            }
            #[doc = "Bit 6 - General call enable"]
            #[inline(always)]
            pub fn engc(&mut self) -> ENGC_W {
                ENGC_W { w: self }
            }
            #[doc = "Bit 5 - PEC enable"]
            #[inline(always)]
            pub fn enpec(&mut self) -> ENPEC_W {
                ENPEC_W { w: self }
            }
            #[doc = "Bit 4 - ARP enable"]
            #[inline(always)]
            pub fn enarp(&mut self) -> ENARP_W {
                ENARP_W { w: self }
            }
            #[doc = "Bit 3 - SMBus type"]
            #[inline(always)]
            pub fn smbtype(&mut self) -> SMBTYPE_W {
                SMBTYPE_W { w: self }
            }
            #[doc = "Bit 1 - SMBus mode"]
            #[inline(always)]
            pub fn smbus(&mut self) -> SMBUS_W {
                SMBUS_W { w: self }
            }
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr1](index.html) module"]
        pub struct CTLR1_SPEC;
        impl crate::RegisterSpec for CTLR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr1::R](R) reader structure"]
        impl crate::Readable for CTLR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr1::W](W) writer structure"]
        impl crate::Writable for CTLR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR1 to value 0"]
        impl crate::Resettable for CTLR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR2 register accessor: an alias for `Reg<CTLR2_SPEC>`"]
    pub type CTLR2 = crate::Reg<ctlr2::CTLR2_SPEC>;
    #[doc = "Control register 2"]
    pub mod ctlr2 {
        #[doc = "Register `CTLR2` reader"]
        pub struct R(crate::R<CTLR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR2` writer"]
        pub struct W(crate::W<CTLR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LAST` reader - DMA last transfer"]
        pub struct LAST_R(crate::FieldReader<bool>);
        impl LAST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LAST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LAST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LAST` writer - DMA last transfer"]
        pub struct LAST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `DMAEN` reader - DMA requests enable"]
        pub struct DMAEN_R(crate::FieldReader<bool>);
        impl DMAEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAEN` writer - DMA requests enable"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `ITBUFEN` reader - Buffer interrupt enable"]
        pub struct ITBUFEN_R(crate::FieldReader<bool>);
        impl ITBUFEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ITBUFEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ITBUFEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ITBUFEN` writer - Buffer interrupt enable"]
        pub struct ITBUFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITBUFEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `ITEVTEN` reader - Event interrupt enable"]
        pub struct ITEVTEN_R(crate::FieldReader<bool>);
        impl ITEVTEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ITEVTEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ITEVTEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ITEVTEN` writer - Event interrupt enable"]
        pub struct ITEVTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITEVTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `ITERREN` reader - Error interrupt enable"]
        pub struct ITERREN_R(crate::FieldReader<bool>);
        impl ITERREN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ITERREN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ITERREN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ITERREN` writer - Error interrupt enable"]
        pub struct ITERREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITERREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `FREQ` reader - Peripheral clock frequency"]
        pub struct FREQ_R(crate::FieldReader<u8>);
        impl FREQ_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FREQ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FREQ_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FREQ` writer - Peripheral clock frequency"]
        pub struct FREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u32 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - DMA last transfer"]
            #[inline(always)]
            pub fn last(&self) -> LAST_R {
                LAST_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - DMA requests enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Buffer interrupt enable"]
            #[inline(always)]
            pub fn itbufen(&self) -> ITBUFEN_R {
                ITBUFEN_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Event interrupt enable"]
            #[inline(always)]
            pub fn itevten(&self) -> ITEVTEN_R {
                ITEVTEN_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Error interrupt enable"]
            #[inline(always)]
            pub fn iterren(&self) -> ITERREN_R {
                ITERREN_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 0:5 - Peripheral clock frequency"]
            #[inline(always)]
            pub fn freq(&self) -> FREQ_R {
                FREQ_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 12 - DMA last transfer"]
            #[inline(always)]
            pub fn last(&mut self) -> LAST_W {
                LAST_W { w: self }
            }
            #[doc = "Bit 11 - DMA requests enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 10 - Buffer interrupt enable"]
            #[inline(always)]
            pub fn itbufen(&mut self) -> ITBUFEN_W {
                ITBUFEN_W { w: self }
            }
            #[doc = "Bit 9 - Event interrupt enable"]
            #[inline(always)]
            pub fn itevten(&mut self) -> ITEVTEN_W {
                ITEVTEN_W { w: self }
            }
            #[doc = "Bit 8 - Error interrupt enable"]
            #[inline(always)]
            pub fn iterren(&mut self) -> ITERREN_W {
                ITERREN_W { w: self }
            }
            #[doc = "Bits 0:5 - Peripheral clock frequency"]
            #[inline(always)]
            pub fn freq(&mut self) -> FREQ_W {
                FREQ_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr2](index.html) module"]
        pub struct CTLR2_SPEC;
        impl crate::RegisterSpec for CTLR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr2::R](R) reader structure"]
        impl crate::Readable for CTLR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr2::W](W) writer structure"]
        impl crate::Writable for CTLR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR2 to value 0"]
        impl crate::Resettable for CTLR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "OADDR1 register accessor: an alias for `Reg<OADDR1_SPEC>`"]
    pub type OADDR1 = crate::Reg<oaddr1::OADDR1_SPEC>;
    #[doc = "Own address register 1"]
    pub mod oaddr1 {
        #[doc = "Register `OADDR1` reader"]
        pub struct R(crate::R<OADDR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<OADDR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<OADDR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<OADDR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `OADDR1` writer"]
        pub struct W(crate::W<OADDR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<OADDR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<OADDR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<OADDR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADDMODE` reader - Addressing mode (slave mode)"]
        pub struct ADDMODE_R(crate::FieldReader<bool>);
        impl ADDMODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADDMODE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADDMODE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADDMODE` writer - Addressing mode (slave mode)"]
        pub struct ADDMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `MUST1` reader - Must be 1"]
        pub struct MUST1_R(crate::FieldReader<bool>);
        impl MUST1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MUST1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MUST1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MUST1` writer - Must be 1"]
        pub struct MUST1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MUST1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `ADD9_8` reader - Interface address"]
        pub struct ADD9_8_R(crate::FieldReader<u8>);
        impl ADD9_8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ADD9_8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADD9_8_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADD9_8` writer - Interface address"]
        pub struct ADD9_8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD9_8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 8)) | ((value as u32 & 3) << 8);
                self.w
            }
        }
        #[doc = "Field `ADD7_1` reader - Interface address"]
        pub struct ADD7_1_R(crate::FieldReader<u8>);
        impl ADD7_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ADD7_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADD7_1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADD7_1` writer - Interface address"]
        pub struct ADD7_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD7_1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | ((value as u32 & 0x7f) << 1);
                self.w
            }
        }
        #[doc = "Field `ADD0` reader - Interface address"]
        pub struct ADD0_R(crate::FieldReader<bool>);
        impl ADD0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADD0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADD0_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADD0` writer - Interface address"]
        pub struct ADD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Addressing mode (slave mode)"]
            #[inline(always)]
            pub fn addmode(&self) -> ADDMODE_R {
                ADDMODE_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14 - Must be 1"]
            #[inline(always)]
            pub fn must1(&self) -> MUST1_R {
                MUST1_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Interface address"]
            #[inline(always)]
            pub fn add9_8(&self) -> ADD9_8_R {
                ADD9_8_R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn add7_1(&self) -> ADD7_1_R {
                ADD7_1_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bit 0 - Interface address"]
            #[inline(always)]
            pub fn add0(&self) -> ADD0_R {
                ADD0_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Addressing mode (slave mode)"]
            #[inline(always)]
            pub fn addmode(&mut self) -> ADDMODE_W {
                ADDMODE_W { w: self }
            }
            #[doc = "Bit 14 - Must be 1"]
            #[inline(always)]
            pub fn must1(&mut self) -> MUST1_W {
                MUST1_W { w: self }
            }
            #[doc = "Bits 8:9 - Interface address"]
            #[inline(always)]
            pub fn add9_8(&mut self) -> ADD9_8_W {
                ADD9_8_W { w: self }
            }
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn add7_1(&mut self) -> ADD7_1_W {
                ADD7_1_W { w: self }
            }
            #[doc = "Bit 0 - Interface address"]
            #[inline(always)]
            pub fn add0(&mut self) -> ADD0_W {
                ADD0_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Own address register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oaddr1](index.html) module"]
        pub struct OADDR1_SPEC;
        impl crate::RegisterSpec for OADDR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [oaddr1::R](R) reader structure"]
        impl crate::Readable for OADDR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [oaddr1::W](W) writer structure"]
        impl crate::Writable for OADDR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets OADDR1 to value 0"]
        impl crate::Resettable for OADDR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "OADDR2 register accessor: an alias for `Reg<OADDR2_SPEC>`"]
    pub type OADDR2 = crate::Reg<oaddr2::OADDR2_SPEC>;
    #[doc = "Own address register 2"]
    pub mod oaddr2 {
        #[doc = "Register `OADDR2` reader"]
        pub struct R(crate::R<OADDR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<OADDR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<OADDR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<OADDR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `OADDR2` writer"]
        pub struct W(crate::W<OADDR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<OADDR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<OADDR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<OADDR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADD2` reader - Interface address"]
        pub struct ADD2_R(crate::FieldReader<u8>);
        impl ADD2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ADD2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADD2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADD2` writer - Interface address"]
        pub struct ADD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | ((value as u32 & 0x7f) << 1);
                self.w
            }
        }
        #[doc = "Field `ENDUAL` reader - Dual addressing mode enable"]
        pub struct ENDUAL_R(crate::FieldReader<bool>);
        impl ENDUAL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENDUAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENDUAL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENDUAL` writer - Dual addressing mode enable"]
        pub struct ENDUAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENDUAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn add2(&self) -> ADD2_R {
                ADD2_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bit 0 - Dual addressing mode enable"]
            #[inline(always)]
            pub fn endual(&self) -> ENDUAL_R {
                ENDUAL_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn add2(&mut self) -> ADD2_W {
                ADD2_W { w: self }
            }
            #[doc = "Bit 0 - Dual addressing mode enable"]
            #[inline(always)]
            pub fn endual(&mut self) -> ENDUAL_W {
                ENDUAL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Own address register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oaddr2](index.html) module"]
        pub struct OADDR2_SPEC;
        impl crate::RegisterSpec for OADDR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [oaddr2::R](R) reader structure"]
        impl crate::Readable for OADDR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [oaddr2::W](W) writer structure"]
        impl crate::Writable for OADDR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets OADDR2 to value 0"]
        impl crate::Resettable for OADDR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATAR register accessor: an alias for `Reg<DATAR_SPEC>`"]
    pub type DATAR = crate::Reg<datar::DATAR_SPEC>;
    #[doc = "Data register"]
    pub mod datar {
        #[doc = "Register `DATAR` reader"]
        pub struct R(crate::R<DATAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR` writer"]
        pub struct W(crate::W<DATAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATAR` reader - 8-bit data register"]
        pub struct DATAR_R(crate::FieldReader<u8>);
        impl DATAR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DATAR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATAR_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATAR` writer - 8-bit data register"]
        pub struct DATAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - 8-bit data register"]
            #[inline(always)]
            pub fn datar(&self) -> DATAR_R {
                DATAR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - 8-bit data register"]
            #[inline(always)]
            pub fn datar(&mut self) -> DATAR_W {
                DATAR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar](index.html) module"]
        pub struct DATAR_SPEC;
        impl crate::RegisterSpec for DATAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar::R](R) reader structure"]
        impl crate::Readable for DATAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar::W](W) writer structure"]
        impl crate::Writable for DATAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR to value 0"]
        impl crate::Resettable for DATAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STAR1 register accessor: an alias for `Reg<STAR1_SPEC>`"]
    pub type STAR1 = crate::Reg<star1::STAR1_SPEC>;
    #[doc = "Status register 1"]
    pub mod star1 {
        #[doc = "Register `STAR1` reader"]
        pub struct R(crate::R<STAR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STAR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STAR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STAR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STAR1` writer"]
        pub struct W(crate::W<STAR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STAR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STAR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STAR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SMBALERT` reader - SMBus alert"]
        pub struct SMBALERT_R(crate::FieldReader<bool>);
        impl SMBALERT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMBALERT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMBALERT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMBALERT` writer - SMBus alert"]
        pub struct SMBALERT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBALERT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `TIMEOUT` reader - Timeout or Tlow error"]
        pub struct TIMEOUT_R(crate::FieldReader<bool>);
        impl TIMEOUT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMEOUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMEOUT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMEOUT` writer - Timeout or Tlow error"]
        pub struct TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMEOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `PECERR` reader - PEC Error in reception"]
        pub struct PECERR_R(crate::FieldReader<bool>);
        impl PECERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PECERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PECERR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PECERR` writer - PEC Error in reception"]
        pub struct PECERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `OVR` reader - Overrun/Underrun"]
        pub struct OVR_R(crate::FieldReader<bool>);
        impl OVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OVR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OVR` writer - Overrun/Underrun"]
        pub struct OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `AF` reader - Acknowledge failure"]
        pub struct AF_R(crate::FieldReader<bool>);
        impl AF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AF` writer - Acknowledge failure"]
        pub struct AF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `ARLO` reader - Arbitration lost (master mode)"]
        pub struct ARLO_R(crate::FieldReader<bool>);
        impl ARLO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARLO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARLO_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARLO` writer - Arbitration lost (master mode)"]
        pub struct ARLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `BERR` reader - Bus error"]
        pub struct BERR_R(crate::FieldReader<bool>);
        impl BERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BERR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BERR` writer - Bus error"]
        pub struct BERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `TxE` reader - Data register empty (transmitters)"]
        pub struct TXE_R(crate::FieldReader<bool>);
        impl TXE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RxNE` reader - Data register not empty (receivers)"]
        pub struct RXNE_R(crate::FieldReader<bool>);
        impl RXNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXNE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STOPF` reader - Stop detection (slave mode)"]
        pub struct STOPF_R(crate::FieldReader<bool>);
        impl STOPF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STOPF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STOPF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADD10` reader - 10-bit header sent (Master mode)"]
        pub struct ADD10_R(crate::FieldReader<bool>);
        impl ADD10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADD10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADD10_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BTF` reader - Byte transfer finished"]
        pub struct BTF_R(crate::FieldReader<bool>);
        impl BTF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BTF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BTF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADDR` reader - Address sent (master mode)/matched (slave mode)"]
        pub struct ADDR_R(crate::FieldReader<bool>);
        impl ADDR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADDR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADDR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SB` reader - Start bit (Master mode)"]
        pub struct SB_R(crate::FieldReader<bool>);
        impl SB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SB_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 15 - SMBus alert"]
            #[inline(always)]
            pub fn smbalert(&self) -> SMBALERT_R {
                SMBALERT_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14 - Timeout or Tlow error"]
            #[inline(always)]
            pub fn timeout(&self) -> TIMEOUT_R {
                TIMEOUT_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 12 - PEC Error in reception"]
            #[inline(always)]
            pub fn pecerr(&self) -> PECERR_R {
                PECERR_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Overrun/Underrun"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Acknowledge failure"]
            #[inline(always)]
            pub fn af(&self) -> AF_R {
                AF_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Arbitration lost (master mode)"]
            #[inline(always)]
            pub fn arlo(&self) -> ARLO_R {
                ARLO_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&self) -> BERR_R {
                BERR_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - Data register empty (transmitters)"]
            #[inline(always)]
            pub fn tx_e(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Data register not empty (receivers)"]
            #[inline(always)]
            pub fn rx_ne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 4 - Stop detection (slave mode)"]
            #[inline(always)]
            pub fn stopf(&self) -> STOPF_R {
                STOPF_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - 10-bit header sent (Master mode)"]
            #[inline(always)]
            pub fn add10(&self) -> ADD10_R {
                ADD10_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Byte transfer finished"]
            #[inline(always)]
            pub fn btf(&self) -> BTF_R {
                BTF_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Address sent (master mode)/matched (slave mode)"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Start bit (Master mode)"]
            #[inline(always)]
            pub fn sb(&self) -> SB_R {
                SB_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - SMBus alert"]
            #[inline(always)]
            pub fn smbalert(&mut self) -> SMBALERT_W {
                SMBALERT_W { w: self }
            }
            #[doc = "Bit 14 - Timeout or Tlow error"]
            #[inline(always)]
            pub fn timeout(&mut self) -> TIMEOUT_W {
                TIMEOUT_W { w: self }
            }
            #[doc = "Bit 12 - PEC Error in reception"]
            #[inline(always)]
            pub fn pecerr(&mut self) -> PECERR_W {
                PECERR_W { w: self }
            }
            #[doc = "Bit 11 - Overrun/Underrun"]
            #[inline(always)]
            pub fn ovr(&mut self) -> OVR_W {
                OVR_W { w: self }
            }
            #[doc = "Bit 10 - Acknowledge failure"]
            #[inline(always)]
            pub fn af(&mut self) -> AF_W {
                AF_W { w: self }
            }
            #[doc = "Bit 9 - Arbitration lost (master mode)"]
            #[inline(always)]
            pub fn arlo(&mut self) -> ARLO_W {
                ARLO_W { w: self }
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&mut self) -> BERR_W {
                BERR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [star1](index.html) module"]
        pub struct STAR1_SPEC;
        impl crate::RegisterSpec for STAR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [star1::R](R) reader structure"]
        impl crate::Readable for STAR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [star1::W](W) writer structure"]
        impl crate::Writable for STAR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STAR1 to value 0"]
        impl crate::Resettable for STAR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STAR2 register accessor: an alias for `Reg<STAR2_SPEC>`"]
    pub type STAR2 = crate::Reg<star2::STAR2_SPEC>;
    #[doc = "Status register 2"]
    pub mod star2 {
        #[doc = "Register `STAR2` reader"]
        pub struct R(crate::R<STAR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STAR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STAR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STAR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PEC` reader - acket error checking register"]
        pub struct PEC_R(crate::FieldReader<u8>);
        impl PEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PEC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DUALF` reader - Dual flag (Slave mode)"]
        pub struct DUALF_R(crate::FieldReader<bool>);
        impl DUALF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DUALF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DUALF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMBHOST` reader - SMBus host header (Slave mode)"]
        pub struct SMBHOST_R(crate::FieldReader<bool>);
        impl SMBHOST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMBHOST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMBHOST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMBDEFAULT` reader - SMBus device default address (Slave mode)"]
        pub struct SMBDEFAULT_R(crate::FieldReader<bool>);
        impl SMBDEFAULT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMBDEFAULT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMBDEFAULT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GENCALL` reader - General call address (Slave mode)"]
        pub struct GENCALL_R(crate::FieldReader<bool>);
        impl GENCALL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GENCALL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GENCALL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TRA` reader - Transmitter/receiver"]
        pub struct TRA_R(crate::FieldReader<bool>);
        impl TRA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TRA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TRA_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUSY` reader - Bus busy"]
        pub struct BUSY_R(crate::FieldReader<bool>);
        impl BUSY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUSY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSL` reader - Master/slave"]
        pub struct MSL_R(crate::FieldReader<bool>);
        impl MSL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 8:15 - acket error checking register"]
            #[inline(always)]
            pub fn pec(&self) -> PEC_R {
                PEC_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 7 - Dual flag (Slave mode)"]
            #[inline(always)]
            pub fn dualf(&self) -> DUALF_R {
                DUALF_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - SMBus host header (Slave mode)"]
            #[inline(always)]
            pub fn smbhost(&self) -> SMBHOST_R {
                SMBHOST_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - SMBus device default address (Slave mode)"]
            #[inline(always)]
            pub fn smbdefault(&self) -> SMBDEFAULT_R {
                SMBDEFAULT_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - General call address (Slave mode)"]
            #[inline(always)]
            pub fn gencall(&self) -> GENCALL_R {
                GENCALL_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 2 - Transmitter/receiver"]
            #[inline(always)]
            pub fn tra(&self) -> TRA_R {
                TRA_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Bus busy"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Master/slave"]
            #[inline(always)]
            pub fn msl(&self) -> MSL_R {
                MSL_R::new((self.bits & 1) != 0)
            }
        }
        #[doc = "Status register 2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [star2](index.html) module"]
        pub struct STAR2_SPEC;
        impl crate::RegisterSpec for STAR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [star2::R](R) reader structure"]
        impl crate::Readable for STAR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets STAR2 to value 0"]
        impl crate::Resettable for STAR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CKCFGR register accessor: an alias for `Reg<CKCFGR_SPEC>`"]
    pub type CKCFGR = crate::Reg<ckcfgr::CKCFGR_SPEC>;
    #[doc = "Clock control register"]
    pub mod ckcfgr {
        #[doc = "Register `CKCFGR` reader"]
        pub struct R(crate::R<CKCFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CKCFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CKCFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CKCFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CKCFGR` writer"]
        pub struct W(crate::W<CKCFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CKCFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CKCFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CKCFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `F_S` reader - I2C master mode selection"]
        pub struct F_S_R(crate::FieldReader<bool>);
        impl F_S_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                F_S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for F_S_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `F_S` writer - I2C master mode selection"]
        pub struct F_S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> F_S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `DUTY` reader - Fast mode duty cycle"]
        pub struct DUTY_R(crate::FieldReader<bool>);
        impl DUTY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DUTY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DUTY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DUTY` writer - Fast mode duty cycle"]
        pub struct DUTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DUTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `CCR` reader - Clock control register in Fast/Standard mode (Master mode)"]
        pub struct CCR_R(crate::FieldReader<u16>);
        impl CCR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CCR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCR` writer - Clock control register in Fast/Standard mode (Master mode)"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - I2C master mode selection"]
            #[inline(always)]
            pub fn f_s(&self) -> F_S_R {
                F_S_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14 - Fast mode duty cycle"]
            #[inline(always)]
            pub fn duty(&self) -> DUTY_R {
                DUTY_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 15 - I2C master mode selection"]
            #[inline(always)]
            pub fn f_s(&mut self) -> F_S_W {
                F_S_W { w: self }
            }
            #[doc = "Bit 14 - Fast mode duty cycle"]
            #[inline(always)]
            pub fn duty(&mut self) -> DUTY_W {
                DUTY_W { w: self }
            }
            #[doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ckcfgr](index.html) module"]
        pub struct CKCFGR_SPEC;
        impl crate::RegisterSpec for CKCFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ckcfgr::R](R) reader structure"]
        impl crate::Readable for CKCFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ckcfgr::W](W) writer structure"]
        impl crate::Writable for CKCFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CKCFGR to value 0"]
        impl crate::Resettable for CKCFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RTR register accessor: an alias for `Reg<RTR_SPEC>`"]
    pub type RTR = crate::Reg<rtr::RTR_SPEC>;
    #[doc = "Raise time register"]
    pub mod rtr {
        #[doc = "Register `RTR` reader"]
        pub struct R(crate::R<RTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RTR` writer"]
        pub struct W(crate::W<RTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TRISE` reader - Maximum rise time in Fast/Standard mode (Master mode)"]
        pub struct TRISE_R(crate::FieldReader<u8>);
        impl TRISE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TRISE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TRISE_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TRISE` writer - Maximum rise time in Fast/Standard mode (Master mode)"]
        pub struct TRISE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRISE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u32 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - Maximum rise time in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn trise(&self) -> TRISE_R {
                TRISE_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Maximum rise time in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn trise(&mut self) -> TRISE_W {
                TRISE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Raise time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtr](index.html) module"]
        pub struct RTR_SPEC;
        impl crate::RegisterSpec for RTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rtr::R](R) reader structure"]
        impl crate::Readable for RTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rtr::W](W) writer structure"]
        impl crate::Writable for RTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RTR to value 0x02"]
        impl crate::Resettable for RTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x02
            }
        }
    }
}
#[doc = "Inter integrated circuit"]
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub use i2c1 as i2c2;
#[doc = "Serial peripheral interface"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi1::RegisterBlock = 0x4001_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub ctlr1: crate::Reg<ctlr1::CTLR1_SPEC>,
        #[doc = "0x04 - control register 2"]
        pub ctlr2: crate::Reg<ctlr2::CTLR2_SPEC>,
        #[doc = "0x08 - status register"]
        pub statr: crate::Reg<statr::STATR_SPEC>,
        #[doc = "0x0c - data register"]
        pub datar: crate::Reg<datar::DATAR_SPEC>,
        #[doc = "0x10 - CRCR polynomial register"]
        pub crcr: crate::Reg<crcr::CRCR_SPEC>,
        #[doc = "0x14 - RX CRC register"]
        pub rcrcr: crate::Reg<rcrcr::RCRCR_SPEC>,
        #[doc = "0x18 - TX CRC register"]
        pub tcrcr: crate::Reg<tcrcr::TCRCR_SPEC>,
    }
    #[doc = "CTLR1 register accessor: an alias for `Reg<CTLR1_SPEC>`"]
    pub type CTLR1 = crate::Reg<ctlr1::CTLR1_SPEC>;
    #[doc = "control register 1"]
    pub mod ctlr1 {
        #[doc = "Register `CTLR1` reader"]
        pub struct R(crate::R<CTLR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR1` writer"]
        pub struct W(crate::W<CTLR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BIDIMODE` reader - Bidirectional data mode enable"]
        pub struct BIDIMODE_R(crate::FieldReader<bool>);
        impl BIDIMODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BIDIMODE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIDIMODE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIDIMODE` writer - Bidirectional data mode enable"]
        pub struct BIDIMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `BIDIOE` reader - Output enable in bidirectional mode"]
        pub struct BIDIOE_R(crate::FieldReader<bool>);
        impl BIDIOE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BIDIOE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIDIOE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIDIOE` writer - Output enable in bidirectional mode"]
        pub struct BIDIOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `CRCEN` reader - Hardware CRC calculation enable"]
        pub struct CRCEN_R(crate::FieldReader<bool>);
        impl CRCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CRCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CRCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CRCEN` writer - Hardware CRC calculation enable"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `CRCNEXT` reader - CRC transfer next"]
        pub struct CRCNEXT_R(crate::FieldReader<bool>);
        impl CRCNEXT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CRCNEXT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CRCNEXT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CRCNEXT` writer - CRC transfer next"]
        pub struct CRCNEXT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCNEXT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `DFF` reader - Data frame format"]
        pub struct DFF_R(crate::FieldReader<bool>);
        impl DFF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DFF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DFF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DFF` writer - Data frame format"]
        pub struct DFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `RXONLY` reader - Receive only"]
        pub struct RXONLY_R(crate::FieldReader<bool>);
        impl RXONLY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXONLY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXONLY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXONLY` writer - Receive only"]
        pub struct RXONLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXONLY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `SSM` reader - Software slave management"]
        pub struct SSM_R(crate::FieldReader<bool>);
        impl SSM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SSM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SSM_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SSM` writer - Software slave management"]
        pub struct SSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `SSI` reader - Internal slave select"]
        pub struct SSI_R(crate::FieldReader<bool>);
        impl SSI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SSI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SSI_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SSI` writer - Internal slave select"]
        pub struct SSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `LSBFIRST` reader - Frame format"]
        pub struct LSBFIRST_R(crate::FieldReader<bool>);
        impl LSBFIRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LSBFIRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LSBFIRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LSBFIRST` writer - Frame format"]
        pub struct LSBFIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSBFIRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `SPE` reader - SPI enable"]
        pub struct SPE_R(crate::FieldReader<bool>);
        impl SPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPE` writer - SPI enable"]
        pub struct SPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `BR` reader - Baud rate control"]
        pub struct BR_R(crate::FieldReader<u8>);
        impl BR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                BR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BR_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BR` writer - Baud rate control"]
        pub struct BR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 3)) | ((value as u32 & 7) << 3);
                self.w
            }
        }
        #[doc = "Field `MSTR` reader - Master selection"]
        pub struct MSTR_R(crate::FieldReader<bool>);
        impl MSTR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSTR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSTR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSTR` writer - Master selection"]
        pub struct MSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSTR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CPOL` reader - Clock polarity"]
        pub struct CPOL_R(crate::FieldReader<bool>);
        impl CPOL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPOL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPOL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPOL` writer - Clock polarity"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `CPHA` reader - Clock phase"]
        pub struct CPHA_R(crate::FieldReader<bool>);
        impl CPHA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPHA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPHA_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPHA` writer - Clock phase"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&self) -> BIDIMODE_R {
                BIDIMODE_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&self) -> BIDIOE_R {
                BIDIOE_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&self) -> CRCNEXT_R {
                CRCNEXT_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            pub fn dff(&self) -> DFF_R {
                DFF_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&self) -> RXONLY_R {
                RXONLY_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&self) -> SSM_R {
                SSM_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&self) -> SSI_R {
                SSI_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&self) -> LSBFIRST_R {
                LSBFIRST_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&self) -> SPE_R {
                SPE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&self) -> BR_R {
                BR_R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&self) -> MSTR_R {
                MSTR_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&mut self) -> BIDIMODE_W {
                BIDIMODE_W { w: self }
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&mut self) -> BIDIOE_W {
                BIDIOE_W { w: self }
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&mut self) -> CRCNEXT_W {
                CRCNEXT_W { w: self }
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            pub fn dff(&mut self) -> DFF_W {
                DFF_W { w: self }
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&mut self) -> RXONLY_W {
                RXONLY_W { w: self }
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&mut self) -> SSM_W {
                SSM_W { w: self }
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&mut self) -> SSI_W {
                SSI_W { w: self }
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&mut self) -> LSBFIRST_W {
                LSBFIRST_W { w: self }
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&mut self) -> SPE_W {
                SPE_W { w: self }
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&mut self) -> BR_W {
                BR_W { w: self }
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&mut self) -> MSTR_W {
                MSTR_W { w: self }
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr1](index.html) module"]
        pub struct CTLR1_SPEC;
        impl crate::RegisterSpec for CTLR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr1::R](R) reader structure"]
        impl crate::Readable for CTLR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr1::W](W) writer structure"]
        impl crate::Writable for CTLR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR1 to value 0"]
        impl crate::Resettable for CTLR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR2 register accessor: an alias for `Reg<CTLR2_SPEC>`"]
    pub type CTLR2 = crate::Reg<ctlr2::CTLR2_SPEC>;
    #[doc = "control register 2"]
    pub mod ctlr2 {
        #[doc = "Register `CTLR2` reader"]
        pub struct R(crate::R<CTLR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR2` writer"]
        pub struct W(crate::W<CTLR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TXEIE` reader - Tx buffer empty interrupt enable"]
        pub struct TXEIE_R(crate::FieldReader<bool>);
        impl TXEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXEIE` writer - Tx buffer empty interrupt enable"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `RXNEIE` reader - RX buffer not empty interrupt enable"]
        pub struct RXNEIE_R(crate::FieldReader<bool>);
        impl RXNEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXNEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXNEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXNEIE` writer - RX buffer not empty interrupt enable"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `ERRIE` reader - Error interrupt enable"]
        pub struct ERRIE_R(crate::FieldReader<bool>);
        impl ERRIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ERRIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ERRIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ERRIE` writer - Error interrupt enable"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `SSOE` reader - SS output enable"]
        pub struct SSOE_R(crate::FieldReader<bool>);
        impl SSOE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SSOE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SSOE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SSOE` writer - SS output enable"]
        pub struct SSOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `TXDMAEN` reader - Tx buffer DMA enable"]
        pub struct TXDMAEN_R(crate::FieldReader<bool>);
        impl TXDMAEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXDMAEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXDMAEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXDMAEN` writer - Tx buffer DMA enable"]
        pub struct TXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `RXDMAEN` reader - Rx buffer DMA enable"]
        pub struct RXDMAEN_R(crate::FieldReader<bool>);
        impl RXDMAEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXDMAEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXDMAEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXDMAEN` writer - Rx buffer DMA enable"]
        pub struct RXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&self) -> SSOE_R {
                SSOE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&self) -> TXDMAEN_R {
                TXDMAEN_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&self) -> RXDMAEN_R {
                RXDMAEN_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&mut self) -> SSOE_W {
                SSOE_W { w: self }
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&mut self) -> TXDMAEN_W {
                TXDMAEN_W { w: self }
            }
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&mut self) -> RXDMAEN_W {
                RXDMAEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr2](index.html) module"]
        pub struct CTLR2_SPEC;
        impl crate::RegisterSpec for CTLR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr2::R](R) reader structure"]
        impl crate::Readable for CTLR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr2::W](W) writer structure"]
        impl crate::Writable for CTLR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR2 to value 0"]
        impl crate::Resettable for CTLR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STATR register accessor: an alias for `Reg<STATR_SPEC>`"]
    pub type STATR = crate::Reg<statr::STATR_SPEC>;
    #[doc = "status register"]
    pub mod statr {
        #[doc = "Register `STATR` reader"]
        pub struct R(crate::R<STATR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STATR` writer"]
        pub struct W(crate::W<STATR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STATR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STATR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BSY` reader - Busy flag"]
        pub struct BSY_R(crate::FieldReader<bool>);
        impl BSY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BSY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OVR` reader - Overrun flag"]
        pub struct OVR_R(crate::FieldReader<bool>);
        impl OVR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OVR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OVR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODF` reader - Mode fault"]
        pub struct MODF_R(crate::FieldReader<bool>);
        impl MODF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MODF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MODF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CRCERR` reader - CRC error flag"]
        pub struct CRCERR_R(crate::FieldReader<bool>);
        impl CRCERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CRCERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CRCERR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CRCERR` writer - CRC error flag"]
        pub struct CRCERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `TXE` reader - Transmit buffer empty"]
        pub struct TXE_R(crate::FieldReader<bool>);
        impl TXE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXNE` reader - Receive buffer not empty"]
        pub struct RXNE_R(crate::FieldReader<bool>);
        impl RXNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXNE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 7 - Busy flag"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Overrun flag"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - Mode fault"]
            #[inline(always)]
            pub fn modf(&self) -> MODF_R {
                MODF_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&self) -> CRCERR_R {
                CRCERR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 1 - Transmit buffer empty"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Receive buffer not empty"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&mut self) -> CRCERR_W {
                CRCERR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [statr](index.html) module"]
        pub struct STATR_SPEC;
        impl crate::RegisterSpec for STATR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [statr::R](R) reader structure"]
        impl crate::Readable for STATR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [statr::W](W) writer structure"]
        impl crate::Writable for STATR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STATR to value 0x02"]
        impl crate::Resettable for STATR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x02
            }
        }
    }
    #[doc = "DATAR register accessor: an alias for `Reg<DATAR_SPEC>`"]
    pub type DATAR = crate::Reg<datar::DATAR_SPEC>;
    #[doc = "data register"]
    pub mod datar {
        #[doc = "Register `DATAR` reader"]
        pub struct R(crate::R<DATAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR` writer"]
        pub struct W(crate::W<DATAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATAR` reader - Data register"]
        pub struct DATAR_R(crate::FieldReader<u16>);
        impl DATAR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DATAR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATAR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATAR` writer - Data register"]
        pub struct DATAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn datar(&self) -> DATAR_R {
                DATAR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn datar(&mut self) -> DATAR_W {
                DATAR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar](index.html) module"]
        pub struct DATAR_SPEC;
        impl crate::RegisterSpec for DATAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar::R](R) reader structure"]
        impl crate::Readable for DATAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar::W](W) writer structure"]
        impl crate::Writable for DATAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR to value 0"]
        impl crate::Resettable for DATAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CRCR register accessor: an alias for `Reg<CRCR_SPEC>`"]
    pub type CRCR = crate::Reg<crcr::CRCR_SPEC>;
    #[doc = "CRCR polynomial register"]
    pub mod crcr {
        #[doc = "Register `CRCR` reader"]
        pub struct R(crate::R<CRCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CRCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CRCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CRCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CRCR` writer"]
        pub struct W(crate::W<CRCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CRCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CRCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CRCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CRCPOLY` reader - CRC polynomial register"]
        pub struct CRCPOLY_R(crate::FieldReader<u16>);
        impl CRCPOLY_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CRCPOLY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CRCPOLY_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CRCPOLY` writer - CRC polynomial register"]
        pub struct CRCPOLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCPOLY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&self) -> CRCPOLY_R {
                CRCPOLY_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&mut self) -> CRCPOLY_W {
                CRCPOLY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CRCR polynomial register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [crcr](index.html) module"]
        pub struct CRCR_SPEC;
        impl crate::RegisterSpec for CRCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [crcr::R](R) reader structure"]
        impl crate::Readable for CRCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [crcr::W](W) writer structure"]
        impl crate::Writable for CRCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CRCR to value 0x07"]
        impl crate::Resettable for CRCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x07
            }
        }
    }
    #[doc = "RCRCR register accessor: an alias for `Reg<RCRCR_SPEC>`"]
    pub type RCRCR = crate::Reg<rcrcr::RCRCR_SPEC>;
    #[doc = "RX CRC register"]
    pub mod rcrcr {
        #[doc = "Register `RCRCR` reader"]
        pub struct R(crate::R<RCRCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RCRCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RCRCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RCRCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `RXCRC` reader - Rx CRC register"]
        pub struct RXCRC_R(crate::FieldReader<u16>);
        impl RXCRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                RXCRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXCRC_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Rx CRC register"]
            #[inline(always)]
            pub fn rxcrc(&self) -> RXCRC_R {
                RXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "RX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcrcr](index.html) module"]
        pub struct RCRCR_SPEC;
        impl crate::RegisterSpec for RCRCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rcrcr::R](R) reader structure"]
        impl crate::Readable for RCRCR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets RCRCR to value 0"]
        impl crate::Resettable for RCRCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TCRCR register accessor: an alias for `Reg<TCRCR_SPEC>`"]
    pub type TCRCR = crate::Reg<tcrcr::TCRCR_SPEC>;
    #[doc = "TX CRC register"]
    pub mod tcrcr {
        #[doc = "Register `TCRCR` reader"]
        pub struct R(crate::R<TCRCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TCRCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TCRCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TCRCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `TXCRC` reader - Tx CRC register"]
        pub struct TXCRC_R(crate::FieldReader<u16>);
        impl TXCRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                TXCRC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXCRC_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Tx CRC register"]
            #[inline(always)]
            pub fn txcrc(&self) -> TXCRC_R {
                TXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "TX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcrcr](index.html) module"]
        pub struct TCRCR_SPEC;
        impl crate::RegisterSpec for TCRCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tcrcr::R](R) reader structure"]
        impl crate::Readable for TCRCR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets TCRCR to value 0"]
        impl crate::Resettable for TCRCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Serial peripheral interface"]
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi1::RegisterBlock = 0x4000_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use spi1 as spi2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1 {}
impl USART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart1::RegisterBlock = 0x4001_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status register"]
        pub statr: crate::Reg<statr::STATR_SPEC>,
        #[doc = "0x04 - Data register"]
        pub datar: crate::Reg<datar::DATAR_SPEC>,
        #[doc = "0x08 - Baud rate register"]
        pub brr: crate::Reg<brr::BRR_SPEC>,
        #[doc = "0x0c - Control register 1"]
        pub ctlr1: crate::Reg<ctlr1::CTLR1_SPEC>,
        #[doc = "0x10 - Control register 2"]
        pub ctlr2: crate::Reg<ctlr2::CTLR2_SPEC>,
        #[doc = "0x14 - Control register 3"]
        pub ctlr3: crate::Reg<ctlr3::CTLR3_SPEC>,
        #[doc = "0x18 - Guard time and prescaler register"]
        pub gpr: crate::Reg<gpr::GPR_SPEC>,
    }
    #[doc = "STATR register accessor: an alias for `Reg<STATR_SPEC>`"]
    pub type STATR = crate::Reg<statr::STATR_SPEC>;
    #[doc = "Status register"]
    pub mod statr {
        #[doc = "Register `STATR` reader"]
        pub struct R(crate::R<STATR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STATR` writer"]
        pub struct W(crate::W<STATR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STATR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STATR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CTS` reader - CTS flag"]
        pub struct CTS_R(crate::FieldReader<bool>);
        impl CTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTS` writer - CTS flag"]
        pub struct CTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `LBD` reader - LIN break detection flag"]
        pub struct LBD_R(crate::FieldReader<bool>);
        impl LBD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LBD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LBD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LBD` writer - LIN break detection flag"]
        pub struct LBD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `TXE` reader - Transmit data register empty"]
        pub struct TXE_R(crate::FieldReader<bool>);
        impl TXE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TC` reader - Transmission complete"]
        pub struct TC_R(crate::FieldReader<bool>);
        impl TC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TC` writer - Transmission complete"]
        pub struct TC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RXNE` reader - Read data register not empty"]
        pub struct RXNE_R(crate::FieldReader<bool>);
        impl RXNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXNE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXNE` writer - Read data register not empty"]
        pub struct RXNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `IDLE` reader - IDLE line detected"]
        pub struct IDLE_R(crate::FieldReader<bool>);
        impl IDLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDLE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ORE` reader - Overrun error"]
        pub struct ORE_R(crate::FieldReader<bool>);
        impl ORE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ORE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ORE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NE` reader - Noise error flag"]
        pub struct NE_R(crate::FieldReader<bool>);
        impl NE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FE` reader - Framing error"]
        pub struct FE_R(crate::FieldReader<bool>);
        impl FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PE` reader - Parity error"]
        pub struct PE_R(crate::FieldReader<bool>);
        impl PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 9 - CTS flag"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            pub fn lbd(&self) -> LBD_R {
                LBD_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - Transmit data register empty"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - Read data register not empty"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - IDLE line detected"]
            #[inline(always)]
            pub fn idle(&self) -> IDLE_R {
                IDLE_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Overrun error"]
            #[inline(always)]
            pub fn ore(&self) -> ORE_R {
                ORE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Noise error flag"]
            #[inline(always)]
            pub fn ne(&self) -> NE_R {
                NE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Framing error"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Parity error"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - CTS flag"]
            #[inline(always)]
            pub fn cts(&mut self) -> CTS_W {
                CTS_W { w: self }
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            pub fn lbd(&mut self) -> LBD_W {
                LBD_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            pub fn tc(&mut self) -> TC_W {
                TC_W { w: self }
            }
            #[doc = "Bit 5 - Read data register not empty"]
            #[inline(always)]
            pub fn rxne(&mut self) -> RXNE_W {
                RXNE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [statr](index.html) module"]
        pub struct STATR_SPEC;
        impl crate::RegisterSpec for STATR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [statr::R](R) reader structure"]
        impl crate::Readable for STATR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [statr::W](W) writer structure"]
        impl crate::Writable for STATR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STATR to value 0xc0"]
        impl crate::Resettable for STATR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xc0
            }
        }
    }
    #[doc = "DATAR register accessor: an alias for `Reg<DATAR_SPEC>`"]
    pub type DATAR = crate::Reg<datar::DATAR_SPEC>;
    #[doc = "Data register"]
    pub mod datar {
        #[doc = "Register `DATAR` reader"]
        pub struct R(crate::R<DATAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR` writer"]
        pub struct W(crate::W<DATAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DR` reader - Data value"]
        pub struct DR_R(crate::FieldReader<u16>);
        impl DR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DR_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DR` writer - Data value"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | (value as u32 & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:8 - Data value"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Data value"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar](index.html) module"]
        pub struct DATAR_SPEC;
        impl crate::RegisterSpec for DATAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar::R](R) reader structure"]
        impl crate::Readable for DATAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar::W](W) writer structure"]
        impl crate::Writable for DATAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR to value 0"]
        impl crate::Resettable for DATAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BRR register accessor: an alias for `Reg<BRR_SPEC>`"]
    pub type BRR = crate::Reg<brr::BRR_SPEC>;
    #[doc = "Baud rate register"]
    pub mod brr {
        #[doc = "Register `BRR` reader"]
        pub struct R(crate::R<BRR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BRR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BRR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BRR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BRR` writer"]
        pub struct W(crate::W<BRR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BRR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BRR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BRR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DIV_M` reader - mantissa of USARTDIV"]
        pub struct DIV_M_R(crate::FieldReader<u16>);
        impl DIV_M_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DIV_M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIV_M_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIV_M` writer - mantissa of USARTDIV"]
        pub struct DIV_M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIV_M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 4)) | ((value as u32 & 0x0fff) << 4);
                self.w
            }
        }
        #[doc = "Field `DIV_F` reader - fraction of USARTDIV"]
        pub struct DIV_F_R(crate::FieldReader<u8>);
        impl DIV_F_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DIV_F_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIV_F_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIV_F` writer - fraction of USARTDIV"]
        pub struct DIV_F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIV_F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:15 - mantissa of USARTDIV"]
            #[inline(always)]
            pub fn div_m(&self) -> DIV_M_R {
                DIV_M_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:3 - fraction of USARTDIV"]
            #[inline(always)]
            pub fn div_f(&self) -> DIV_F_R {
                DIV_F_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - mantissa of USARTDIV"]
            #[inline(always)]
            pub fn div_m(&mut self) -> DIV_M_W {
                DIV_M_W { w: self }
            }
            #[doc = "Bits 0:3 - fraction of USARTDIV"]
            #[inline(always)]
            pub fn div_f(&mut self) -> DIV_F_W {
                DIV_F_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Baud rate register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](index.html) module"]
        pub struct BRR_SPEC;
        impl crate::RegisterSpec for BRR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [brr::R](R) reader structure"]
        impl crate::Readable for BRR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [brr::W](W) writer structure"]
        impl crate::Writable for BRR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BRR to value 0"]
        impl crate::Resettable for BRR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR1 register accessor: an alias for `Reg<CTLR1_SPEC>`"]
    pub type CTLR1 = crate::Reg<ctlr1::CTLR1_SPEC>;
    #[doc = "Control register 1"]
    pub mod ctlr1 {
        #[doc = "Register `CTLR1` reader"]
        pub struct R(crate::R<CTLR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR1` writer"]
        pub struct W(crate::W<CTLR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `UE` reader - USART enable"]
        pub struct UE_R(crate::FieldReader<bool>);
        impl UE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UE` writer - USART enable"]
        pub struct UE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 13)) | ((value as u32 & 1) << 13);
                self.w
            }
        }
        #[doc = "Field `M` reader - Word length"]
        pub struct M_R(crate::FieldReader<bool>);
        impl M_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                M_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for M_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `M` writer - Word length"]
        pub struct M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `WAKE` reader - Wakeup method"]
        pub struct WAKE_R(crate::FieldReader<bool>);
        impl WAKE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WAKE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WAKE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WAKE` writer - Wakeup method"]
        pub struct WAKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `PCE` reader - Parity control enable"]
        pub struct PCE_R(crate::FieldReader<bool>);
        impl PCE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCE` writer - Parity control enable"]
        pub struct PCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `PS` reader - Parity selection"]
        pub struct PS_R(crate::FieldReader<bool>);
        impl PS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PS` writer - Parity selection"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `PEIE` reader - PE interrupt enable"]
        pub struct PEIE_R(crate::FieldReader<bool>);
        impl PEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PEIE` writer - PE interrupt enable"]
        pub struct PEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `TXEIE` reader - TXE interrupt enable"]
        pub struct TXEIE_R(crate::FieldReader<bool>);
        impl TXEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXEIE` writer - TXE interrupt enable"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `TCIE` reader - Transmission complete interrupt enable"]
        pub struct TCIE_R(crate::FieldReader<bool>);
        impl TCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCIE` writer - Transmission complete interrupt enable"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RXNEIE` reader - RXNE interrupt enable"]
        pub struct RXNEIE_R(crate::FieldReader<bool>);
        impl RXNEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXNEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXNEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXNEIE` writer - RXNE interrupt enable"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `IDLEIE` reader - IDLE interrupt enable"]
        pub struct IDLEIE_R(crate::FieldReader<bool>);
        impl IDLEIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDLEIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDLEIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDLEIE` writer - IDLE interrupt enable"]
        pub struct IDLEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `TE` reader - Transmitter enable"]
        pub struct TE_R(crate::FieldReader<bool>);
        impl TE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TE` writer - Transmitter enable"]
        pub struct TE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `RE` reader - Receiver enable"]
        pub struct RE_R(crate::FieldReader<bool>);
        impl RE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RE` writer - Receiver enable"]
        pub struct RE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RWU` reader - Receiver wakeup"]
        pub struct RWU_R(crate::FieldReader<bool>);
        impl RWU_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RWU_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RWU_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RWU` writer - Receiver wakeup"]
        pub struct RWU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `SBK` reader - Send break"]
        pub struct SBK_R(crate::FieldReader<bool>);
        impl SBK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SBK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SBK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SBK` writer - Send break"]
        pub struct SBK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            pub fn ue(&self) -> UE_R {
                UE_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m(&self) -> M_R {
                M_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Wakeup method"]
            #[inline(always)]
            pub fn wake(&self) -> WAKE_R {
                WAKE_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&self) -> PCE_R {
                PCE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&self) -> PEIE_R {
                PEIE_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - TXE interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&self) -> IDLEIE_R {
                IDLEIE_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&self) -> TE_R {
                TE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&self) -> RE_R {
                RE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Receiver wakeup"]
            #[inline(always)]
            pub fn rwu(&self) -> RWU_R {
                RWU_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Send break"]
            #[inline(always)]
            pub fn sbk(&self) -> SBK_R {
                SBK_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            pub fn ue(&mut self) -> UE_W {
                UE_W { w: self }
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m(&mut self) -> M_W {
                M_W { w: self }
            }
            #[doc = "Bit 11 - Wakeup method"]
            #[inline(always)]
            pub fn wake(&mut self) -> WAKE_W {
                WAKE_W { w: self }
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&mut self) -> PCE_W {
                PCE_W { w: self }
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&mut self) -> PEIE_W {
                PEIE_W { w: self }
            }
            #[doc = "Bit 7 - TXE interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&mut self) -> IDLEIE_W {
                IDLEIE_W { w: self }
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&mut self) -> TE_W {
                TE_W { w: self }
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&mut self) -> RE_W {
                RE_W { w: self }
            }
            #[doc = "Bit 1 - Receiver wakeup"]
            #[inline(always)]
            pub fn rwu(&mut self) -> RWU_W {
                RWU_W { w: self }
            }
            #[doc = "Bit 0 - Send break"]
            #[inline(always)]
            pub fn sbk(&mut self) -> SBK_W {
                SBK_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr1](index.html) module"]
        pub struct CTLR1_SPEC;
        impl crate::RegisterSpec for CTLR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr1::R](R) reader structure"]
        impl crate::Readable for CTLR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr1::W](W) writer structure"]
        impl crate::Writable for CTLR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR1 to value 0"]
        impl crate::Resettable for CTLR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR2 register accessor: an alias for `Reg<CTLR2_SPEC>`"]
    pub type CTLR2 = crate::Reg<ctlr2::CTLR2_SPEC>;
    #[doc = "Control register 2"]
    pub mod ctlr2 {
        #[doc = "Register `CTLR2` reader"]
        pub struct R(crate::R<CTLR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR2` writer"]
        pub struct W(crate::W<CTLR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LINEN` reader - LIN mode enable"]
        pub struct LINEN_R(crate::FieldReader<bool>);
        impl LINEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LINEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LINEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LINEN` writer - LIN mode enable"]
        pub struct LINEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LINEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 14)) | ((value as u32 & 1) << 14);
                self.w
            }
        }
        #[doc = "Field `STOP` reader - STOP bits"]
        pub struct STOP_R(crate::FieldReader<u8>);
        impl STOP_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                STOP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STOP_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STOP` writer - STOP bits"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 12)) | ((value as u32 & 3) << 12);
                self.w
            }
        }
        #[doc = "Field `CLKEN` reader - Clock enable"]
        pub struct CLKEN_R(crate::FieldReader<bool>);
        impl CLKEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLKEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLKEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLKEN` writer - Clock enable"]
        pub struct CLKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `CPOL` reader - Clock polarity"]
        pub struct CPOL_R(crate::FieldReader<bool>);
        impl CPOL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPOL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPOL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPOL` writer - Clock polarity"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CPHA` reader - Clock phase"]
        pub struct CPHA_R(crate::FieldReader<bool>);
        impl CPHA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPHA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPHA_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPHA` writer - Clock phase"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `LBCL` reader - Last bit clock pulse"]
        pub struct LBCL_R(crate::FieldReader<bool>);
        impl LBCL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LBCL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LBCL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LBCL` writer - Last bit clock pulse"]
        pub struct LBCL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBCL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `LBDIE` reader - LIN break detection interrupt enable"]
        pub struct LBDIE_R(crate::FieldReader<bool>);
        impl LBDIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LBDIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LBDIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LBDIE` writer - LIN break detection interrupt enable"]
        pub struct LBDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `LBDL` reader - lin break detection length"]
        pub struct LBDL_R(crate::FieldReader<bool>);
        impl LBDL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LBDL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LBDL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LBDL` writer - lin break detection length"]
        pub struct LBDL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `ADD` reader - Address of the USART node"]
        pub struct ADD_R(crate::FieldReader<u8>);
        impl ADD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ADD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADD_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADD` writer - Address of the USART node"]
        pub struct ADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&self) -> LINEN_R {
                LINEN_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&self) -> CLKEN_R {
                CLKEN_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&self) -> LBCL_R {
                LBCL_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&self) -> LBDIE_R {
                LBDIE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - lin break detection length"]
            #[inline(always)]
            pub fn lbdl(&self) -> LBDL_R {
                LBDL_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bits 0:3 - Address of the USART node"]
            #[inline(always)]
            pub fn add(&self) -> ADD_R {
                ADD_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&mut self) -> LINEN_W {
                LINEN_W { w: self }
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&mut self) -> CLKEN_W {
                CLKEN_W { w: self }
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&mut self) -> LBCL_W {
                LBCL_W { w: self }
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&mut self) -> LBDIE_W {
                LBDIE_W { w: self }
            }
            #[doc = "Bit 5 - lin break detection length"]
            #[inline(always)]
            pub fn lbdl(&mut self) -> LBDL_W {
                LBDL_W { w: self }
            }
            #[doc = "Bits 0:3 - Address of the USART node"]
            #[inline(always)]
            pub fn add(&mut self) -> ADD_W {
                ADD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr2](index.html) module"]
        pub struct CTLR2_SPEC;
        impl crate::RegisterSpec for CTLR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr2::R](R) reader structure"]
        impl crate::Readable for CTLR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr2::W](W) writer structure"]
        impl crate::Writable for CTLR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR2 to value 0"]
        impl crate::Resettable for CTLR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR3 register accessor: an alias for `Reg<CTLR3_SPEC>`"]
    pub type CTLR3 = crate::Reg<ctlr3::CTLR3_SPEC>;
    #[doc = "Control register 3"]
    pub mod ctlr3 {
        #[doc = "Register `CTLR3` reader"]
        pub struct R(crate::R<CTLR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR3` writer"]
        pub struct W(crate::W<CTLR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CTSIE` reader - CTS interrupt enable"]
        pub struct CTSIE_R(crate::FieldReader<bool>);
        impl CTSIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTSIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTSIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTSIE` writer - CTS interrupt enable"]
        pub struct CTSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `CTSE` reader - CTS enable"]
        pub struct CTSE_R(crate::FieldReader<bool>);
        impl CTSE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTSE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTSE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTSE` writer - CTS enable"]
        pub struct CTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `RTSE` reader - RTS enable"]
        pub struct RTSE_R(crate::FieldReader<bool>);
        impl RTSE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTSE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTSE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTSE` writer - RTS enable"]
        pub struct RTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `DMAT` reader - DMA enable transmitter"]
        pub struct DMAT_R(crate::FieldReader<bool>);
        impl DMAT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAT` writer - DMA enable transmitter"]
        pub struct DMAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `DMAR` reader - DMA enable receiver"]
        pub struct DMAR_R(crate::FieldReader<bool>);
        impl DMAR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAR` writer - DMA enable receiver"]
        pub struct DMAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `SCEN` reader - Smartcard mode enable"]
        pub struct SCEN_R(crate::FieldReader<bool>);
        impl SCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SCEN` writer - Smartcard mode enable"]
        pub struct SCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `NACK` reader - Smartcard NACK enable"]
        pub struct NACK_R(crate::FieldReader<bool>);
        impl NACK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NACK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NACK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NACK` writer - Smartcard NACK enable"]
        pub struct NACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `HDSEL` reader - Half-duplex selection"]
        pub struct HDSEL_R(crate::FieldReader<bool>);
        impl HDSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDSEL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDSEL` writer - Half-duplex selection"]
        pub struct HDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `IRLP` reader - IrDA low-power"]
        pub struct IRLP_R(crate::FieldReader<bool>);
        impl IRLP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IRLP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IRLP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IRLP` writer - IrDA low-power"]
        pub struct IRLP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRLP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `IREN` reader - IrDA mode enable"]
        pub struct IREN_R(crate::FieldReader<bool>);
        impl IREN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IREN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IREN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IREN` writer - IrDA mode enable"]
        pub struct IREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `EIE` reader - Error interrupt enable"]
        pub struct EIE_R(crate::FieldReader<bool>);
        impl EIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EIE` writer - Error interrupt enable"]
        pub struct EIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&self) -> CTSIE_R {
                CTSIE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&self) -> CTSE_R {
                CTSE_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&self) -> RTSE_R {
                RTSE_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&self) -> DMAT_R {
                DMAT_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&self) -> DMAR_R {
                DMAR_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&self) -> SCEN_R {
                SCEN_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&self) -> NACK_R {
                NACK_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&self) -> HDSEL_R {
                HDSEL_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&self) -> IRLP_R {
                IRLP_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&self) -> IREN_R {
                IREN_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&self) -> EIE_R {
                EIE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&mut self) -> CTSIE_W {
                CTSIE_W { w: self }
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&mut self) -> CTSE_W {
                CTSE_W { w: self }
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&mut self) -> RTSE_W {
                RTSE_W { w: self }
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&mut self) -> DMAT_W {
                DMAT_W { w: self }
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&mut self) -> DMAR_W {
                DMAR_W { w: self }
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&mut self) -> SCEN_W {
                SCEN_W { w: self }
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&mut self) -> NACK_W {
                NACK_W { w: self }
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&mut self) -> HDSEL_W {
                HDSEL_W { w: self }
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&mut self) -> IRLP_W {
                IRLP_W { w: self }
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&mut self) -> IREN_W {
                IREN_W { w: self }
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&mut self) -> EIE_W {
                EIE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr3](index.html) module"]
        pub struct CTLR3_SPEC;
        impl crate::RegisterSpec for CTLR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr3::R](R) reader structure"]
        impl crate::Readable for CTLR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr3::W](W) writer structure"]
        impl crate::Writable for CTLR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR3 to value 0"]
        impl crate::Resettable for CTLR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPR register accessor: an alias for `Reg<GPR_SPEC>`"]
    pub type GPR = crate::Reg<gpr::GPR_SPEC>;
    #[doc = "Guard time and prescaler register"]
    pub mod gpr {
        #[doc = "Register `GPR` reader"]
        pub struct R(crate::R<GPR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPR` writer"]
        pub struct W(crate::W<GPR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `GT` reader - Guard time value"]
        pub struct GT_R(crate::FieldReader<u8>);
        impl GT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                GT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GT_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GT` writer - Guard time value"]
        pub struct GT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u32 & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Field `PSC` reader - Prescaler value"]
        pub struct PSC_R(crate::FieldReader<u8>);
        impl PSC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSC_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSC` writer - Prescaler value"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&self) -> GT_R {
                GT_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&mut self) -> GT_W {
                GT_W { w: self }
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Guard time and prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpr](index.html) module"]
        pub struct GPR_SPEC;
        impl crate::RegisterSpec for GPR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpr::R](R) reader structure"]
        impl crate::Readable for GPR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpr::W](W) writer structure"]
        impl crate::Writable for GPR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPR to value 0"]
        impl crate::Resettable for GPR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART2 {}
impl USART2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use usart1 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART3 {}
impl USART3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART3 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use usart1 as usart3;
#[doc = "Analog to digital converter"]
pub struct ADC__TKEY {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC__TKEY {}
impl ADC__TKEY {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc__tkey::RegisterBlock = 0x4001_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc__tkey::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC__TKEY {
    type Target = adc__tkey::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC__TKEY {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC__TKEY").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc__tkey {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - status register"]
        pub statr: crate::Reg<statr::STATR_SPEC>,
        #[doc = "0x04 - control register 1/TKEY_V_CTLR"]
        pub ctlr1__ctlr: crate::Reg<ctlr1__ctlr::CTLR1__CTLR_SPEC>,
        #[doc = "0x08 - control register 2"]
        pub ctlr2: crate::Reg<ctlr2::CTLR2_SPEC>,
        #[doc = "0x0c - sample time register 1"]
        pub samptr1: crate::Reg<samptr1::SAMPTR1_SPEC>,
        #[doc = "0x10 - sample time register 2"]
        pub samptr2: crate::Reg<samptr2::SAMPTR2_SPEC>,
        #[doc = "0x14 - injected channel data offset register x"]
        pub iofr1: crate::Reg<iofr1::IOFR1_SPEC>,
        #[doc = "0x18 - injected channel data offset register x"]
        pub iofr2: crate::Reg<iofr2::IOFR2_SPEC>,
        #[doc = "0x1c - injected channel data offset register x"]
        pub iofr3: crate::Reg<iofr3::IOFR3_SPEC>,
        #[doc = "0x20 - injected channel data offset register x"]
        pub iofr4: crate::Reg<iofr4::IOFR4_SPEC>,
        #[doc = "0x24 - watchdog higher threshold register"]
        pub wdhtr: crate::Reg<wdhtr::WDHTR_SPEC>,
        #[doc = "0x28 - watchdog lower threshold register"]
        pub wdltr: crate::Reg<wdltr::WDLTR_SPEC>,
        #[doc = "0x2c - regular sequence register 1"]
        pub rsqr1: crate::Reg<rsqr1::RSQR1_SPEC>,
        #[doc = "0x30 - regular sequence register 2"]
        pub rsqr2: crate::Reg<rsqr2::RSQR2_SPEC>,
        #[doc = "0x34 - regular sequence register 3;TKEY_V_CHANNEL"]
        pub rsqr3__channel: crate::Reg<rsqr3__channel::RSQR3__CHANNEL_SPEC>,
        #[doc = "0x38 - injected sequence register"]
        pub isqr: crate::Reg<isqr::ISQR_SPEC>,
        #[doc = "0x3c - injected data register x"]
        pub idatar1: crate::Reg<idatar1::IDATAR1_SPEC>,
        #[doc = "0x40 - injected data register x"]
        pub idatar2: crate::Reg<idatar2::IDATAR2_SPEC>,
        #[doc = "0x44 - injected data register x"]
        pub idatar3: crate::Reg<idatar3::IDATAR3_SPEC>,
        #[doc = "0x48 - injected data register x"]
        pub idatar4: crate::Reg<idatar4::IDATAR4_SPEC>,
        #[doc = "0x4c - regular data register;TKEY_V status register"]
        pub rdatar__sdr: crate::Reg<rdatar__sdr::RDATAR__SDR_SPEC>,
    }
    #[doc = "STATR register accessor: an alias for `Reg<STATR_SPEC>`"]
    pub type STATR = crate::Reg<statr::STATR_SPEC>;
    #[doc = "status register"]
    pub mod statr {
        #[doc = "Register `STATR` reader"]
        pub struct R(crate::R<STATR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STATR` writer"]
        pub struct W(crate::W<STATR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STATR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STATR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RSTRT` reader - Regular channel start flag"]
        pub struct RSTRT_R(crate::FieldReader<bool>);
        impl RSTRT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RSTRT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSTRT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSTRT` writer - Regular channel start flag"]
        pub struct RSTRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSTRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `ISTRT` reader - Injected channel start flag"]
        pub struct ISTRT_R(crate::FieldReader<bool>);
        impl ISTRT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISTRT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISTRT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISTRT` writer - Injected channel start flag"]
        pub struct ISTRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISTRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `IEOC` reader - Injected channel end of conversion"]
        pub struct IEOC_R(crate::FieldReader<bool>);
        impl IEOC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IEOC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEOC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEOC` writer - Injected channel end of conversion"]
        pub struct IEOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEOC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `EOC` reader - Regular channel end of conversion"]
        pub struct EOC_R(crate::FieldReader<bool>);
        impl EOC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EOC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EOC_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EOC` writer - Regular channel end of conversion"]
        pub struct EOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `AWD` reader - Analog watchdog flag"]
        pub struct AWD_R(crate::FieldReader<bool>);
        impl AWD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AWD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AWD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AWD` writer - Analog watchdog flag"]
        pub struct AWD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 4 - Regular channel start flag"]
            #[inline(always)]
            pub fn rstrt(&self) -> RSTRT_R {
                RSTRT_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - Injected channel start flag"]
            #[inline(always)]
            pub fn istrt(&self) -> ISTRT_R {
                ISTRT_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Injected channel end of conversion"]
            #[inline(always)]
            pub fn ieoc(&self) -> IEOC_R {
                IEOC_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Regular channel end of conversion"]
            #[inline(always)]
            pub fn eoc(&self) -> EOC_R {
                EOC_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Analog watchdog flag"]
            #[inline(always)]
            pub fn awd(&self) -> AWD_R {
                AWD_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - Regular channel start flag"]
            #[inline(always)]
            pub fn rstrt(&mut self) -> RSTRT_W {
                RSTRT_W { w: self }
            }
            #[doc = "Bit 3 - Injected channel start flag"]
            #[inline(always)]
            pub fn istrt(&mut self) -> ISTRT_W {
                ISTRT_W { w: self }
            }
            #[doc = "Bit 2 - Injected channel end of conversion"]
            #[inline(always)]
            pub fn ieoc(&mut self) -> IEOC_W {
                IEOC_W { w: self }
            }
            #[doc = "Bit 1 - Regular channel end of conversion"]
            #[inline(always)]
            pub fn eoc(&mut self) -> EOC_W {
                EOC_W { w: self }
            }
            #[doc = "Bit 0 - Analog watchdog flag"]
            #[inline(always)]
            pub fn awd(&mut self) -> AWD_W {
                AWD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [statr](index.html) module"]
        pub struct STATR_SPEC;
        impl crate::RegisterSpec for STATR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [statr::R](R) reader structure"]
        impl crate::Readable for STATR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [statr::W](W) writer structure"]
        impl crate::Writable for STATR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STATR to value 0"]
        impl crate::Resettable for STATR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR1__CTLR register accessor: an alias for `Reg<CTLR1__CTLR_SPEC>`"]
    pub type CTLR1__CTLR = crate::Reg<ctlr1__ctlr::CTLR1__CTLR_SPEC>;
    #[doc = "control register 1/TKEY_V_CTLR"]
    pub mod ctlr1__ctlr {
        #[doc = "Register `CTLR1__CTLR` reader"]
        pub struct R(crate::R<CTLR1__CTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR1__CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR1__CTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR1__CTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR1__CTLR` writer"]
        pub struct W(crate::W<CTLR1__CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR1__CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR1__CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR1__CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CCSEL` reader - Count frequency select"]
        pub struct CCSEL_R(crate::FieldReader<u8>);
        impl CCSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CCSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCSEL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCSEL` writer - Count frequency select"]
        pub struct CCSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 28)) | ((value as u32 & 7) << 28);
                self.w
            }
        }
        #[doc = "Field `TKIF` reader - Conversion complete flag"]
        pub struct TKIF_R(crate::FieldReader<bool>);
        impl TKIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TKIF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TKIF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TKIF` writer - Conversion complete flag"]
        pub struct TKIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TKIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 27)) | ((value as u32 & 1) << 27);
                self.w
            }
        }
        #[doc = "Field `TKCPS` reader - TKEY_V count period select"]
        pub struct TKCPS_R(crate::FieldReader<bool>);
        impl TKCPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TKCPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TKCPS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TKCPS` writer - TKEY_V count period select"]
        pub struct TKCPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TKCPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 26)) | ((value as u32 & 1) << 26);
                self.w
            }
        }
        #[doc = "Field `TKIEN` reader - TKEY_V Interrupt enable"]
        pub struct TKIEN_R(crate::FieldReader<bool>);
        impl TKIEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TKIEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TKIEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TKIEN` writer - TKEY_V Interrupt enable"]
        pub struct TKIEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TKIEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 25)) | ((value as u32 & 1) << 25);
                self.w
            }
        }
        #[doc = "Field `TKENABLE` reader - TKEY enable, including TKEY_F and TKEY_V"]
        pub struct TKENABLE_R(crate::FieldReader<bool>);
        impl TKENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TKENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TKENABLE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TKENABLE` writer - TKEY enable, including TKEY_F and TKEY_V"]
        pub struct TKENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TKENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 24)) | ((value as u32 & 1) << 24);
                self.w
            }
        }
        #[doc = "Field `RAWDEN` reader - Analog watchdog enable on regular channels"]
        pub struct RAWDEN_R(crate::FieldReader<bool>);
        impl RAWDEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RAWDEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RAWDEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RAWDEN` writer - Analog watchdog enable on regular channels"]
        pub struct RAWDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAWDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 23)) | ((value as u32 & 1) << 23);
                self.w
            }
        }
        #[doc = "Field `IAWDEN` reader - Analog watchdog enable on injected channels"]
        pub struct IAWDEN_R(crate::FieldReader<bool>);
        impl IAWDEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IAWDEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IAWDEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IAWDEN` writer - Analog watchdog enable on injected channels"]
        pub struct IAWDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IAWDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 22)) | ((value as u32 & 1) << 22);
                self.w
            }
        }
        #[doc = "Field `DISCNUM` reader - Discontinuous mode channel count"]
        pub struct DISCNUM_R(crate::FieldReader<u8>);
        impl DISCNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DISCNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DISCNUM_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DISCNUM` writer - Discontinuous mode channel count"]
        pub struct DISCNUM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCNUM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 13)) | ((value as u32 & 7) << 13);
                self.w
            }
        }
        #[doc = "Field `IDISCEN` reader - Discontinuous mode on injected channels"]
        pub struct IDISCEN_R(crate::FieldReader<bool>);
        impl IDISCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IDISCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDISCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDISCEN` writer - Discontinuous mode on injected channels"]
        pub struct IDISCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDISCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `RDISCEN` reader - Discontinuous mode on regular channels"]
        pub struct RDISCEN_R(crate::FieldReader<bool>);
        impl RDISCEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RDISCEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RDISCEN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RDISCEN` writer - Discontinuous mode on regular channels"]
        pub struct RDISCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDISCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `IAUTO` reader - Automatic injected group conversion"]
        pub struct IAUTO_R(crate::FieldReader<bool>);
        impl IAUTO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IAUTO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IAUTO_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IAUTO` writer - Automatic injected group conversion"]
        pub struct IAUTO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IAUTO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `AWDSGL` reader - Enable the watchdog on a single channel in scan mode"]
        pub struct AWDSGL_R(crate::FieldReader<bool>);
        impl AWDSGL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AWDSGL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AWDSGL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AWDSGL` writer - Enable the watchdog on a single channel in scan mode"]
        pub struct AWDSGL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDSGL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `SCAN` reader - Scan mode enable"]
        pub struct SCAN_R(crate::FieldReader<bool>);
        impl SCAN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SCAN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SCAN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SCAN` writer - Scan mode enable"]
        pub struct SCAN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCAN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `IEOCIE` reader - Interrupt enable for injected channels"]
        pub struct IEOCIE_R(crate::FieldReader<bool>);
        impl IEOCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IEOCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEOCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEOCIE` writer - Interrupt enable for injected channels"]
        pub struct IEOCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEOCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `AWDIE` reader - Analog watchdog interrupt enable"]
        pub struct AWDIE_R(crate::FieldReader<bool>);
        impl AWDIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AWDIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AWDIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AWDIE` writer - Analog watchdog interrupt enable"]
        pub struct AWDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `EOCIE` reader - Interrupt enable for EOC"]
        pub struct EOCIE_R(crate::FieldReader<bool>);
        impl EOCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EOCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EOCIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EOCIE` writer - Interrupt enable for EOC"]
        pub struct EOCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `AWDCH` reader - Analog watchdog channel select bits"]
        pub struct AWDCH_R(crate::FieldReader<u8>);
        impl AWDCH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                AWDCH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AWDCH_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AWDCH` writer - Analog watchdog channel select bits"]
        pub struct AWDCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDCH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u32 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:30 - Count frequency select"]
            #[inline(always)]
            pub fn ccsel(&self) -> CCSEL_R {
                CCSEL_R::new(((self.bits >> 28) & 7) as u8)
            }
            #[doc = "Bit 27 - Conversion complete flag"]
            #[inline(always)]
            pub fn tkif(&self) -> TKIF_R {
                TKIF_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26 - TKEY_V count period select"]
            #[inline(always)]
            pub fn tkcps(&self) -> TKCPS_R {
                TKCPS_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25 - TKEY_V Interrupt enable"]
            #[inline(always)]
            pub fn tkien(&self) -> TKIEN_R {
                TKIEN_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24 - TKEY enable, including TKEY_F and TKEY_V"]
            #[inline(always)]
            pub fn tkenable(&self) -> TKENABLE_R {
                TKENABLE_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23 - Analog watchdog enable on regular channels"]
            #[inline(always)]
            pub fn rawden(&self) -> RAWDEN_R {
                RAWDEN_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22 - Analog watchdog enable on injected channels"]
            #[inline(always)]
            pub fn iawden(&self) -> IAWDEN_R {
                IAWDEN_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bits 13:15 - Discontinuous mode channel count"]
            #[inline(always)]
            pub fn discnum(&self) -> DISCNUM_R {
                DISCNUM_R::new(((self.bits >> 13) & 7) as u8)
            }
            #[doc = "Bit 12 - Discontinuous mode on injected channels"]
            #[inline(always)]
            pub fn idiscen(&self) -> IDISCEN_R {
                IDISCEN_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            pub fn rdiscen(&self) -> RDISCEN_R {
                RDISCEN_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - Automatic injected group conversion"]
            #[inline(always)]
            pub fn iauto(&self) -> IAUTO_R {
                IAUTO_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - Enable the watchdog on a single channel in scan mode"]
            #[inline(always)]
            pub fn awdsgl(&self) -> AWDSGL_R {
                AWDSGL_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - Scan mode enable"]
            #[inline(always)]
            pub fn scan(&self) -> SCAN_R {
                SCAN_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - Interrupt enable for injected channels"]
            #[inline(always)]
            pub fn ieocie(&self) -> IEOCIE_R {
                IEOCIE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - Analog watchdog interrupt enable"]
            #[inline(always)]
            pub fn awdie(&self) -> AWDIE_R {
                AWDIE_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            pub fn eocie(&self) -> EOCIE_R {
                EOCIE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bits 0:4 - Analog watchdog channel select bits"]
            #[inline(always)]
            pub fn awdch(&self) -> AWDCH_R {
                AWDCH_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:30 - Count frequency select"]
            #[inline(always)]
            pub fn ccsel(&mut self) -> CCSEL_W {
                CCSEL_W { w: self }
            }
            #[doc = "Bit 27 - Conversion complete flag"]
            #[inline(always)]
            pub fn tkif(&mut self) -> TKIF_W {
                TKIF_W { w: self }
            }
            #[doc = "Bit 26 - TKEY_V count period select"]
            #[inline(always)]
            pub fn tkcps(&mut self) -> TKCPS_W {
                TKCPS_W { w: self }
            }
            #[doc = "Bit 25 - TKEY_V Interrupt enable"]
            #[inline(always)]
            pub fn tkien(&mut self) -> TKIEN_W {
                TKIEN_W { w: self }
            }
            #[doc = "Bit 24 - TKEY enable, including TKEY_F and TKEY_V"]
            #[inline(always)]
            pub fn tkenable(&mut self) -> TKENABLE_W {
                TKENABLE_W { w: self }
            }
            #[doc = "Bit 23 - Analog watchdog enable on regular channels"]
            #[inline(always)]
            pub fn rawden(&mut self) -> RAWDEN_W {
                RAWDEN_W { w: self }
            }
            #[doc = "Bit 22 - Analog watchdog enable on injected channels"]
            #[inline(always)]
            pub fn iawden(&mut self) -> IAWDEN_W {
                IAWDEN_W { w: self }
            }
            #[doc = "Bits 13:15 - Discontinuous mode channel count"]
            #[inline(always)]
            pub fn discnum(&mut self) -> DISCNUM_W {
                DISCNUM_W { w: self }
            }
            #[doc = "Bit 12 - Discontinuous mode on injected channels"]
            #[inline(always)]
            pub fn idiscen(&mut self) -> IDISCEN_W {
                IDISCEN_W { w: self }
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            pub fn rdiscen(&mut self) -> RDISCEN_W {
                RDISCEN_W { w: self }
            }
            #[doc = "Bit 10 - Automatic injected group conversion"]
            #[inline(always)]
            pub fn iauto(&mut self) -> IAUTO_W {
                IAUTO_W { w: self }
            }
            #[doc = "Bit 9 - Enable the watchdog on a single channel in scan mode"]
            #[inline(always)]
            pub fn awdsgl(&mut self) -> AWDSGL_W {
                AWDSGL_W { w: self }
            }
            #[doc = "Bit 8 - Scan mode enable"]
            #[inline(always)]
            pub fn scan(&mut self) -> SCAN_W {
                SCAN_W { w: self }
            }
            #[doc = "Bit 7 - Interrupt enable for injected channels"]
            #[inline(always)]
            pub fn ieocie(&mut self) -> IEOCIE_W {
                IEOCIE_W { w: self }
            }
            #[doc = "Bit 6 - Analog watchdog interrupt enable"]
            #[inline(always)]
            pub fn awdie(&mut self) -> AWDIE_W {
                AWDIE_W { w: self }
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            pub fn eocie(&mut self) -> EOCIE_W {
                EOCIE_W { w: self }
            }
            #[doc = "Bits 0:4 - Analog watchdog channel select bits"]
            #[inline(always)]
            pub fn awdch(&mut self) -> AWDCH_W {
                AWDCH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1/TKEY_V_CTLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr1__ctlr](index.html) module"]
        pub struct CTLR1__CTLR_SPEC;
        impl crate::RegisterSpec for CTLR1__CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr1__ctlr::R](R) reader structure"]
        impl crate::Readable for CTLR1__CTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr1__ctlr::W](W) writer structure"]
        impl crate::Writable for CTLR1__CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR1__CTLR to value 0"]
        impl crate::Resettable for CTLR1__CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR2 register accessor: an alias for `Reg<CTLR2_SPEC>`"]
    pub type CTLR2 = crate::Reg<ctlr2::CTLR2_SPEC>;
    #[doc = "control register 2"]
    pub mod ctlr2 {
        #[doc = "Register `CTLR2` reader"]
        pub struct R(crate::R<CTLR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR2` writer"]
        pub struct W(crate::W<CTLR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TSVREFE` reader - Temperature sensor and VREFINT enable"]
        pub struct TSVREFE_R(crate::FieldReader<bool>);
        impl TSVREFE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TSVREFE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TSVREFE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TSVREFE` writer - Temperature sensor and VREFINT enable"]
        pub struct TSVREFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSVREFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 23)) | ((value as u32 & 1) << 23);
                self.w
            }
        }
        #[doc = "Field `RSWSTART` reader - Start conversion of regular channels"]
        pub struct RSWSTART_R(crate::FieldReader<bool>);
        impl RSWSTART_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RSWSTART_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSWSTART_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSWSTART` writer - Start conversion of regular channels"]
        pub struct RSWSTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSWSTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 22)) | ((value as u32 & 1) << 22);
                self.w
            }
        }
        #[doc = "Field `ISWSTART` reader - Start conversion of injected channels"]
        pub struct ISWSTART_R(crate::FieldReader<bool>);
        impl ISWSTART_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISWSTART_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISWSTART_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISWSTART` writer - Start conversion of injected channels"]
        pub struct ISWSTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISWSTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 21)) | ((value as u32 & 1) << 21);
                self.w
            }
        }
        #[doc = "Field `EXTTRIG` reader - External trigger conversion mode for regular channels"]
        pub struct EXTTRIG_R(crate::FieldReader<bool>);
        impl EXTTRIG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EXTTRIG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTTRIG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTTRIG` writer - External trigger conversion mode for regular channels"]
        pub struct EXTTRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTTRIG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 20)) | ((value as u32 & 1) << 20);
                self.w
            }
        }
        #[doc = "Field `EXTSEL` reader - External event select for regular group"]
        pub struct EXTSEL_R(crate::FieldReader<u8>);
        impl EXTSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EXTSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTSEL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTSEL` writer - External event select for regular group"]
        pub struct EXTSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 17)) | ((value as u32 & 7) << 17);
                self.w
            }
        }
        #[doc = "Field `IEXTTRIG` reader - External trigger conversion mode for injected channels"]
        pub struct IEXTTRIG_R(crate::FieldReader<bool>);
        impl IEXTTRIG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IEXTTRIG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEXTTRIG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEXTTRIG` writer - External trigger conversion mode for injected channels"]
        pub struct IEXTTRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEXTTRIG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `IEXTSEL` reader - External event select for injected group"]
        pub struct IEXTSEL_R(crate::FieldReader<u8>);
        impl IEXTSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IEXTSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEXTSEL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEXTSEL` writer - External event select for injected group"]
        pub struct IEXTSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEXTSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 12)) | ((value as u32 & 7) << 12);
                self.w
            }
        }
        #[doc = "Field `ALIGN` reader - Data alignment"]
        pub struct ALIGN_R(crate::FieldReader<bool>);
        impl ALIGN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ALIGN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ALIGN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ALIGN` writer - Data alignment"]
        pub struct ALIGN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALIGN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 11)) | ((value as u32 & 1) << 11);
                self.w
            }
        }
        #[doc = "Field `DMA` reader - Direct memory access mode"]
        pub struct DMA_R(crate::FieldReader<bool>);
        impl DMA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA` writer - Direct memory access mode"]
        pub struct DMA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 8)) | ((value as u32 & 1) << 8);
                self.w
            }
        }
        #[doc = "Field `RSTCAL` reader - Reset calibration"]
        pub struct RSTCAL_R(crate::FieldReader<bool>);
        impl RSTCAL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RSTCAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSTCAL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSTCAL` writer - Reset calibration"]
        pub struct RSTCAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSTCAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `CAL` reader - A/D calibration"]
        pub struct CAL_R(crate::FieldReader<bool>);
        impl CAL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAL` writer - A/D calibration"]
        pub struct CAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `CONT` reader - Continuous conversion"]
        pub struct CONT_R(crate::FieldReader<bool>);
        impl CONT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CONT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CONT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CONT` writer - Continuous conversion"]
        pub struct CONT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CONT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `ADON` reader - A/D converter ON / OFF"]
        pub struct ADON_R(crate::FieldReader<bool>);
        impl ADON_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADON_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADON` writer - A/D converter ON / OFF"]
        pub struct ADON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - Temperature sensor and VREFINT enable"]
            #[inline(always)]
            pub fn tsvrefe(&self) -> TSVREFE_R {
                TSVREFE_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22 - Start conversion of regular channels"]
            #[inline(always)]
            pub fn rswstart(&self) -> RSWSTART_R {
                RSWSTART_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21 - Start conversion of injected channels"]
            #[inline(always)]
            pub fn iswstart(&self) -> ISWSTART_R {
                ISWSTART_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20 - External trigger conversion mode for regular channels"]
            #[inline(always)]
            pub fn exttrig(&self) -> EXTTRIG_R {
                EXTTRIG_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bits 17:19 - External event select for regular group"]
            #[inline(always)]
            pub fn extsel(&self) -> EXTSEL_R {
                EXTSEL_R::new(((self.bits >> 17) & 7) as u8)
            }
            #[doc = "Bit 15 - External trigger conversion mode for injected channels"]
            #[inline(always)]
            pub fn iexttrig(&self) -> IEXTTRIG_R {
                IEXTTRIG_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 12:14 - External event select for injected group"]
            #[inline(always)]
            pub fn iextsel(&self) -> IEXTSEL_R {
                IEXTSEL_R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            pub fn align(&self) -> ALIGN_R {
                ALIGN_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 8 - Direct memory access mode"]
            #[inline(always)]
            pub fn dma(&self) -> DMA_R {
                DMA_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 3 - Reset calibration"]
            #[inline(always)]
            pub fn rstcal(&self) -> RSTCAL_R {
                RSTCAL_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - A/D calibration"]
            #[inline(always)]
            pub fn cal(&self) -> CAL_R {
                CAL_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Continuous conversion"]
            #[inline(always)]
            pub fn cont(&self) -> CONT_R {
                CONT_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - A/D converter ON / OFF"]
            #[inline(always)]
            pub fn adon(&self) -> ADON_R {
                ADON_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - Temperature sensor and VREFINT enable"]
            #[inline(always)]
            pub fn tsvrefe(&mut self) -> TSVREFE_W {
                TSVREFE_W { w: self }
            }
            #[doc = "Bit 22 - Start conversion of regular channels"]
            #[inline(always)]
            pub fn rswstart(&mut self) -> RSWSTART_W {
                RSWSTART_W { w: self }
            }
            #[doc = "Bit 21 - Start conversion of injected channels"]
            #[inline(always)]
            pub fn iswstart(&mut self) -> ISWSTART_W {
                ISWSTART_W { w: self }
            }
            #[doc = "Bit 20 - External trigger conversion mode for regular channels"]
            #[inline(always)]
            pub fn exttrig(&mut self) -> EXTTRIG_W {
                EXTTRIG_W { w: self }
            }
            #[doc = "Bits 17:19 - External event select for regular group"]
            #[inline(always)]
            pub fn extsel(&mut self) -> EXTSEL_W {
                EXTSEL_W { w: self }
            }
            #[doc = "Bit 15 - External trigger conversion mode for injected channels"]
            #[inline(always)]
            pub fn iexttrig(&mut self) -> IEXTTRIG_W {
                IEXTTRIG_W { w: self }
            }
            #[doc = "Bits 12:14 - External event select for injected group"]
            #[inline(always)]
            pub fn iextsel(&mut self) -> IEXTSEL_W {
                IEXTSEL_W { w: self }
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            pub fn align(&mut self) -> ALIGN_W {
                ALIGN_W { w: self }
            }
            #[doc = "Bit 8 - Direct memory access mode"]
            #[inline(always)]
            pub fn dma(&mut self) -> DMA_W {
                DMA_W { w: self }
            }
            #[doc = "Bit 3 - Reset calibration"]
            #[inline(always)]
            pub fn rstcal(&mut self) -> RSTCAL_W {
                RSTCAL_W { w: self }
            }
            #[doc = "Bit 2 - A/D calibration"]
            #[inline(always)]
            pub fn cal(&mut self) -> CAL_W {
                CAL_W { w: self }
            }
            #[doc = "Bit 1 - Continuous conversion"]
            #[inline(always)]
            pub fn cont(&mut self) -> CONT_W {
                CONT_W { w: self }
            }
            #[doc = "Bit 0 - A/D converter ON / OFF"]
            #[inline(always)]
            pub fn adon(&mut self) -> ADON_W {
                ADON_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr2](index.html) module"]
        pub struct CTLR2_SPEC;
        impl crate::RegisterSpec for CTLR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr2::R](R) reader structure"]
        impl crate::Readable for CTLR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr2::W](W) writer structure"]
        impl crate::Writable for CTLR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR2 to value 0"]
        impl crate::Resettable for CTLR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SAMPTR1 register accessor: an alias for `Reg<SAMPTR1_SPEC>`"]
    pub type SAMPTR1 = crate::Reg<samptr1::SAMPTR1_SPEC>;
    #[doc = "sample time register 1"]
    pub mod samptr1 {
        #[doc = "Register `SAMPTR1` reader"]
        pub struct R(crate::R<SAMPTR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SAMPTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SAMPTR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SAMPTR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SAMPTR1` writer"]
        pub struct W(crate::W<SAMPTR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SAMPTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SAMPTR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SAMPTR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SMP10` reader - Channel 10 sample time selection"]
        pub struct SMP10_R(crate::FieldReader<u8>);
        impl SMP10_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP10_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP10` writer - Channel 10 sample time selection"]
        pub struct SMP10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !7) | (value as u32 & 7);
                self.w
            }
        }
        #[doc = "Field `SMP11` reader - Channel 11 sample time selection"]
        pub struct SMP11_R(crate::FieldReader<u8>);
        impl SMP11_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP11_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP11` writer - Channel 11 sample time selection"]
        pub struct SMP11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 3)) | ((value as u32 & 7) << 3);
                self.w
            }
        }
        #[doc = "Field `SMP12` reader - Channel 12 sample time selection"]
        pub struct SMP12_R(crate::FieldReader<u8>);
        impl SMP12_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP12_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP12` writer - Channel 12 sample time selection"]
        pub struct SMP12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 6)) | ((value as u32 & 7) << 6);
                self.w
            }
        }
        #[doc = "Field `SMP13` reader - Channel 13 sample time selection"]
        pub struct SMP13_R(crate::FieldReader<u8>);
        impl SMP13_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP13_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP13` writer - Channel 13 sample time selection"]
        pub struct SMP13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 9)) | ((value as u32 & 7) << 9);
                self.w
            }
        }
        #[doc = "Field `SMP14` reader - Channel 14 sample time selection"]
        pub struct SMP14_R(crate::FieldReader<u8>);
        impl SMP14_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP14_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP14` writer - Channel 14 sample time selection"]
        pub struct SMP14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 12)) | ((value as u32 & 7) << 12);
                self.w
            }
        }
        #[doc = "Field `SMP15` reader - Channel 15 sample time selection"]
        pub struct SMP15_R(crate::FieldReader<u8>);
        impl SMP15_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP15_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP15` writer - Channel 15 sample time selection"]
        pub struct SMP15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 15)) | ((value as u32 & 7) << 15);
                self.w
            }
        }
        #[doc = "Field `SMP16` reader - Channel 16 sample time selection"]
        pub struct SMP16_R(crate::FieldReader<u8>);
        impl SMP16_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP16_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP16` writer - Channel 16 sample time selection"]
        pub struct SMP16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP16_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 18)) | ((value as u32 & 7) << 18);
                self.w
            }
        }
        #[doc = "Field `SMP17` reader - Channel 17 sample time selection"]
        pub struct SMP17_R(crate::FieldReader<u8>);
        impl SMP17_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP17_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP17` writer - Channel 17 sample time selection"]
        pub struct SMP17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP17_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 21)) | ((value as u32 & 7) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Channel 10 sample time selection"]
            #[inline(always)]
            pub fn smp10(&self) -> SMP10_R {
                SMP10_R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 3:5 - Channel 11 sample time selection"]
            #[inline(always)]
            pub fn smp11(&self) -> SMP11_R {
                SMP11_R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bits 6:8 - Channel 12 sample time selection"]
            #[inline(always)]
            pub fn smp12(&self) -> SMP12_R {
                SMP12_R::new(((self.bits >> 6) & 7) as u8)
            }
            #[doc = "Bits 9:11 - Channel 13 sample time selection"]
            #[inline(always)]
            pub fn smp13(&self) -> SMP13_R {
                SMP13_R::new(((self.bits >> 9) & 7) as u8)
            }
            #[doc = "Bits 12:14 - Channel 14 sample time selection"]
            #[inline(always)]
            pub fn smp14(&self) -> SMP14_R {
                SMP14_R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bits 15:17 - Channel 15 sample time selection"]
            #[inline(always)]
            pub fn smp15(&self) -> SMP15_R {
                SMP15_R::new(((self.bits >> 15) & 7) as u8)
            }
            #[doc = "Bits 18:20 - Channel 16 sample time selection"]
            #[inline(always)]
            pub fn smp16(&self) -> SMP16_R {
                SMP16_R::new(((self.bits >> 18) & 7) as u8)
            }
            #[doc = "Bits 21:23 - Channel 17 sample time selection"]
            #[inline(always)]
            pub fn smp17(&self) -> SMP17_R {
                SMP17_R::new(((self.bits >> 21) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Channel 10 sample time selection"]
            #[inline(always)]
            pub fn smp10(&mut self) -> SMP10_W {
                SMP10_W { w: self }
            }
            #[doc = "Bits 3:5 - Channel 11 sample time selection"]
            #[inline(always)]
            pub fn smp11(&mut self) -> SMP11_W {
                SMP11_W { w: self }
            }
            #[doc = "Bits 6:8 - Channel 12 sample time selection"]
            #[inline(always)]
            pub fn smp12(&mut self) -> SMP12_W {
                SMP12_W { w: self }
            }
            #[doc = "Bits 9:11 - Channel 13 sample time selection"]
            #[inline(always)]
            pub fn smp13(&mut self) -> SMP13_W {
                SMP13_W { w: self }
            }
            #[doc = "Bits 12:14 - Channel 14 sample time selection"]
            #[inline(always)]
            pub fn smp14(&mut self) -> SMP14_W {
                SMP14_W { w: self }
            }
            #[doc = "Bits 15:17 - Channel 15 sample time selection"]
            #[inline(always)]
            pub fn smp15(&mut self) -> SMP15_W {
                SMP15_W { w: self }
            }
            #[doc = "Bits 18:20 - Channel 16 sample time selection"]
            #[inline(always)]
            pub fn smp16(&mut self) -> SMP16_W {
                SMP16_W { w: self }
            }
            #[doc = "Bits 21:23 - Channel 17 sample time selection"]
            #[inline(always)]
            pub fn smp17(&mut self) -> SMP17_W {
                SMP17_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "sample time register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [samptr1](index.html) module"]
        pub struct SAMPTR1_SPEC;
        impl crate::RegisterSpec for SAMPTR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [samptr1::R](R) reader structure"]
        impl crate::Readable for SAMPTR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [samptr1::W](W) writer structure"]
        impl crate::Writable for SAMPTR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SAMPTR1 to value 0"]
        impl crate::Resettable for SAMPTR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SAMPTR2 register accessor: an alias for `Reg<SAMPTR2_SPEC>`"]
    pub type SAMPTR2 = crate::Reg<samptr2::SAMPTR2_SPEC>;
    #[doc = "sample time register 2"]
    pub mod samptr2 {
        #[doc = "Register `SAMPTR2` reader"]
        pub struct R(crate::R<SAMPTR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SAMPTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SAMPTR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SAMPTR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SAMPTR2` writer"]
        pub struct W(crate::W<SAMPTR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SAMPTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SAMPTR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SAMPTR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SMP0` reader - Channel 0 sample time selection"]
        pub struct SMP0_R(crate::FieldReader<u8>);
        impl SMP0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP0_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP0` writer - Channel 0 sample time selection"]
        pub struct SMP0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !7) | (value as u32 & 7);
                self.w
            }
        }
        #[doc = "Field `SMP1` reader - Channel 1 sample time selection"]
        pub struct SMP1_R(crate::FieldReader<u8>);
        impl SMP1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP1` writer - Channel 1 sample time selection"]
        pub struct SMP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 3)) | ((value as u32 & 7) << 3);
                self.w
            }
        }
        #[doc = "Field `SMP2` reader - Channel 2 sample time selection"]
        pub struct SMP2_R(crate::FieldReader<u8>);
        impl SMP2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP2` writer - Channel 2 sample time selection"]
        pub struct SMP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 6)) | ((value as u32 & 7) << 6);
                self.w
            }
        }
        #[doc = "Field `SMP3` reader - Channel 3 sample time selection"]
        pub struct SMP3_R(crate::FieldReader<u8>);
        impl SMP3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP3_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP3` writer - Channel 3 sample time selection"]
        pub struct SMP3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 9)) | ((value as u32 & 7) << 9);
                self.w
            }
        }
        #[doc = "Field `SMP4` reader - Channel 4 sample time selection"]
        pub struct SMP4_R(crate::FieldReader<u8>);
        impl SMP4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP4_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP4` writer - Channel 4 sample time selection"]
        pub struct SMP4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 12)) | ((value as u32 & 7) << 12);
                self.w
            }
        }
        #[doc = "Field `SMP5` reader - Channel 5 sample time selection"]
        pub struct SMP5_R(crate::FieldReader<u8>);
        impl SMP5_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP5_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP5` writer - Channel 5 sample time selection"]
        pub struct SMP5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 15)) | ((value as u32 & 7) << 15);
                self.w
            }
        }
        #[doc = "Field `SMP6` reader - Channel 6 sample time selection"]
        pub struct SMP6_R(crate::FieldReader<u8>);
        impl SMP6_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP6_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP6` writer - Channel 6 sample time selection"]
        pub struct SMP6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 18)) | ((value as u32 & 7) << 18);
                self.w
            }
        }
        #[doc = "Field `SMP7` reader - Channel 7 sample time selection"]
        pub struct SMP7_R(crate::FieldReader<u8>);
        impl SMP7_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP7_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP7` writer - Channel 7 sample time selection"]
        pub struct SMP7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 21)) | ((value as u32 & 7) << 21);
                self.w
            }
        }
        #[doc = "Field `SMP8` reader - Channel 8 sample time selection"]
        pub struct SMP8_R(crate::FieldReader<u8>);
        impl SMP8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP8_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP8` writer - Channel 8 sample time selection"]
        pub struct SMP8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 24)) | ((value as u32 & 7) << 24);
                self.w
            }
        }
        #[doc = "Field `SMP9` reader - Channel 9 sample time selection"]
        pub struct SMP9_R(crate::FieldReader<u8>);
        impl SMP9_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SMP9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMP9_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMP9` writer - Channel 9 sample time selection"]
        pub struct SMP9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(7 << 27)) | ((value as u32 & 7) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Channel 0 sample time selection"]
            #[inline(always)]
            pub fn smp0(&self) -> SMP0_R {
                SMP0_R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 3:5 - Channel 1 sample time selection"]
            #[inline(always)]
            pub fn smp1(&self) -> SMP1_R {
                SMP1_R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bits 6:8 - Channel 2 sample time selection"]
            #[inline(always)]
            pub fn smp2(&self) -> SMP2_R {
                SMP2_R::new(((self.bits >> 6) & 7) as u8)
            }
            #[doc = "Bits 9:11 - Channel 3 sample time selection"]
            #[inline(always)]
            pub fn smp3(&self) -> SMP3_R {
                SMP3_R::new(((self.bits >> 9) & 7) as u8)
            }
            #[doc = "Bits 12:14 - Channel 4 sample time selection"]
            #[inline(always)]
            pub fn smp4(&self) -> SMP4_R {
                SMP4_R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bits 15:17 - Channel 5 sample time selection"]
            #[inline(always)]
            pub fn smp5(&self) -> SMP5_R {
                SMP5_R::new(((self.bits >> 15) & 7) as u8)
            }
            #[doc = "Bits 18:20 - Channel 6 sample time selection"]
            #[inline(always)]
            pub fn smp6(&self) -> SMP6_R {
                SMP6_R::new(((self.bits >> 18) & 7) as u8)
            }
            #[doc = "Bits 21:23 - Channel 7 sample time selection"]
            #[inline(always)]
            pub fn smp7(&self) -> SMP7_R {
                SMP7_R::new(((self.bits >> 21) & 7) as u8)
            }
            #[doc = "Bits 24:26 - Channel 8 sample time selection"]
            #[inline(always)]
            pub fn smp8(&self) -> SMP8_R {
                SMP8_R::new(((self.bits >> 24) & 7) as u8)
            }
            #[doc = "Bits 27:29 - Channel 9 sample time selection"]
            #[inline(always)]
            pub fn smp9(&self) -> SMP9_R {
                SMP9_R::new(((self.bits >> 27) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Channel 0 sample time selection"]
            #[inline(always)]
            pub fn smp0(&mut self) -> SMP0_W {
                SMP0_W { w: self }
            }
            #[doc = "Bits 3:5 - Channel 1 sample time selection"]
            #[inline(always)]
            pub fn smp1(&mut self) -> SMP1_W {
                SMP1_W { w: self }
            }
            #[doc = "Bits 6:8 - Channel 2 sample time selection"]
            #[inline(always)]
            pub fn smp2(&mut self) -> SMP2_W {
                SMP2_W { w: self }
            }
            #[doc = "Bits 9:11 - Channel 3 sample time selection"]
            #[inline(always)]
            pub fn smp3(&mut self) -> SMP3_W {
                SMP3_W { w: self }
            }
            #[doc = "Bits 12:14 - Channel 4 sample time selection"]
            #[inline(always)]
            pub fn smp4(&mut self) -> SMP4_W {
                SMP4_W { w: self }
            }
            #[doc = "Bits 15:17 - Channel 5 sample time selection"]
            #[inline(always)]
            pub fn smp5(&mut self) -> SMP5_W {
                SMP5_W { w: self }
            }
            #[doc = "Bits 18:20 - Channel 6 sample time selection"]
            #[inline(always)]
            pub fn smp6(&mut self) -> SMP6_W {
                SMP6_W { w: self }
            }
            #[doc = "Bits 21:23 - Channel 7 sample time selection"]
            #[inline(always)]
            pub fn smp7(&mut self) -> SMP7_W {
                SMP7_W { w: self }
            }
            #[doc = "Bits 24:26 - Channel 8 sample time selection"]
            #[inline(always)]
            pub fn smp8(&mut self) -> SMP8_W {
                SMP8_W { w: self }
            }
            #[doc = "Bits 27:29 - Channel 9 sample time selection"]
            #[inline(always)]
            pub fn smp9(&mut self) -> SMP9_W {
                SMP9_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "sample time register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [samptr2](index.html) module"]
        pub struct SAMPTR2_SPEC;
        impl crate::RegisterSpec for SAMPTR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [samptr2::R](R) reader structure"]
        impl crate::Readable for SAMPTR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [samptr2::W](W) writer structure"]
        impl crate::Writable for SAMPTR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SAMPTR2 to value 0"]
        impl crate::Resettable for SAMPTR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IOFR1 register accessor: an alias for `Reg<IOFR1_SPEC>`"]
    pub type IOFR1 = crate::Reg<iofr1::IOFR1_SPEC>;
    #[doc = "injected channel data offset register x"]
    pub mod iofr1 {
        #[doc = "Register `IOFR1` reader"]
        pub struct R(crate::R<IOFR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IOFR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IOFR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IOFR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IOFR1` writer"]
        pub struct W(crate::W<IOFR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IOFR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IOFR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IOFR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IOFFSET1` reader - Data offset for injected channel x"]
        pub struct IOFFSET1_R(crate::FieldReader<u16>);
        impl IOFFSET1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IOFFSET1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOFFSET1_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOFFSET1` writer - Data offset for injected channel x"]
        pub struct IOFFSET1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOFFSET1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset1(&self) -> IOFFSET1_R {
                IOFFSET1_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset1(&mut self) -> IOFFSET1_W {
                IOFFSET1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iofr1](index.html) module"]
        pub struct IOFR1_SPEC;
        impl crate::RegisterSpec for IOFR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iofr1::R](R) reader structure"]
        impl crate::Readable for IOFR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iofr1::W](W) writer structure"]
        impl crate::Writable for IOFR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IOFR1 to value 0"]
        impl crate::Resettable for IOFR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IOFR2 register accessor: an alias for `Reg<IOFR2_SPEC>`"]
    pub type IOFR2 = crate::Reg<iofr2::IOFR2_SPEC>;
    #[doc = "injected channel data offset register x"]
    pub mod iofr2 {
        #[doc = "Register `IOFR2` reader"]
        pub struct R(crate::R<IOFR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IOFR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IOFR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IOFR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IOFR2` writer"]
        pub struct W(crate::W<IOFR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IOFR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IOFR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IOFR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IOFFSET2` reader - Data offset for injected channel x"]
        pub struct IOFFSET2_R(crate::FieldReader<u16>);
        impl IOFFSET2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IOFFSET2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOFFSET2_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOFFSET2` writer - Data offset for injected channel x"]
        pub struct IOFFSET2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOFFSET2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset2(&self) -> IOFFSET2_R {
                IOFFSET2_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset2(&mut self) -> IOFFSET2_W {
                IOFFSET2_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iofr2](index.html) module"]
        pub struct IOFR2_SPEC;
        impl crate::RegisterSpec for IOFR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iofr2::R](R) reader structure"]
        impl crate::Readable for IOFR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iofr2::W](W) writer structure"]
        impl crate::Writable for IOFR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IOFR2 to value 0"]
        impl crate::Resettable for IOFR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IOFR3 register accessor: an alias for `Reg<IOFR3_SPEC>`"]
    pub type IOFR3 = crate::Reg<iofr3::IOFR3_SPEC>;
    #[doc = "injected channel data offset register x"]
    pub mod iofr3 {
        #[doc = "Register `IOFR3` reader"]
        pub struct R(crate::R<IOFR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IOFR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IOFR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IOFR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IOFR3` writer"]
        pub struct W(crate::W<IOFR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IOFR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IOFR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IOFR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IOFFSET3` reader - Data offset for injected channel x"]
        pub struct IOFFSET3_R(crate::FieldReader<u16>);
        impl IOFFSET3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IOFFSET3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOFFSET3_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOFFSET3` writer - Data offset for injected channel x"]
        pub struct IOFFSET3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOFFSET3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset3(&self) -> IOFFSET3_R {
                IOFFSET3_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset3(&mut self) -> IOFFSET3_W {
                IOFFSET3_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iofr3](index.html) module"]
        pub struct IOFR3_SPEC;
        impl crate::RegisterSpec for IOFR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iofr3::R](R) reader structure"]
        impl crate::Readable for IOFR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iofr3::W](W) writer structure"]
        impl crate::Writable for IOFR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IOFR3 to value 0"]
        impl crate::Resettable for IOFR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IOFR4 register accessor: an alias for `Reg<IOFR4_SPEC>`"]
    pub type IOFR4 = crate::Reg<iofr4::IOFR4_SPEC>;
    #[doc = "injected channel data offset register x"]
    pub mod iofr4 {
        #[doc = "Register `IOFR4` reader"]
        pub struct R(crate::R<IOFR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IOFR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IOFR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IOFR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IOFR4` writer"]
        pub struct W(crate::W<IOFR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IOFR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IOFR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IOFR4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IOFFSET4` reader - Data offset for injected channel x"]
        pub struct IOFFSET4_R(crate::FieldReader<u16>);
        impl IOFFSET4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IOFFSET4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IOFFSET4_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IOFFSET4` writer - Data offset for injected channel x"]
        pub struct IOFFSET4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOFFSET4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset4(&self) -> IOFFSET4_R {
                IOFFSET4_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn ioffset4(&mut self) -> IOFFSET4_W {
                IOFFSET4_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iofr4](index.html) module"]
        pub struct IOFR4_SPEC;
        impl crate::RegisterSpec for IOFR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iofr4::R](R) reader structure"]
        impl crate::Readable for IOFR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iofr4::W](W) writer structure"]
        impl crate::Writable for IOFR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IOFR4 to value 0"]
        impl crate::Resettable for IOFR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "WDHTR register accessor: an alias for `Reg<WDHTR_SPEC>`"]
    pub type WDHTR = crate::Reg<wdhtr::WDHTR_SPEC>;
    #[doc = "watchdog higher threshold register"]
    pub mod wdhtr {
        #[doc = "Register `WDHTR` reader"]
        pub struct R(crate::R<WDHTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDHTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDHTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDHTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WDHTR` writer"]
        pub struct W(crate::W<WDHTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDHTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDHTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDHTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HT` reader - Analog watchdog higher threshold"]
        pub struct HT_R(crate::FieldReader<u16>);
        impl HT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                HT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HT` writer - Analog watchdog higher threshold"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "watchdog higher threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdhtr](index.html) module"]
        pub struct WDHTR_SPEC;
        impl crate::RegisterSpec for WDHTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wdhtr::R](R) reader structure"]
        impl crate::Readable for WDHTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wdhtr::W](W) writer structure"]
        impl crate::Writable for WDHTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDHTR to value 0"]
        impl crate::Resettable for WDHTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "WDLTR register accessor: an alias for `Reg<WDLTR_SPEC>`"]
    pub type WDLTR = crate::Reg<wdltr::WDLTR_SPEC>;
    #[doc = "watchdog lower threshold register"]
    pub mod wdltr {
        #[doc = "Register `WDLTR` reader"]
        pub struct R(crate::R<WDLTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDLTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDLTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDLTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WDLTR` writer"]
        pub struct W(crate::W<WDLTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDLTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDLTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDLTR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LT` reader - Analog watchdog lower threshold"]
        pub struct LT_R(crate::FieldReader<u16>);
        impl LT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                LT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LT_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LT` writer - Analog watchdog lower threshold"]
        pub struct LT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn lt(&self) -> LT_R {
                LT_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn lt(&mut self) -> LT_W {
                LT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "watchdog lower threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdltr](index.html) module"]
        pub struct WDLTR_SPEC;
        impl crate::RegisterSpec for WDLTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wdltr::R](R) reader structure"]
        impl crate::Readable for WDLTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wdltr::W](W) writer structure"]
        impl crate::Writable for WDLTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDLTR to value 0"]
        impl crate::Resettable for WDLTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RSQR1 register accessor: an alias for `Reg<RSQR1_SPEC>`"]
    pub type RSQR1 = crate::Reg<rsqr1::RSQR1_SPEC>;
    #[doc = "regular sequence register 1"]
    pub mod rsqr1 {
        #[doc = "Register `RSQR1` reader"]
        pub struct R(crate::R<RSQR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RSQR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RSQR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RSQR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RSQR1` writer"]
        pub struct W(crate::W<RSQR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RSQR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RSQR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RSQR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RLEN` reader - Regular channel sequence length"]
        pub struct RLEN_R(crate::FieldReader<u8>);
        impl RLEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RLEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RLEN_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RLEN` writer - Regular channel sequence length"]
        pub struct RLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | ((value as u32 & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Field `RSQ16` reader - 16th conversion in regular sequence"]
        pub struct RSQ16_R(crate::FieldReader<u8>);
        impl RSQ16_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ16_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ16` writer - 16th conversion in regular sequence"]
        pub struct RSQ16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ16_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | ((value as u32 & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Field `RSQ15` reader - 15th conversion in regular sequence"]
        pub struct RSQ15_R(crate::FieldReader<u8>);
        impl RSQ15_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ15_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ15` writer - 15th conversion in regular sequence"]
        pub struct RSQ15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | ((value as u32 & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Field `RSQ14` reader - 14th conversion in regular sequence"]
        pub struct RSQ14_R(crate::FieldReader<u8>);
        impl RSQ14_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ14_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ14` writer - 14th conversion in regular sequence"]
        pub struct RSQ14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | ((value as u32 & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Field `RSQ13` reader - 13th conversion in regular sequence"]
        pub struct RSQ13_R(crate::FieldReader<u8>);
        impl RSQ13_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ13_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ13` writer - 13th conversion in regular sequence"]
        pub struct RSQ13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u32 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - Regular channel sequence length"]
            #[inline(always)]
            pub fn rlen(&self) -> RLEN_R {
                RLEN_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq16(&self) -> RSQ16_R {
                RSQ16_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq15(&self) -> RSQ15_R {
                RSQ15_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq14(&self) -> RSQ14_R {
                RSQ14_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq13(&self) -> RSQ13_R {
                RSQ13_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - Regular channel sequence length"]
            #[inline(always)]
            pub fn rlen(&mut self) -> RLEN_W {
                RLEN_W { w: self }
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq16(&mut self) -> RSQ16_W {
                RSQ16_W { w: self }
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq15(&mut self) -> RSQ15_W {
                RSQ15_W { w: self }
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq14(&mut self) -> RSQ14_W {
                RSQ14_W { w: self }
            }
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq13(&mut self) -> RSQ13_W {
                RSQ13_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "regular sequence register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rsqr1](index.html) module"]
        pub struct RSQR1_SPEC;
        impl crate::RegisterSpec for RSQR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rsqr1::R](R) reader structure"]
        impl crate::Readable for RSQR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rsqr1::W](W) writer structure"]
        impl crate::Writable for RSQR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RSQR1 to value 0"]
        impl crate::Resettable for RSQR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RSQR2 register accessor: an alias for `Reg<RSQR2_SPEC>`"]
    pub type RSQR2 = crate::Reg<rsqr2::RSQR2_SPEC>;
    #[doc = "regular sequence register 2"]
    pub mod rsqr2 {
        #[doc = "Register `RSQR2` reader"]
        pub struct R(crate::R<RSQR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RSQR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RSQR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RSQR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RSQR2` writer"]
        pub struct W(crate::W<RSQR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RSQR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RSQR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RSQR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SQ12` reader - 12th conversion in regular sequence"]
        pub struct SQ12_R(crate::FieldReader<u8>);
        impl SQ12_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SQ12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SQ12_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SQ12` writer - 12th conversion in regular sequence"]
        pub struct SQ12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 25)) | ((value as u32 & 0x1f) << 25);
                self.w
            }
        }
        #[doc = "Field `RSQ11` reader - 11th conversion in regular sequence"]
        pub struct RSQ11_R(crate::FieldReader<u8>);
        impl RSQ11_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ11_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ11` writer - 11th conversion in regular sequence"]
        pub struct RSQ11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 20)) | ((value as u32 & 0x1f) << 20);
                self.w
            }
        }
        #[doc = "Field `RSQ10` reader - 10th conversion in regular sequence"]
        pub struct RSQ10_R(crate::FieldReader<u8>);
        impl RSQ10_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ10_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ10` writer - 10th conversion in regular sequence"]
        pub struct RSQ10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | ((value as u32 & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Field `RSQ9` reader - 9th conversion in regular sequence"]
        pub struct RSQ9_R(crate::FieldReader<u8>);
        impl RSQ9_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ9_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ9` writer - 9th conversion in regular sequence"]
        pub struct RSQ9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | ((value as u32 & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Field `RSQ8` reader - 8th conversion in regular sequence"]
        pub struct RSQ8_R(crate::FieldReader<u8>);
        impl RSQ8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ8_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ8` writer - 8th conversion in regular sequence"]
        pub struct RSQ8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | ((value as u32 & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Field `RSQ7` reader - 7th conversion in regular sequence"]
        pub struct RSQ7_R(crate::FieldReader<u8>);
        impl RSQ7_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ7_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ7` writer - 7th conversion in regular sequence"]
        pub struct RSQ7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u32 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq12(&self) -> SQ12_R {
                SQ12_R::new(((self.bits >> 25) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq11(&self) -> RSQ11_R {
                RSQ11_R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq10(&self) -> RSQ10_R {
                RSQ10_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq9(&self) -> RSQ9_R {
                RSQ9_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq8(&self) -> RSQ8_R {
                RSQ8_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq7(&self) -> RSQ7_R {
                RSQ7_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq12(&mut self) -> SQ12_W {
                SQ12_W { w: self }
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq11(&mut self) -> RSQ11_W {
                RSQ11_W { w: self }
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq10(&mut self) -> RSQ10_W {
                RSQ10_W { w: self }
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq9(&mut self) -> RSQ9_W {
                RSQ9_W { w: self }
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq8(&mut self) -> RSQ8_W {
                RSQ8_W { w: self }
            }
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq7(&mut self) -> RSQ7_W {
                RSQ7_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "regular sequence register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rsqr2](index.html) module"]
        pub struct RSQR2_SPEC;
        impl crate::RegisterSpec for RSQR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rsqr2::R](R) reader structure"]
        impl crate::Readable for RSQR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rsqr2::W](W) writer structure"]
        impl crate::Writable for RSQR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RSQR2 to value 0"]
        impl crate::Resettable for RSQR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RSQR3__CHANNEL register accessor: an alias for `Reg<RSQR3__CHANNEL_SPEC>`"]
    pub type RSQR3__CHANNEL = crate::Reg<rsqr3__channel::RSQR3__CHANNEL_SPEC>;
    #[doc = "regular sequence register 3;TKEY_V_CHANNEL"]
    pub mod rsqr3__channel {
        #[doc = "Register `RSQR3__CHANNEL` reader"]
        pub struct R(crate::R<RSQR3__CHANNEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RSQR3__CHANNEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RSQR3__CHANNEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RSQR3__CHANNEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RSQR3__CHANNEL` writer"]
        pub struct W(crate::W<RSQR3__CHANNEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RSQR3__CHANNEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RSQR3__CHANNEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RSQR3__CHANNEL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RSQ6` reader - 6th conversion in regular sequence"]
        pub struct RSQ6_R(crate::FieldReader<u8>);
        impl RSQ6_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ6_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ6` writer - 6th conversion in regular sequence"]
        pub struct RSQ6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 25)) | ((value as u32 & 0x1f) << 25);
                self.w
            }
        }
        #[doc = "Field `RSQ5` reader - 5th conversion in regular sequence"]
        pub struct RSQ5_R(crate::FieldReader<u8>);
        impl RSQ5_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ5_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ5` writer - 5th conversion in regular sequence"]
        pub struct RSQ5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 20)) | ((value as u32 & 0x1f) << 20);
                self.w
            }
        }
        #[doc = "Field `RSQ4` reader - 4th conversion in regular sequence"]
        pub struct RSQ4_R(crate::FieldReader<u8>);
        impl RSQ4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ4_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ4` writer - 4th conversion in regular sequence"]
        pub struct RSQ4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | ((value as u32 & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Field `RSQ3` reader - 3rd conversion in regular sequence"]
        pub struct RSQ3_R(crate::FieldReader<u8>);
        impl RSQ3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ3_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ3` writer - 3rd conversion in regular sequence"]
        pub struct RSQ3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | ((value as u32 & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Field `RSQ2` reader - 2nd conversion in regular sequence"]
        pub struct RSQ2_R(crate::FieldReader<u8>);
        impl RSQ2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ2` writer - 2nd conversion in regular sequence"]
        pub struct RSQ2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | ((value as u32 & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Field `RSQ1__CHSEL` reader - 1st conversion in regular sequence;TKDY_V channel select"]
        pub struct RSQ1__CHSEL_R(crate::FieldReader<u8>);
        impl RSQ1__CHSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RSQ1__CHSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSQ1__CHSEL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSQ1__CHSEL` writer - 1st conversion in regular sequence;TKDY_V channel select"]
        pub struct RSQ1__CHSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSQ1__CHSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u32 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq6(&self) -> RSQ6_R {
                RSQ6_R::new(((self.bits >> 25) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq5(&self) -> RSQ5_R {
                RSQ5_R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq4(&self) -> RSQ4_R {
                RSQ4_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq3(&self) -> RSQ3_R {
                RSQ3_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq2(&self) -> RSQ2_R {
                RSQ2_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 1st conversion in regular sequence;TKDY_V channel select"]
            #[inline(always)]
            pub fn rsq1__chsel(&self) -> RSQ1__CHSEL_R {
                RSQ1__CHSEL_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq6(&mut self) -> RSQ6_W {
                RSQ6_W { w: self }
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq5(&mut self) -> RSQ5_W {
                RSQ5_W { w: self }
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq4(&mut self) -> RSQ4_W {
                RSQ4_W { w: self }
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq3(&mut self) -> RSQ3_W {
                RSQ3_W { w: self }
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq2(&mut self) -> RSQ2_W {
                RSQ2_W { w: self }
            }
            #[doc = "Bits 0:4 - 1st conversion in regular sequence;TKDY_V channel select"]
            #[inline(always)]
            pub fn rsq1__chsel(&mut self) -> RSQ1__CHSEL_W {
                RSQ1__CHSEL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "regular sequence register 3;TKEY_V_CHANNEL\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rsqr3__channel](index.html) module"]
        pub struct RSQR3__CHANNEL_SPEC;
        impl crate::RegisterSpec for RSQR3__CHANNEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rsqr3__channel::R](R) reader structure"]
        impl crate::Readable for RSQR3__CHANNEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rsqr3__channel::W](W) writer structure"]
        impl crate::Writable for RSQR3__CHANNEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RSQR3__CHANNEL to value 0"]
        impl crate::Resettable for RSQR3__CHANNEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ISQR register accessor: an alias for `Reg<ISQR_SPEC>`"]
    pub type ISQR = crate::Reg<isqr::ISQR_SPEC>;
    #[doc = "injected sequence register"]
    pub mod isqr {
        #[doc = "Register `ISQR` reader"]
        pub struct R(crate::R<ISQR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ISQR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ISQR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ISQR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ISQR` writer"]
        pub struct W(crate::W<ISQR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ISQR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ISQR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ISQR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ILEN` reader - Injected sequence length"]
        pub struct ILEN_R(crate::FieldReader<u8>);
        impl ILEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ILEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ILEN_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ILEN` writer - Injected sequence length"]
        pub struct ILEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ILEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 20)) | ((value as u32 & 3) << 20);
                self.w
            }
        }
        #[doc = "Field `ISQ4` reader - 4th conversion in injected sequence"]
        pub struct ISQ4_R(crate::FieldReader<u8>);
        impl ISQ4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ISQ4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISQ4_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISQ4` writer - 4th conversion in injected sequence"]
        pub struct ISQ4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISQ4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | ((value as u32 & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Field `ISQ3` reader - 3rd conversion in injected sequence"]
        pub struct ISQ3_R(crate::FieldReader<u8>);
        impl ISQ3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ISQ3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISQ3_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISQ3` writer - 3rd conversion in injected sequence"]
        pub struct ISQ3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISQ3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | ((value as u32 & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Field `ISQ2` reader - 2nd conversion in injected sequence"]
        pub struct ISQ2_R(crate::FieldReader<u8>);
        impl ISQ2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ISQ2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISQ2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISQ2` writer - 2nd conversion in injected sequence"]
        pub struct ISQ2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISQ2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | ((value as u32 & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Field `ISQ1` reader - 1st conversion in injected sequence"]
        pub struct ISQ1_R(crate::FieldReader<u8>);
        impl ISQ1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ISQ1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISQ1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISQ1` writer - 1st conversion in injected sequence"]
        pub struct ISQ1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISQ1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u32 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:21 - Injected sequence length"]
            #[inline(always)]
            pub fn ilen(&self) -> ILEN_R {
                ILEN_R::new(((self.bits >> 20) & 3) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in injected sequence"]
            #[inline(always)]
            pub fn isq4(&self) -> ISQ4_R {
                ISQ4_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in injected sequence"]
            #[inline(always)]
            pub fn isq3(&self) -> ISQ3_R {
                ISQ3_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in injected sequence"]
            #[inline(always)]
            pub fn isq2(&self) -> ISQ2_R {
                ISQ2_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 1st conversion in injected sequence"]
            #[inline(always)]
            pub fn isq1(&self) -> ISQ1_R {
                ISQ1_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:21 - Injected sequence length"]
            #[inline(always)]
            pub fn ilen(&mut self) -> ILEN_W {
                ILEN_W { w: self }
            }
            #[doc = "Bits 15:19 - 4th conversion in injected sequence"]
            #[inline(always)]
            pub fn isq4(&mut self) -> ISQ4_W {
                ISQ4_W { w: self }
            }
            #[doc = "Bits 10:14 - 3rd conversion in injected sequence"]
            #[inline(always)]
            pub fn isq3(&mut self) -> ISQ3_W {
                ISQ3_W { w: self }
            }
            #[doc = "Bits 5:9 - 2nd conversion in injected sequence"]
            #[inline(always)]
            pub fn isq2(&mut self) -> ISQ2_W {
                ISQ2_W { w: self }
            }
            #[doc = "Bits 0:4 - 1st conversion in injected sequence"]
            #[inline(always)]
            pub fn isq1(&mut self) -> ISQ1_W {
                ISQ1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "injected sequence register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isqr](index.html) module"]
        pub struct ISQR_SPEC;
        impl crate::RegisterSpec for ISQR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [isqr::R](R) reader structure"]
        impl crate::Readable for ISQR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [isqr::W](W) writer structure"]
        impl crate::Writable for ISQR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ISQR to value 0"]
        impl crate::Resettable for ISQR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IDATAR1 register accessor: an alias for `Reg<IDATAR1_SPEC>`"]
    pub type IDATAR1 = crate::Reg<idatar1::IDATAR1_SPEC>;
    #[doc = "injected data register x"]
    pub mod idatar1 {
        #[doc = "Register `IDATAR1` reader"]
        pub struct R(crate::R<IDATAR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IDATAR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IDATAR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IDATAR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `IDATA` reader - Injected data"]
        pub struct IDATA_R(crate::FieldReader<u16>);
        impl IDATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IDATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDATA_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn idata(&self) -> IDATA_R {
                IDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idatar1](index.html) module"]
        pub struct IDATAR1_SPEC;
        impl crate::RegisterSpec for IDATAR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [idatar1::R](R) reader structure"]
        impl crate::Readable for IDATAR1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets IDATAR1 to value 0"]
        impl crate::Resettable for IDATAR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IDATAR2 register accessor: an alias for `Reg<IDATAR2_SPEC>`"]
    pub type IDATAR2 = crate::Reg<idatar2::IDATAR2_SPEC>;
    #[doc = "injected data register x"]
    pub mod idatar2 {
        #[doc = "Register `IDATAR2` reader"]
        pub struct R(crate::R<IDATAR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IDATAR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IDATAR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IDATAR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `IDATA` reader - Injected data"]
        pub struct IDATA_R(crate::FieldReader<u16>);
        impl IDATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IDATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDATA_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn idata(&self) -> IDATA_R {
                IDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idatar2](index.html) module"]
        pub struct IDATAR2_SPEC;
        impl crate::RegisterSpec for IDATAR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [idatar2::R](R) reader structure"]
        impl crate::Readable for IDATAR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets IDATAR2 to value 0"]
        impl crate::Resettable for IDATAR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IDATAR3 register accessor: an alias for `Reg<IDATAR3_SPEC>`"]
    pub type IDATAR3 = crate::Reg<idatar3::IDATAR3_SPEC>;
    #[doc = "injected data register x"]
    pub mod idatar3 {
        #[doc = "Register `IDATAR3` reader"]
        pub struct R(crate::R<IDATAR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IDATAR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IDATAR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IDATAR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `IDATA` reader - Injected data"]
        pub struct IDATA_R(crate::FieldReader<u16>);
        impl IDATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IDATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDATA_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn idata(&self) -> IDATA_R {
                IDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idatar3](index.html) module"]
        pub struct IDATAR3_SPEC;
        impl crate::RegisterSpec for IDATAR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [idatar3::R](R) reader structure"]
        impl crate::Readable for IDATAR3_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets IDATAR3 to value 0"]
        impl crate::Resettable for IDATAR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IDATAR4 register accessor: an alias for `Reg<IDATAR4_SPEC>`"]
    pub type IDATAR4 = crate::Reg<idatar4::IDATAR4_SPEC>;
    #[doc = "injected data register x"]
    pub mod idatar4 {
        #[doc = "Register `IDATAR4` reader"]
        pub struct R(crate::R<IDATAR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IDATAR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IDATAR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IDATAR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `IDATA` reader - Injected data"]
        pub struct IDATA_R(crate::FieldReader<u16>);
        impl IDATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IDATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDATA_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn idata(&self) -> IDATA_R {
                IDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idatar4](index.html) module"]
        pub struct IDATAR4_SPEC;
        impl crate::RegisterSpec for IDATAR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [idatar4::R](R) reader structure"]
        impl crate::Readable for IDATAR4_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets IDATAR4 to value 0"]
        impl crate::Resettable for IDATAR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RDATAR__SDR register accessor: an alias for `Reg<RDATAR__SDR_SPEC>`"]
    pub type RDATAR__SDR = crate::Reg<rdatar__sdr::RDATAR__SDR_SPEC>;
    #[doc = "regular data register;TKEY_V status register"]
    pub mod rdatar__sdr {
        #[doc = "Register `RDATAR__SDR` reader"]
        pub struct R(crate::R<RDATAR__SDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RDATAR__SDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RDATAR__SDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RDATAR__SDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `RDATA` reader - Regular data"]
        pub struct RDATA_R(crate::FieldReader<u16>);
        impl RDATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                RDATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RDATA_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Regular data"]
            #[inline(always)]
            pub fn rdata(&self) -> RDATA_R {
                RDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "regular data register;TKEY_V status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rdatar__sdr](index.html) module"]
        pub struct RDATAR__SDR_SPEC;
        impl crate::RegisterSpec for RDATAR__SDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rdatar__sdr::R](R) reader structure"]
        impl crate::Readable for RDATAR__SDR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets RDATAR__SDR to value 0"]
        impl crate::Resettable for RDATAR__SDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Debug support"]
pub struct DBG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DBG {}
impl DBG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dbg::RegisterBlock = 0xe000_d000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dbg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DBG {
    type Target = dbg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DBG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBG").finish()
    }
}
#[doc = "Debug support"]
pub mod dbg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DBGMCU_CFGR1"]
        pub cfgr1: crate::Reg<cfgr1::CFGR1_SPEC>,
        #[doc = "0x04 - DBGMCU_CFGR2"]
        pub cfgr2: crate::Reg<cfgr2::CFGR2_SPEC>,
    }
    #[doc = "CFGR1 register accessor: an alias for `Reg<CFGR1_SPEC>`"]
    pub type CFGR1 = crate::Reg<cfgr1::CFGR1_SPEC>;
    #[doc = "DBGMCU_CFGR1"]
    pub mod cfgr1 {
        #[doc = "Register `CFGR1` reader"]
        pub struct R(crate::R<CFGR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR1` writer"]
        pub struct W(crate::W<CFGR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DEG_IWDG` reader - DEG_IWDG"]
        pub struct DEG_IWDG_R(crate::FieldReader<bool>);
        impl DEG_IWDG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_IWDG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_IWDG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_IWDG` writer - DEG_IWDG"]
        pub struct DEG_IWDG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_IWDG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `DEG_WWDG` reader - DEG_WWDG"]
        pub struct DEG_WWDG_R(crate::FieldReader<bool>);
        impl DEG_WWDG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_WWDG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_WWDG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_WWDG` writer - DEG_WWDG"]
        pub struct DEG_WWDG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_WWDG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `DEG_I2C1` reader - DEG_I2C1"]
        pub struct DEG_I2C1_R(crate::FieldReader<bool>);
        impl DEG_I2C1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_I2C1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_I2C1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_I2C1` writer - DEG_I2C1"]
        pub struct DEG_I2C1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_I2C1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `DEG_I2C2` reader - DEG_I2C2"]
        pub struct DEG_I2C2_R(crate::FieldReader<bool>);
        impl DEG_I2C2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_I2C2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_I2C2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_I2C2` writer - DEG_I2C2"]
        pub struct DEG_I2C2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_I2C2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `DEG_TIM1` reader - DEG_TIM1"]
        pub struct DEG_TIM1_R(crate::FieldReader<bool>);
        impl DEG_TIM1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_TIM1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_TIM1_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_TIM1` writer - DEG_TIM1"]
        pub struct DEG_TIM1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_TIM1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `DEG_TIM2` reader - DEG_TIM2"]
        pub struct DEG_TIM2_R(crate::FieldReader<bool>);
        impl DEG_TIM2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_TIM2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_TIM2_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_TIM2` writer - DEG_TIM2"]
        pub struct DEG_TIM2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_TIM2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `DEG_TIM3` reader - DEG_TIM3"]
        pub struct DEG_TIM3_R(crate::FieldReader<bool>);
        impl DEG_TIM3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_TIM3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_TIM3_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_TIM3` writer - DEG_TIM3"]
        pub struct DEG_TIM3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_TIM3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `DEG_TIM4` reader - DEG_TIM4"]
        pub struct DEG_TIM4_R(crate::FieldReader<bool>);
        impl DEG_TIM4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEG_TIM4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEG_TIM4_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEG_TIM4` writer - DEG_TIM4"]
        pub struct DEG_TIM4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEG_TIM4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DEG_IWDG"]
            #[inline(always)]
            pub fn deg_iwdg(&self) -> DEG_IWDG_R {
                DEG_IWDG_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - DEG_WWDG"]
            #[inline(always)]
            pub fn deg_wwdg(&self) -> DEG_WWDG_R {
                DEG_WWDG_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - DEG_I2C1"]
            #[inline(always)]
            pub fn deg_i2c1(&self) -> DEG_I2C1_R {
                DEG_I2C1_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - DEG_I2C2"]
            #[inline(always)]
            pub fn deg_i2c2(&self) -> DEG_I2C2_R {
                DEG_I2C2_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - DEG_TIM1"]
            #[inline(always)]
            pub fn deg_tim1(&self) -> DEG_TIM1_R {
                DEG_TIM1_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - DEG_TIM2"]
            #[inline(always)]
            pub fn deg_tim2(&self) -> DEG_TIM2_R {
                DEG_TIM2_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - DEG_TIM3"]
            #[inline(always)]
            pub fn deg_tim3(&self) -> DEG_TIM3_R {
                DEG_TIM3_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - DEG_TIM4"]
            #[inline(always)]
            pub fn deg_tim4(&self) -> DEG_TIM4_R {
                DEG_TIM4_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DEG_IWDG"]
            #[inline(always)]
            pub fn deg_iwdg(&mut self) -> DEG_IWDG_W {
                DEG_IWDG_W { w: self }
            }
            #[doc = "Bit 1 - DEG_WWDG"]
            #[inline(always)]
            pub fn deg_wwdg(&mut self) -> DEG_WWDG_W {
                DEG_WWDG_W { w: self }
            }
            #[doc = "Bit 2 - DEG_I2C1"]
            #[inline(always)]
            pub fn deg_i2c1(&mut self) -> DEG_I2C1_W {
                DEG_I2C1_W { w: self }
            }
            #[doc = "Bit 3 - DEG_I2C2"]
            #[inline(always)]
            pub fn deg_i2c2(&mut self) -> DEG_I2C2_W {
                DEG_I2C2_W { w: self }
            }
            #[doc = "Bit 4 - DEG_TIM1"]
            #[inline(always)]
            pub fn deg_tim1(&mut self) -> DEG_TIM1_W {
                DEG_TIM1_W { w: self }
            }
            #[doc = "Bit 5 - DEG_TIM2"]
            #[inline(always)]
            pub fn deg_tim2(&mut self) -> DEG_TIM2_W {
                DEG_TIM2_W { w: self }
            }
            #[doc = "Bit 6 - DEG_TIM3"]
            #[inline(always)]
            pub fn deg_tim3(&mut self) -> DEG_TIM3_W {
                DEG_TIM3_W { w: self }
            }
            #[doc = "Bit 7 - DEG_TIM4"]
            #[inline(always)]
            pub fn deg_tim4(&mut self) -> DEG_TIM4_W {
                DEG_TIM4_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DBGMCU_CFGR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr1](index.html) module"]
        pub struct CFGR1_SPEC;
        impl crate::RegisterSpec for CFGR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr1::R](R) reader structure"]
        impl crate::Readable for CFGR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr1::W](W) writer structure"]
        impl crate::Writable for CFGR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR1 to value 0"]
        impl crate::Resettable for CFGR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR2 register accessor: an alias for `Reg<CFGR2_SPEC>`"]
    pub type CFGR2 = crate::Reg<cfgr2::CFGR2_SPEC>;
    #[doc = "DBGMCU_CFGR2"]
    pub mod cfgr2 {
        #[doc = "Register `CFGR2` reader"]
        pub struct R(crate::R<CFGR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR2` writer"]
        pub struct W(crate::W<CFGR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DBG_SLEEP` reader - DBG_SLEEP"]
        pub struct DBG_SLEEP_R(crate::FieldReader<bool>);
        impl DBG_SLEEP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DBG_SLEEP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBG_SLEEP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBG_SLEEP` writer - DBG_SLEEP"]
        pub struct DBG_SLEEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_SLEEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `DBG_STOP` reader - DBG_STOP"]
        pub struct DBG_STOP_R(crate::FieldReader<bool>);
        impl DBG_STOP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DBG_STOP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBG_STOP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBG_STOP` writer - DBG_STOP"]
        pub struct DBG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `DBG_STANDBY` reader - DBG_STANDBY"]
        pub struct DBG_STANDBY_R(crate::FieldReader<bool>);
        impl DBG_STANDBY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DBG_STANDBY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBG_STANDBY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBG_STANDBY` writer - DBG_STANDBY"]
        pub struct DBG_STANDBY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STANDBY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DBG_SLEEP"]
            #[inline(always)]
            pub fn dbg_sleep(&self) -> DBG_SLEEP_R {
                DBG_SLEEP_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - DBG_STOP"]
            #[inline(always)]
            pub fn dbg_stop(&self) -> DBG_STOP_R {
                DBG_STOP_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - DBG_STANDBY"]
            #[inline(always)]
            pub fn dbg_standby(&self) -> DBG_STANDBY_R {
                DBG_STANDBY_R::new(((self.bits >> 2) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DBG_SLEEP"]
            #[inline(always)]
            pub fn dbg_sleep(&mut self) -> DBG_SLEEP_W {
                DBG_SLEEP_W { w: self }
            }
            #[doc = "Bit 1 - DBG_STOP"]
            #[inline(always)]
            pub fn dbg_stop(&mut self) -> DBG_STOP_W {
                DBG_STOP_W { w: self }
            }
            #[doc = "Bit 2 - DBG_STANDBY"]
            #[inline(always)]
            pub fn dbg_standby(&mut self) -> DBG_STANDBY_W {
                DBG_STANDBY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DBGMCU_CFGR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](index.html) module"]
        pub struct CFGR2_SPEC;
        impl crate::RegisterSpec for CFGR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr2::R](R) reader structure"]
        impl crate::Readable for CFGR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr2::W](W) writer structure"]
        impl crate::Writable for CFGR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR2 to value 0"]
        impl crate::Resettable for CFGR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "USB register"]
pub struct USBHD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USBHD {}
impl USBHD {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usbhd::RegisterBlock = 0x4002_3400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usbhd::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USBHD {
    type Target = usbhd::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USBHD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USBHD").finish()
    }
}
#[doc = "USB register"]
pub mod usbhd {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - USB base control"]
        pub r8_usb_ctrl: crate::Reg<r8_usb_ctrl::R8_USB_CTRL_SPEC>,
        #[doc = "0x01 - USB device physical prot control"]
        pub r8_udev_ctrl__r8_uhost_ctrl:
            crate::Reg<r8_udev_ctrl__r8_uhost_ctrl::R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>,
        #[doc = "0x02 - USB interrupt enable"]
        pub r8_usb_int_en: crate::Reg<r8_usb_int_en::R8_USB_INT_EN_SPEC>,
        #[doc = "0x03 - USB device address"]
        pub r8_usb_dev_ad: crate::Reg<r8_usb_dev_ad::R8_USB_DEV_AD_SPEC>,
        _reserved4: [u8; 0x01],
        #[doc = "0x05 - USB miscellaneous status"]
        pub r8_usb_mis_st: crate::Reg<r8_usb_mis_st::R8_USB_MIS_ST_SPEC>,
        #[doc = "0x06 - USB interrupt flag"]
        pub r8_usb_int_fg: crate::Reg<r8_usb_int_fg::R8_USB_INT_FG_SPEC>,
        #[doc = "0x07 - USB interrupt status"]
        pub r8_usb_int_st: crate::Reg<r8_usb_int_st::R8_USB_INT_ST_SPEC>,
        #[doc = "0x08 - USB receiving length"]
        pub r8_usb_rx_len: crate::Reg<r8_usb_rx_len::R8_USB_RX_LEN_SPEC>,
        _reserved8: [u8; 0x02],
        #[doc = "0x0c - endpoint 4/1 mode"]
        pub r8_uep4_1_mod: crate::Reg<r8_uep4_1_mod::R8_UEP4_1_MOD_SPEC>,
        #[doc = "0x0d - endpoint 2/3 mode;host endpoint mode"]
        pub r8_uep2_3_mod__r8_uh_ep_mod:
            crate::Reg<r8_uep2_3_mod__r8_uh_ep_mod::R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>,
        #[doc = "0x0e - endpoint 5/6 mode"]
        pub r8_uep5_6_mod: crate::Reg<r8_uep5_6_mod::R8_UEP5_6_MOD_SPEC>,
        #[doc = "0x0f - endpoint 7 mode"]
        pub r8_uep7_mod: crate::Reg<r8_uep7_mod::R8_UEP7_MOD_SPEC>,
        #[doc = "0x10 - endpoint 0 DMA buffer address"]
        pub r16_uep0_dma: crate::Reg<r16_uep0_dma::R16_UEP0_DMA_SPEC>,
        _reserved13: [u8; 0x02],
        #[doc = "0x14 - endpoint 1 DMA buffer address"]
        pub r16_uep1_dma: crate::Reg<r16_uep1_dma::R16_UEP1_DMA_SPEC>,
        _reserved14: [u8; 0x02],
        #[doc = "0x18 - endpoint 2 DMA buffer address;host rx endpoint buffer high address"]
        pub r16_uep2_dma__r16_uh_rx_dma:
            crate::Reg<r16_uep2_dma__r16_uh_rx_dma::R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>,
        _reserved15: [u8; 0x02],
        #[doc = "0x1c - endpoint 3 DMA buffer address;host tx endpoint buffer high address"]
        pub r16_uep3_dma__r16_uh_tx_dma:
            crate::Reg<r16_uep3_dma__r16_uh_tx_dma::R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>,
        _reserved16: [u8; 0x02],
        #[doc = "0x20 - endpoint 4 DMA buffer address"]
        pub r16_uep4_dma: crate::Reg<r16_uep4_dma::R16_UEP4_DMA_SPEC>,
        _reserved17: [u8; 0x02],
        #[doc = "0x24 - endpoint 5 DMA buffer address"]
        pub r16_uep5_dma: crate::Reg<r16_uep5_dma::R16_UEP5_DMA_SPEC>,
        _reserved18: [u8; 0x02],
        #[doc = "0x28 - endpoint 6 DMA buffer address"]
        pub r16_uep6_dma: crate::Reg<r16_uep6_dma::R16_UEP6_DMA_SPEC>,
        _reserved19: [u8; 0x02],
        #[doc = "0x2c - endpoint 7 DMA buffer address"]
        pub r16_uep7_dma: crate::Reg<r16_uep7_dma::R16_UEP7_DMA_SPEC>,
        _reserved20: [u8; 0x02],
        #[doc = "0x30 - endpoint 0 transmittal length"]
        pub r16_uep0_t_len: crate::Reg<r16_uep0_t_len::R16_UEP0_T_LEN_SPEC>,
        #[doc = "0x32 - endpoint 0 control"]
        pub r8_uep0_ctrl: crate::Reg<r8_uep0_ctrl::R8_UEP0_CTRL_SPEC>,
        _reserved22: [u8; 0x01],
        #[doc = "0x34 - endpoint 1 transmittal length"]
        pub r16_uep1_t_len: crate::Reg<r16_uep1_t_len::R16_UEP1_T_LEN_SPEC>,
        #[doc = "0x36 - endpoint 1 control;host aux setup"]
        pub r8_uep1_ctrl__r8_uh_setup:
            crate::Reg<r8_uep1_ctrl__r8_uh_setup::R8_UEP1_CTRL__R8_UH_SETUP_SPEC>,
        _reserved24: [u8; 0x01],
        #[doc = "0x38 - endpoint 2 transmittal length;host endpoint and PID"]
        pub r16_uep2_t_len__r8_uh_ep_pid:
            crate::Reg<r16_uep2_t_len__r8_uh_ep_pid::R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>,
        #[doc = "0x3a - endpoint 2 control;host receiver endpoint control"]
        pub r8_uep2_ctrl__r8_uh_rx_ctrl:
            crate::Reg<r8_uep2_ctrl__r8_uh_rx_ctrl::R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>,
        _reserved26: [u8; 0x01],
        #[doc = "0x3c - endpoint 3 transmittal length;host transmittal endpoint transmittal length"]
        pub r16_uep3_t_len__r16_uh_tx_len:
            crate::Reg<r16_uep3_t_len__r16_uh_tx_len::R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>,
        #[doc = "0x3e - endpoint 3 control;host transmittal endpoint control"]
        pub r8_uep3_ctrl__r8_uh_tx_ctrl:
            crate::Reg<r8_uep3_ctrl__r8_uh_tx_ctrl::R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>,
        _reserved28: [u8; 0x01],
        #[doc = "0x40 - endpoint 4 transmittal length"]
        pub r16_uep4_t_len: crate::Reg<r16_uep4_t_len::R16_UEP4_T_LEN_SPEC>,
        #[doc = "0x42 - endpoint 4 control"]
        pub r8_uep4_ctrl: crate::Reg<r8_uep4_ctrl::R8_UEP4_CTRL_SPEC>,
        _reserved30: [u8; 0x01],
        #[doc = "0x44 - endpoint 5 transmittal length"]
        pub r16_uep5_t_len: crate::Reg<r16_uep5_t_len::R16_UEP5_T_LEN_SPEC>,
        #[doc = "0x46 - endpoint 5 control"]
        pub r8_uep5_ctrl: crate::Reg<r8_uep5_ctrl::R8_UEP5_CTRL_SPEC>,
        _reserved32: [u8; 0x01],
        #[doc = "0x48 - endpoint 6 transmittal length"]
        pub r16_uep6_t_len: crate::Reg<r16_uep6_t_len::R16_UEP6_T_LEN_SPEC>,
        #[doc = "0x4a - endpoint 6 control"]
        pub r8_uep6_ctrl: crate::Reg<r8_uep6_ctrl::R8_UEP6_CTRL_SPEC>,
        _reserved34: [u8; 0x01],
        #[doc = "0x4c - endpoint 7 transmittal length"]
        pub r16_uep7_t_len: crate::Reg<r16_uep7_t_len::R16_UEP7_T_LEN_SPEC>,
        #[doc = "0x4e - endpoint 7 control"]
        pub r8_uep7_ctrl: crate::Reg<r8_uep7_ctrl::R8_UEP7_CTRL_SPEC>,
    }
    #[doc = "R8_USB_CTRL register accessor: an alias for `Reg<R8_USB_CTRL_SPEC>`"]
    pub type R8_USB_CTRL = crate::Reg<r8_usb_ctrl::R8_USB_CTRL_SPEC>;
    #[doc = "USB base control"]
    pub mod r8_usb_ctrl {
        #[doc = "Register `R8_USB_CTRL` reader"]
        pub struct R(crate::R<R8_USB_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_USB_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_USB_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_USB_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_USB_CTRL` writer"]
        pub struct W(crate::W<R8_USB_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_USB_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_USB_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_USB_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UC_DMA_EN` reader - DMA enable and DMA interrupt enable for USB"]
        pub struct RB_UC_DMA_EN_R(crate::FieldReader<bool>);
        impl RB_UC_DMA_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UC_DMA_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UC_DMA_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UC_DMA_EN` writer - DMA enable and DMA interrupt enable for USB"]
        pub struct RB_UC_DMA_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UC_DMA_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UC_CLR_ALL` reader - force clear FIFO and count of USB"]
        pub struct RB_UC_CLR_ALL_R(crate::FieldReader<bool>);
        impl RB_UC_CLR_ALL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UC_CLR_ALL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UC_CLR_ALL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UC_CLR_ALL` writer - force clear FIFO and count of USB"]
        pub struct RB_UC_CLR_ALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UC_CLR_ALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u8 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `RB_UC_RESET_SIE` reader - force reset USB SIE, need software clear"]
        pub struct RB_UC_RESET_SIE_R(crate::FieldReader<bool>);
        impl RB_UC_RESET_SIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UC_RESET_SIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UC_RESET_SIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UC_RESET_SIE` writer - force reset USB SIE, need software clear"]
        pub struct RB_UC_RESET_SIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UC_RESET_SIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UC_INT_BUSY` reader - enable automatic responding busy for device mode or automatic pause for host mode during interrupt flag UIF_TRANSFER valid"]
        pub struct RB_UC_INT_BUSY_R(crate::FieldReader<bool>);
        impl RB_UC_INT_BUSY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UC_INT_BUSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UC_INT_BUSY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UC_INT_BUSY` writer - enable automatic responding busy for device mode or automatic pause for host mode during interrupt flag UIF_TRANSFER valid"]
        pub struct RB_UC_INT_BUSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UC_INT_BUSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u8 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UC_SYS_CTRL` reader - bit mask of USB system control"]
        pub struct MASK_UC_SYS_CTRL_R(crate::FieldReader<u8>);
        impl MASK_UC_SYS_CTRL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UC_SYS_CTRL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UC_SYS_CTRL_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UC_SYS_CTRL` writer - bit mask of USB system control"]
        pub struct MASK_UC_SYS_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UC_SYS_CTRL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 4)) | ((value as u8 & 3) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UC_LOW_SPEED` reader - enable USB low speed: 0=12Mbps, 1=1.5Mbps"]
        pub struct RB_UC_LOW_SPEED_R(crate::FieldReader<bool>);
        impl RB_UC_LOW_SPEED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UC_LOW_SPEED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UC_LOW_SPEED_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UC_LOW_SPEED` writer - enable USB low speed: 0=12Mbps, 1=1.5Mbps"]
        pub struct RB_UC_LOW_SPEED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UC_LOW_SPEED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UC_HOST_MODE` reader - enable USB host mode: 0=device mode, 1=host mode"]
        pub struct RB_UC_HOST_MODE_R(crate::FieldReader<bool>);
        impl RB_UC_HOST_MODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UC_HOST_MODE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UC_HOST_MODE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UC_HOST_MODE` writer - enable USB host mode: 0=device mode, 1=host mode"]
        pub struct RB_UC_HOST_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UC_HOST_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DMA enable and DMA interrupt enable for USB"]
            #[inline(always)]
            pub fn rb_uc_dma_en(&self) -> RB_UC_DMA_EN_R {
                RB_UC_DMA_EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - force clear FIFO and count of USB"]
            #[inline(always)]
            pub fn rb_uc_clr_all(&self) -> RB_UC_CLR_ALL_R {
                RB_UC_CLR_ALL_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - force reset USB SIE, need software clear"]
            #[inline(always)]
            pub fn rb_uc_reset_sie(&self) -> RB_UC_RESET_SIE_R {
                RB_UC_RESET_SIE_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - enable automatic responding busy for device mode or automatic pause for host mode during interrupt flag UIF_TRANSFER valid"]
            #[inline(always)]
            pub fn rb_uc_int_busy(&self) -> RB_UC_INT_BUSY_R {
                RB_UC_INT_BUSY_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:5 - bit mask of USB system control"]
            #[inline(always)]
            pub fn mask_uc_sys_ctrl(&self) -> MASK_UC_SYS_CTRL_R {
                MASK_UC_SYS_CTRL_R::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - enable USB low speed: 0=12Mbps, 1=1.5Mbps"]
            #[inline(always)]
            pub fn rb_uc_low_speed(&self) -> RB_UC_LOW_SPEED_R {
                RB_UC_LOW_SPEED_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - enable USB host mode: 0=device mode, 1=host mode"]
            #[inline(always)]
            pub fn rb_uc_host_mode(&self) -> RB_UC_HOST_MODE_R {
                RB_UC_HOST_MODE_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DMA enable and DMA interrupt enable for USB"]
            #[inline(always)]
            pub fn rb_uc_dma_en(&mut self) -> RB_UC_DMA_EN_W {
                RB_UC_DMA_EN_W { w: self }
            }
            #[doc = "Bit 1 - force clear FIFO and count of USB"]
            #[inline(always)]
            pub fn rb_uc_clr_all(&mut self) -> RB_UC_CLR_ALL_W {
                RB_UC_CLR_ALL_W { w: self }
            }
            #[doc = "Bit 2 - force reset USB SIE, need software clear"]
            #[inline(always)]
            pub fn rb_uc_reset_sie(&mut self) -> RB_UC_RESET_SIE_W {
                RB_UC_RESET_SIE_W { w: self }
            }
            #[doc = "Bit 3 - enable automatic responding busy for device mode or automatic pause for host mode during interrupt flag UIF_TRANSFER valid"]
            #[inline(always)]
            pub fn rb_uc_int_busy(&mut self) -> RB_UC_INT_BUSY_W {
                RB_UC_INT_BUSY_W { w: self }
            }
            #[doc = "Bits 4:5 - bit mask of USB system control"]
            #[inline(always)]
            pub fn mask_uc_sys_ctrl(&mut self) -> MASK_UC_SYS_CTRL_W {
                MASK_UC_SYS_CTRL_W { w: self }
            }
            #[doc = "Bit 6 - enable USB low speed: 0=12Mbps, 1=1.5Mbps"]
            #[inline(always)]
            pub fn rb_uc_low_speed(&mut self) -> RB_UC_LOW_SPEED_W {
                RB_UC_LOW_SPEED_W { w: self }
            }
            #[doc = "Bit 7 - enable USB host mode: 0=device mode, 1=host mode"]
            #[inline(always)]
            pub fn rb_uc_host_mode(&mut self) -> RB_UC_HOST_MODE_W {
                RB_UC_HOST_MODE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USB base control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_usb_ctrl](index.html) module"]
        pub struct R8_USB_CTRL_SPEC;
        impl crate::RegisterSpec for R8_USB_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_usb_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_USB_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_usb_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_USB_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_USB_CTRL to value 0x06"]
        impl crate::Resettable for R8_USB_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x06
            }
        }
    }
    #[doc = "R8_UDEV_CTRL__R8_UHOST_CTRL register accessor: an alias for `Reg<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>`"]
    pub type R8_UDEV_CTRL__R8_UHOST_CTRL =
        crate::Reg<r8_udev_ctrl__r8_uhost_ctrl::R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>;
    #[doc = "USB device physical prot control"]
    pub mod r8_udev_ctrl__r8_uhost_ctrl {
        #[doc = "Register `R8_UDEV_CTRL__R8_UHOST_CTRL` reader"]
        pub struct R(crate::R<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UDEV_CTRL__R8_UHOST_CTRL` writer"]
        pub struct W(crate::W<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UD_PORT_EN__RB_UH_PORT_EN` reader - enable USB physical port I/O: 0=disable, 1=enable;enable USB port: 0=disable, 1=enable port, automatic disabled if USB device detached"]
        pub struct RB_UD_PORT_EN__RB_UH_PORT_EN_R(crate::FieldReader<bool>);
        impl RB_UD_PORT_EN__RB_UH_PORT_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UD_PORT_EN__RB_UH_PORT_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UD_PORT_EN__RB_UH_PORT_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UD_PORT_EN__RB_UH_PORT_EN` writer - enable USB physical port I/O: 0=disable, 1=enable;enable USB port: 0=disable, 1=enable port, automatic disabled if USB device detached"]
        pub struct RB_UD_PORT_EN__RB_UH_PORT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UD_PORT_EN__RB_UH_PORT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UD_GP_BIT__RB_UH_BUS_RESET` reader - general purpose bit;control USB bus reset: 0=normal, 1=force bus reset"]
        pub struct RB_UD_GP_BIT__RB_UH_BUS_RESET_R(crate::FieldReader<bool>);
        impl RB_UD_GP_BIT__RB_UH_BUS_RESET_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UD_GP_BIT__RB_UH_BUS_RESET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UD_GP_BIT__RB_UH_BUS_RESET_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UD_GP_BIT__RB_UH_BUS_RESET` writer - general purpose bit;control USB bus reset: 0=normal, 1=force bus reset"]
        pub struct RB_UD_GP_BIT__RB_UH_BUS_RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UD_GP_BIT__RB_UH_BUS_RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u8 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `RB_UD_LOW_SPEED__RB_UH_LOW_SPEED` reader - enable USB physical port low speed: 0=full speed, 1=low speed;enable USB port low speed: 0=full speed, 1=low speed"]
        pub struct RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_R(crate::FieldReader<bool>);
        impl RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UD_LOW_SPEED__RB_UH_LOW_SPEED` writer - enable USB physical port low speed: 0=full speed, 1=low speed;enable USB port low speed: 0=full speed, 1=low speed"]
        pub struct RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UD_DM_PIN__RB_UH_DM_PIN` reader - ReadOnly: indicate current UDM pin level"]
        pub struct RB_UD_DM_PIN__RB_UH_DM_PIN_R(crate::FieldReader<bool>);
        impl RB_UD_DM_PIN__RB_UH_DM_PIN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UD_DM_PIN__RB_UH_DM_PIN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UD_DM_PIN__RB_UH_DM_PIN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UD_DP_PIN__RB_UH_DP_PIN` reader - ReadOnly: indicate current UDP pin level"]
        pub struct RB_UD_DP_PIN__RB_UH_DP_PIN_R(crate::FieldReader<bool>);
        impl RB_UD_DP_PIN__RB_UH_DP_PIN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UD_DP_PIN__RB_UH_DP_PIN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UD_DP_PIN__RB_UH_DP_PIN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UD_PD_DIS__RB_UH_PD_DIS` reader - disable USB UDP/UDM pulldown resistance: 0=enable pulldown, 1=disable"]
        pub struct RB_UD_PD_DIS__RB_UH_PD_DIS_R(crate::FieldReader<bool>);
        impl RB_UD_PD_DIS__RB_UH_PD_DIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UD_PD_DIS__RB_UH_PD_DIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UD_PD_DIS__RB_UH_PD_DIS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - enable USB physical port I/O: 0=disable, 1=enable;enable USB port: 0=disable, 1=enable port, automatic disabled if USB device detached"]
            #[inline(always)]
            pub fn rb_ud_port_en__rb_uh_port_en(&self) -> RB_UD_PORT_EN__RB_UH_PORT_EN_R {
                RB_UD_PORT_EN__RB_UH_PORT_EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - general purpose bit;control USB bus reset: 0=normal, 1=force bus reset"]
            #[inline(always)]
            pub fn rb_ud_gp_bit__rb_uh_bus_reset(&self) -> RB_UD_GP_BIT__RB_UH_BUS_RESET_R {
                RB_UD_GP_BIT__RB_UH_BUS_RESET_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - enable USB physical port low speed: 0=full speed, 1=low speed;enable USB port low speed: 0=full speed, 1=low speed"]
            #[inline(always)]
            pub fn rb_ud_low_speed__rb_uh_low_speed(&self) -> RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_R {
                RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - ReadOnly: indicate current UDM pin level"]
            #[inline(always)]
            pub fn rb_ud_dm_pin__rb_uh_dm_pin(&self) -> RB_UD_DM_PIN__RB_UH_DM_PIN_R {
                RB_UD_DM_PIN__RB_UH_DM_PIN_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - ReadOnly: indicate current UDP pin level"]
            #[inline(always)]
            pub fn rb_ud_dp_pin__rb_uh_dp_pin(&self) -> RB_UD_DP_PIN__RB_UH_DP_PIN_R {
                RB_UD_DP_PIN__RB_UH_DP_PIN_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 7 - disable USB UDP/UDM pulldown resistance: 0=enable pulldown, 1=disable"]
            #[inline(always)]
            pub fn rb_ud_pd_dis__rb_uh_pd_dis(&self) -> RB_UD_PD_DIS__RB_UH_PD_DIS_R {
                RB_UD_PD_DIS__RB_UH_PD_DIS_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - enable USB physical port I/O: 0=disable, 1=enable;enable USB port: 0=disable, 1=enable port, automatic disabled if USB device detached"]
            #[inline(always)]
            pub fn rb_ud_port_en__rb_uh_port_en(&mut self) -> RB_UD_PORT_EN__RB_UH_PORT_EN_W {
                RB_UD_PORT_EN__RB_UH_PORT_EN_W { w: self }
            }
            #[doc = "Bit 1 - general purpose bit;control USB bus reset: 0=normal, 1=force bus reset"]
            #[inline(always)]
            pub fn rb_ud_gp_bit__rb_uh_bus_reset(&mut self) -> RB_UD_GP_BIT__RB_UH_BUS_RESET_W {
                RB_UD_GP_BIT__RB_UH_BUS_RESET_W { w: self }
            }
            #[doc = "Bit 2 - enable USB physical port low speed: 0=full speed, 1=low speed;enable USB port low speed: 0=full speed, 1=low speed"]
            #[inline(always)]
            pub fn rb_ud_low_speed__rb_uh_low_speed(
                &mut self,
            ) -> RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_W {
                RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USB device physical prot control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_udev_ctrl__r8_uhost_ctrl](index.html) module"]
        pub struct R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_udev_ctrl__r8_uhost_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_udev_ctrl__r8_uhost_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UDEV_CTRL__R8_UHOST_CTRL to value 0"]
        impl crate::Resettable for R8_UDEV_CTRL__R8_UHOST_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_USB_INT_EN register accessor: an alias for `Reg<R8_USB_INT_EN_SPEC>`"]
    pub type R8_USB_INT_EN = crate::Reg<r8_usb_int_en::R8_USB_INT_EN_SPEC>;
    #[doc = "USB interrupt enable"]
    pub mod r8_usb_int_en {
        #[doc = "Register `R8_USB_INT_EN` reader"]
        pub struct R(crate::R<R8_USB_INT_EN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_USB_INT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_USB_INT_EN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_USB_INT_EN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_USB_INT_EN` writer"]
        pub struct W(crate::W<R8_USB_INT_EN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_USB_INT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_USB_INT_EN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_USB_INT_EN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UIE_BUS_RST__RB_UIE_DETECT` reader - enable interrupt for USB bus reset event for USB device mode;enable interrupt for USB device detected event for USB host mode"]
        pub struct RB_UIE_BUS_RST__RB_UIE_DETECT_R(crate::FieldReader<bool>);
        impl RB_UIE_BUS_RST__RB_UIE_DETECT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIE_BUS_RST__RB_UIE_DETECT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIE_BUS_RST__RB_UIE_DETECT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIE_BUS_RST__RB_UIE_DETECT` writer - enable interrupt for USB bus reset event for USB device mode;enable interrupt for USB device detected event for USB host mode"]
        pub struct RB_UIE_BUS_RST__RB_UIE_DETECT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIE_BUS_RST__RB_UIE_DETECT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UIE_TRANSFER` reader - enable interrupt for USB transfer completion"]
        pub struct RB_UIE_TRANSFER_R(crate::FieldReader<bool>);
        impl RB_UIE_TRANSFER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIE_TRANSFER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIE_TRANSFER_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIE_TRANSFER` writer - enable interrupt for USB transfer completion"]
        pub struct RB_UIE_TRANSFER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIE_TRANSFER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u8 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `RB_UIE_SUSPEND` reader - enable interrupt for USB suspend or resume event"]
        pub struct RB_UIE_SUSPEND_R(crate::FieldReader<bool>);
        impl RB_UIE_SUSPEND_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIE_SUSPEND_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIE_SUSPEND_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIE_SUSPEND` writer - enable interrupt for USB suspend or resume event"]
        pub struct RB_UIE_SUSPEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIE_SUSPEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UIE_HST_SOF` reader - enable interrupt for host SOF timer action for USB host mode"]
        pub struct RB_UIE_HST_SOF_R(crate::FieldReader<bool>);
        impl RB_UIE_HST_SOF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIE_HST_SOF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIE_HST_SOF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIE_HST_SOF` writer - enable interrupt for host SOF timer action for USB host mode"]
        pub struct RB_UIE_HST_SOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIE_HST_SOF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u8 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `RB_UIE_FIFO_OV` reader - enable interrupt for FIFO overflow"]
        pub struct RB_UIE_FIFO_OV_R(crate::FieldReader<bool>);
        impl RB_UIE_FIFO_OV_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIE_FIFO_OV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIE_FIFO_OV_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIE_FIFO_OV` writer - enable interrupt for FIFO overflow"]
        pub struct RB_UIE_FIFO_OV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIE_FIFO_OV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UIE_DEV_NAK` reader - enable interrupt for NAK responded for USB device mode"]
        pub struct RB_UIE_DEV_NAK_R(crate::FieldReader<bool>);
        impl RB_UIE_DEV_NAK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIE_DEV_NAK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIE_DEV_NAK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIE_DEV_NAK` writer - enable interrupt for NAK responded for USB device mode"]
        pub struct RB_UIE_DEV_NAK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIE_DEV_NAK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UIE_DEV_SOF` reader - enable interrupt for SOF received for USB device mode"]
        pub struct RB_UIE_DEV_SOF_R(crate::FieldReader<bool>);
        impl RB_UIE_DEV_SOF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIE_DEV_SOF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIE_DEV_SOF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIE_DEV_SOF` writer - enable interrupt for SOF received for USB device mode"]
        pub struct RB_UIE_DEV_SOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIE_DEV_SOF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - enable interrupt for USB bus reset event for USB device mode;enable interrupt for USB device detected event for USB host mode"]
            #[inline(always)]
            pub fn rb_uie_bus_rst__rb_uie_detect(&self) -> RB_UIE_BUS_RST__RB_UIE_DETECT_R {
                RB_UIE_BUS_RST__RB_UIE_DETECT_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - enable interrupt for USB transfer completion"]
            #[inline(always)]
            pub fn rb_uie_transfer(&self) -> RB_UIE_TRANSFER_R {
                RB_UIE_TRANSFER_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - enable interrupt for USB suspend or resume event"]
            #[inline(always)]
            pub fn rb_uie_suspend(&self) -> RB_UIE_SUSPEND_R {
                RB_UIE_SUSPEND_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - enable interrupt for host SOF timer action for USB host mode"]
            #[inline(always)]
            pub fn rb_uie_hst_sof(&self) -> RB_UIE_HST_SOF_R {
                RB_UIE_HST_SOF_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - enable interrupt for FIFO overflow"]
            #[inline(always)]
            pub fn rb_uie_fifo_ov(&self) -> RB_UIE_FIFO_OV_R {
                RB_UIE_FIFO_OV_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - enable interrupt for NAK responded for USB device mode"]
            #[inline(always)]
            pub fn rb_uie_dev_nak(&self) -> RB_UIE_DEV_NAK_R {
                RB_UIE_DEV_NAK_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - enable interrupt for SOF received for USB device mode"]
            #[inline(always)]
            pub fn rb_uie_dev_sof(&self) -> RB_UIE_DEV_SOF_R {
                RB_UIE_DEV_SOF_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - enable interrupt for USB bus reset event for USB device mode;enable interrupt for USB device detected event for USB host mode"]
            #[inline(always)]
            pub fn rb_uie_bus_rst__rb_uie_detect(&mut self) -> RB_UIE_BUS_RST__RB_UIE_DETECT_W {
                RB_UIE_BUS_RST__RB_UIE_DETECT_W { w: self }
            }
            #[doc = "Bit 1 - enable interrupt for USB transfer completion"]
            #[inline(always)]
            pub fn rb_uie_transfer(&mut self) -> RB_UIE_TRANSFER_W {
                RB_UIE_TRANSFER_W { w: self }
            }
            #[doc = "Bit 2 - enable interrupt for USB suspend or resume event"]
            #[inline(always)]
            pub fn rb_uie_suspend(&mut self) -> RB_UIE_SUSPEND_W {
                RB_UIE_SUSPEND_W { w: self }
            }
            #[doc = "Bit 3 - enable interrupt for host SOF timer action for USB host mode"]
            #[inline(always)]
            pub fn rb_uie_hst_sof(&mut self) -> RB_UIE_HST_SOF_W {
                RB_UIE_HST_SOF_W { w: self }
            }
            #[doc = "Bit 4 - enable interrupt for FIFO overflow"]
            #[inline(always)]
            pub fn rb_uie_fifo_ov(&mut self) -> RB_UIE_FIFO_OV_W {
                RB_UIE_FIFO_OV_W { w: self }
            }
            #[doc = "Bit 6 - enable interrupt for NAK responded for USB device mode"]
            #[inline(always)]
            pub fn rb_uie_dev_nak(&mut self) -> RB_UIE_DEV_NAK_W {
                RB_UIE_DEV_NAK_W { w: self }
            }
            #[doc = "Bit 7 - enable interrupt for SOF received for USB device mode"]
            #[inline(always)]
            pub fn rb_uie_dev_sof(&mut self) -> RB_UIE_DEV_SOF_W {
                RB_UIE_DEV_SOF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USB interrupt enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_usb_int_en](index.html) module"]
        pub struct R8_USB_INT_EN_SPEC;
        impl crate::RegisterSpec for R8_USB_INT_EN_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_usb_int_en::R](R) reader structure"]
        impl crate::Readable for R8_USB_INT_EN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_usb_int_en::W](W) writer structure"]
        impl crate::Writable for R8_USB_INT_EN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_USB_INT_EN to value 0"]
        impl crate::Resettable for R8_USB_INT_EN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_USB_DEV_AD register accessor: an alias for `Reg<R8_USB_DEV_AD_SPEC>`"]
    pub type R8_USB_DEV_AD = crate::Reg<r8_usb_dev_ad::R8_USB_DEV_AD_SPEC>;
    #[doc = "USB device address"]
    pub mod r8_usb_dev_ad {
        #[doc = "Register `R8_USB_DEV_AD` reader"]
        pub struct R(crate::R<R8_USB_DEV_AD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_USB_DEV_AD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_USB_DEV_AD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_USB_DEV_AD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_USB_DEV_AD` writer"]
        pub struct W(crate::W<R8_USB_DEV_AD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_USB_DEV_AD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_USB_DEV_AD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_USB_DEV_AD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_USB_ADDR` reader - bit mask for USB device address"]
        pub struct MASK_USB_ADDR_R(crate::FieldReader<u8>);
        impl MASK_USB_ADDR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_USB_ADDR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_USB_ADDR_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_USB_ADDR` writer - bit mask for USB device address"]
        pub struct MASK_USB_ADDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_USB_ADDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | (value as u8 & 0x7f);
                self.w
            }
        }
        #[doc = "Field `RB_UDA_GP_BIT` reader - general purpose bit"]
        pub struct RB_UDA_GP_BIT_R(crate::FieldReader<bool>);
        impl RB_UDA_GP_BIT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UDA_GP_BIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UDA_GP_BIT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UDA_GP_BIT` writer - general purpose bit"]
        pub struct RB_UDA_GP_BIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UDA_GP_BIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - bit mask for USB device address"]
            #[inline(always)]
            pub fn mask_usb_addr(&self) -> MASK_USB_ADDR_R {
                MASK_USB_ADDR_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - general purpose bit"]
            #[inline(always)]
            pub fn rb_uda_gp_bit(&self) -> RB_UDA_GP_BIT_R {
                RB_UDA_GP_BIT_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - bit mask for USB device address"]
            #[inline(always)]
            pub fn mask_usb_addr(&mut self) -> MASK_USB_ADDR_W {
                MASK_USB_ADDR_W { w: self }
            }
            #[doc = "Bit 7 - general purpose bit"]
            #[inline(always)]
            pub fn rb_uda_gp_bit(&mut self) -> RB_UDA_GP_BIT_W {
                RB_UDA_GP_BIT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USB device address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_usb_dev_ad](index.html) module"]
        pub struct R8_USB_DEV_AD_SPEC;
        impl crate::RegisterSpec for R8_USB_DEV_AD_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_usb_dev_ad::R](R) reader structure"]
        impl crate::Readable for R8_USB_DEV_AD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_usb_dev_ad::W](W) writer structure"]
        impl crate::Writable for R8_USB_DEV_AD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_USB_DEV_AD to value 0"]
        impl crate::Resettable for R8_USB_DEV_AD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_USB_MIS_ST register accessor: an alias for `Reg<R8_USB_MIS_ST_SPEC>`"]
    pub type R8_USB_MIS_ST = crate::Reg<r8_usb_mis_st::R8_USB_MIS_ST_SPEC>;
    #[doc = "USB miscellaneous status"]
    pub mod r8_usb_mis_st {
        #[doc = "Register `R8_USB_MIS_ST` reader"]
        pub struct R(crate::R<R8_USB_MIS_ST_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_USB_MIS_ST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_USB_MIS_ST_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_USB_MIS_ST_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `RB_UMS_DEV_ATTACH` reader - RO, indicate device attached status on USB host"]
        pub struct RB_UMS_DEV_ATTACH_R(crate::FieldReader<bool>);
        impl RB_UMS_DEV_ATTACH_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_DEV_ATTACH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_DEV_ATTACH_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UMS_DM_LEVEL` reader - RO, indicate UDM level saved at device attached to USB host"]
        pub struct RB_UMS_DM_LEVEL_R(crate::FieldReader<bool>);
        impl RB_UMS_DM_LEVEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_DM_LEVEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_DM_LEVEL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UMS_SUSPEND` reader - RO, indicate USB suspend status"]
        pub struct RB_UMS_SUSPEND_R(crate::FieldReader<bool>);
        impl RB_UMS_SUSPEND_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_SUSPEND_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_SUSPEND_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UMS_BUS_RESET` reader - RO, indicate USB bus reset status"]
        pub struct RB_UMS_BUS_RESET_R(crate::FieldReader<bool>);
        impl RB_UMS_BUS_RESET_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_BUS_RESET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_BUS_RESET_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UMS_R_FIFO_RDY` reader - RO, indicate USB receiving FIFO ready status (not empty)"]
        pub struct RB_UMS_R_FIFO_RDY_R(crate::FieldReader<bool>);
        impl RB_UMS_R_FIFO_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_R_FIFO_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_R_FIFO_RDY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UMS_SIE_FREE` reader - RO, indicate USB SIE free status"]
        pub struct RB_UMS_SIE_FREE_R(crate::FieldReader<bool>);
        impl RB_UMS_SIE_FREE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_SIE_FREE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_SIE_FREE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UMS_SOF_ACT` reader - RO, indicate host SOF timer action status for USB host"]
        pub struct RB_UMS_SOF_ACT_R(crate::FieldReader<bool>);
        impl RB_UMS_SOF_ACT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_SOF_ACT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_SOF_ACT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UMS_SOF_PRES` reader - RO, indicate host SOF timer presage status"]
        pub struct RB_UMS_SOF_PRES_R(crate::FieldReader<bool>);
        impl RB_UMS_SOF_PRES_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UMS_SOF_PRES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UMS_SOF_PRES_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - RO, indicate device attached status on USB host"]
            #[inline(always)]
            pub fn rb_ums_dev_attach(&self) -> RB_UMS_DEV_ATTACH_R {
                RB_UMS_DEV_ATTACH_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - RO, indicate UDM level saved at device attached to USB host"]
            #[inline(always)]
            pub fn rb_ums_dm_level(&self) -> RB_UMS_DM_LEVEL_R {
                RB_UMS_DM_LEVEL_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - RO, indicate USB suspend status"]
            #[inline(always)]
            pub fn rb_ums_suspend(&self) -> RB_UMS_SUSPEND_R {
                RB_UMS_SUSPEND_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - RO, indicate USB bus reset status"]
            #[inline(always)]
            pub fn rb_ums_bus_reset(&self) -> RB_UMS_BUS_RESET_R {
                RB_UMS_BUS_RESET_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - RO, indicate USB receiving FIFO ready status (not empty)"]
            #[inline(always)]
            pub fn rb_ums_r_fifo_rdy(&self) -> RB_UMS_R_FIFO_RDY_R {
                RB_UMS_R_FIFO_RDY_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - RO, indicate USB SIE free status"]
            #[inline(always)]
            pub fn rb_ums_sie_free(&self) -> RB_UMS_SIE_FREE_R {
                RB_UMS_SIE_FREE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - RO, indicate host SOF timer action status for USB host"]
            #[inline(always)]
            pub fn rb_ums_sof_act(&self) -> RB_UMS_SOF_ACT_R {
                RB_UMS_SOF_ACT_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - RO, indicate host SOF timer presage status"]
            #[inline(always)]
            pub fn rb_ums_sof_pres(&self) -> RB_UMS_SOF_PRES_R {
                RB_UMS_SOF_PRES_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        #[doc = "USB miscellaneous status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_usb_mis_st](index.html) module"]
        pub struct R8_USB_MIS_ST_SPEC;
        impl crate::RegisterSpec for R8_USB_MIS_ST_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_usb_mis_st::R](R) reader structure"]
        impl crate::Readable for R8_USB_MIS_ST_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets R8_USB_MIS_ST to value 0"]
        impl crate::Resettable for R8_USB_MIS_ST_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_USB_INT_FG register accessor: an alias for `Reg<R8_USB_INT_FG_SPEC>`"]
    pub type R8_USB_INT_FG = crate::Reg<r8_usb_int_fg::R8_USB_INT_FG_SPEC>;
    #[doc = "USB interrupt flag"]
    pub mod r8_usb_int_fg {
        #[doc = "Register `R8_USB_INT_FG` reader"]
        pub struct R(crate::R<R8_USB_INT_FG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_USB_INT_FG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_USB_INT_FG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_USB_INT_FG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_USB_INT_FG` writer"]
        pub struct W(crate::W<R8_USB_INT_FG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_USB_INT_FG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_USB_INT_FG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_USB_INT_FG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UIF_BUS_RST__RB_UIF_DETECT` reader - bus reset event interrupt flag for USB device mode, direct bit address clear or write 1 to clear;device detected event interrupt flag for USB host mode, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_BUS_RST__RB_UIF_DETECT_R(crate::FieldReader<bool>);
        impl RB_UIF_BUS_RST__RB_UIF_DETECT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIF_BUS_RST__RB_UIF_DETECT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIF_BUS_RST__RB_UIF_DETECT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIF_BUS_RST__RB_UIF_DETECT` writer - bus reset event interrupt flag for USB device mode, direct bit address clear or write 1 to clear;device detected event interrupt flag for USB host mode, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_BUS_RST__RB_UIF_DETECT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIF_BUS_RST__RB_UIF_DETECT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UIF_TRANSFER` reader - USB transfer completion interrupt flag, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_TRANSFER_R(crate::FieldReader<bool>);
        impl RB_UIF_TRANSFER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIF_TRANSFER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIF_TRANSFER_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIF_TRANSFER` writer - USB transfer completion interrupt flag, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_TRANSFER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIF_TRANSFER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u8 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `RB_UIF_SUSPEND` reader - USB suspend or resume event interrupt flag, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_SUSPEND_R(crate::FieldReader<bool>);
        impl RB_UIF_SUSPEND_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIF_SUSPEND_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIF_SUSPEND_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIF_SUSPEND` writer - USB suspend or resume event interrupt flag, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_SUSPEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIF_SUSPEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UIF_HST_SOF` reader - host SOF timer interrupt flag for USB host, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_HST_SOF_R(crate::FieldReader<bool>);
        impl RB_UIF_HST_SOF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIF_HST_SOF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIF_HST_SOF_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIF_HST_SOF` writer - host SOF timer interrupt flag for USB host, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_HST_SOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIF_HST_SOF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u8 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `RB_UIF_FIFO_OV` reader - FIFO overflow interrupt flag for USB, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_FIFO_OV_R(crate::FieldReader<bool>);
        impl RB_UIF_FIFO_OV_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIF_FIFO_OV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIF_FIFO_OV_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIF_FIFO_OV` writer - FIFO overflow interrupt flag for USB, direct bit address clear or write 1 to clear"]
        pub struct RB_UIF_FIFO_OV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UIF_FIFO_OV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_U_SIE_FREE` reader - RO, indicate USB SIE free status"]
        pub struct RB_U_SIE_FREE_R(crate::FieldReader<bool>);
        impl RB_U_SIE_FREE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_U_SIE_FREE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_U_SIE_FREE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_U_TOG_OK` reader - RO, indicate current USB transfer toggle is OK"]
        pub struct RB_U_TOG_OK_R(crate::FieldReader<bool>);
        impl RB_U_TOG_OK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_U_TOG_OK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_U_TOG_OK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_U_IS_NAK` reader - RO, indicate current USB transfer is NAK received"]
        pub struct RB_U_IS_NAK_R(crate::FieldReader<bool>);
        impl RB_U_IS_NAK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_U_IS_NAK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_U_IS_NAK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - bus reset event interrupt flag for USB device mode, direct bit address clear or write 1 to clear;device detected event interrupt flag for USB host mode, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_bus_rst__rb_uif_detect(&self) -> RB_UIF_BUS_RST__RB_UIF_DETECT_R {
                RB_UIF_BUS_RST__RB_UIF_DETECT_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - USB transfer completion interrupt flag, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_transfer(&self) -> RB_UIF_TRANSFER_R {
                RB_UIF_TRANSFER_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - USB suspend or resume event interrupt flag, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_suspend(&self) -> RB_UIF_SUSPEND_R {
                RB_UIF_SUSPEND_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - host SOF timer interrupt flag for USB host, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_hst_sof(&self) -> RB_UIF_HST_SOF_R {
                RB_UIF_HST_SOF_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - FIFO overflow interrupt flag for USB, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_fifo_ov(&self) -> RB_UIF_FIFO_OV_R {
                RB_UIF_FIFO_OV_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - RO, indicate USB SIE free status"]
            #[inline(always)]
            pub fn rb_u_sie_free(&self) -> RB_U_SIE_FREE_R {
                RB_U_SIE_FREE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - RO, indicate current USB transfer toggle is OK"]
            #[inline(always)]
            pub fn rb_u_tog_ok(&self) -> RB_U_TOG_OK_R {
                RB_U_TOG_OK_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - RO, indicate current USB transfer is NAK received"]
            #[inline(always)]
            pub fn rb_u_is_nak(&self) -> RB_U_IS_NAK_R {
                RB_U_IS_NAK_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - bus reset event interrupt flag for USB device mode, direct bit address clear or write 1 to clear;device detected event interrupt flag for USB host mode, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_bus_rst__rb_uif_detect(&mut self) -> RB_UIF_BUS_RST__RB_UIF_DETECT_W {
                RB_UIF_BUS_RST__RB_UIF_DETECT_W { w: self }
            }
            #[doc = "Bit 1 - USB transfer completion interrupt flag, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_transfer(&mut self) -> RB_UIF_TRANSFER_W {
                RB_UIF_TRANSFER_W { w: self }
            }
            #[doc = "Bit 2 - USB suspend or resume event interrupt flag, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_suspend(&mut self) -> RB_UIF_SUSPEND_W {
                RB_UIF_SUSPEND_W { w: self }
            }
            #[doc = "Bit 3 - host SOF timer interrupt flag for USB host, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_hst_sof(&mut self) -> RB_UIF_HST_SOF_W {
                RB_UIF_HST_SOF_W { w: self }
            }
            #[doc = "Bit 4 - FIFO overflow interrupt flag for USB, direct bit address clear or write 1 to clear"]
            #[inline(always)]
            pub fn rb_uif_fifo_ov(&mut self) -> RB_UIF_FIFO_OV_W {
                RB_UIF_FIFO_OV_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USB interrupt flag\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_usb_int_fg](index.html) module"]
        pub struct R8_USB_INT_FG_SPEC;
        impl crate::RegisterSpec for R8_USB_INT_FG_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_usb_int_fg::R](R) reader structure"]
        impl crate::Readable for R8_USB_INT_FG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_usb_int_fg::W](W) writer structure"]
        impl crate::Writable for R8_USB_INT_FG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_USB_INT_FG to value 0x20"]
        impl crate::Resettable for R8_USB_INT_FG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x20
            }
        }
    }
    #[doc = "R8_USB_INT_ST register accessor: an alias for `Reg<R8_USB_INT_ST_SPEC>`"]
    pub type R8_USB_INT_ST = crate::Reg<r8_usb_int_st::R8_USB_INT_ST_SPEC>;
    #[doc = "USB interrupt status"]
    pub mod r8_usb_int_st {
        #[doc = "Register `R8_USB_INT_ST` reader"]
        pub struct R(crate::R<R8_USB_INT_ST_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_USB_INT_ST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_USB_INT_ST_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_USB_INT_ST_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `MASK_UIS_H_RES__MASK_UIS_ENDP` reader - RO, bit mask of current transfer handshake response for USB host mode: 0000=no response, time out from device, others=handshake response PID received;RO, bit mask of current transfer endpoint number for USB device mode"]
        pub struct MASK_UIS_H_RES__MASK_UIS_ENDP_R(crate::FieldReader<u8>);
        impl MASK_UIS_H_RES__MASK_UIS_ENDP_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UIS_H_RES__MASK_UIS_ENDP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UIS_H_RES__MASK_UIS_ENDP_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UIS_TOKEN` reader - RO, bit mask of current token PID code received for USB device mode"]
        pub struct MASK_UIS_TOKEN_R(crate::FieldReader<u8>);
        impl MASK_UIS_TOKEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UIS_TOKEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UIS_TOKEN_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIS_TOG_OK` reader - RO, indicate current USB transfer toggle is OK"]
        pub struct RB_UIS_TOG_OK_R(crate::FieldReader<bool>);
        impl RB_UIS_TOG_OK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIS_TOG_OK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIS_TOG_OK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UIS_IS_NAK` reader - RO, indicate current USB transfer is NAK received for USB device mode"]
        pub struct RB_UIS_IS_NAK_R(crate::FieldReader<bool>);
        impl RB_UIS_IS_NAK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UIS_IS_NAK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UIS_IS_NAK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:3 - RO, bit mask of current transfer handshake response for USB host mode: 0000=no response, time out from device, others=handshake response PID received;RO, bit mask of current transfer endpoint number for USB device mode"]
            #[inline(always)]
            pub fn mask_uis_h_res__mask_uis_endp(&self) -> MASK_UIS_H_RES__MASK_UIS_ENDP_R {
                MASK_UIS_H_RES__MASK_UIS_ENDP_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - RO, bit mask of current token PID code received for USB device mode"]
            #[inline(always)]
            pub fn mask_uis_token(&self) -> MASK_UIS_TOKEN_R {
                MASK_UIS_TOKEN_R::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - RO, indicate current USB transfer toggle is OK"]
            #[inline(always)]
            pub fn rb_uis_tog_ok(&self) -> RB_UIS_TOG_OK_R {
                RB_UIS_TOG_OK_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - RO, indicate current USB transfer is NAK received for USB device mode"]
            #[inline(always)]
            pub fn rb_uis_is_nak(&self) -> RB_UIS_IS_NAK_R {
                RB_UIS_IS_NAK_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        #[doc = "USB interrupt status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_usb_int_st](index.html) module"]
        pub struct R8_USB_INT_ST_SPEC;
        impl crate::RegisterSpec for R8_USB_INT_ST_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_usb_int_st::R](R) reader structure"]
        impl crate::Readable for R8_USB_INT_ST_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets R8_USB_INT_ST to value 0"]
        impl crate::Resettable for R8_USB_INT_ST_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_USB_RX_LEN register accessor: an alias for `Reg<R8_USB_RX_LEN_SPEC>`"]
    pub type R8_USB_RX_LEN = crate::Reg<r8_usb_rx_len::R8_USB_RX_LEN_SPEC>;
    #[doc = "USB receiving length"]
    pub mod r8_usb_rx_len {
        #[doc = "Register `R8_USB_RX_LEN` reader"]
        pub struct R(crate::R<R8_USB_RX_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_USB_RX_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_USB_RX_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_USB_RX_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `R16_USB_RX_LEN` reader - length of received bytes"]
        pub struct R16_USB_RX_LEN_R(crate::FieldReader<u16>);
        impl R16_USB_RX_LEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                R16_USB_RX_LEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for R16_USB_RX_LEN_R {
            type Target = crate::FieldReader<u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:9 - length of received bytes"]
            #[inline(always)]
            pub fn r16_usb_rx_len(&self) -> R16_USB_RX_LEN_R {
                R16_USB_RX_LEN_R::new((self.bits & 0x03ff) as u16)
            }
        }
        #[doc = "USB receiving length\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_usb_rx_len](index.html) module"]
        pub struct R8_USB_RX_LEN_SPEC;
        impl crate::RegisterSpec for R8_USB_RX_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r8_usb_rx_len::R](R) reader structure"]
        impl crate::Readable for R8_USB_RX_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets R8_USB_RX_LEN to value 0"]
        impl crate::Resettable for R8_USB_RX_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP4_1_MOD register accessor: an alias for `Reg<R8_UEP4_1_MOD_SPEC>`"]
    pub type R8_UEP4_1_MOD = crate::Reg<r8_uep4_1_mod::R8_UEP4_1_MOD_SPEC>;
    #[doc = "endpoint 4/1 mode"]
    pub mod r8_uep4_1_mod {
        #[doc = "Register `R8_UEP4_1_MOD` reader"]
        pub struct R(crate::R<R8_UEP4_1_MOD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP4_1_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP4_1_MOD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP4_1_MOD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP4_1_MOD` writer"]
        pub struct W(crate::W<R8_UEP4_1_MOD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP4_1_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP4_1_MOD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP4_1_MOD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UEP4_BUF_MOD` reader - buffer mode of USB endpoint 4"]
        pub struct RB_UEP4_BUF_MOD_R(crate::FieldReader<bool>);
        impl RB_UEP4_BUF_MOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP4_BUF_MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP4_BUF_MOD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP4_BUF_MOD` writer - buffer mode of USB endpoint 4"]
        pub struct RB_UEP4_BUF_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP4_BUF_MOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UEP4_TX_EN` reader - enable USB endpoint 4 transmittal (IN)"]
        pub struct RB_UEP4_TX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP4_TX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP4_TX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP4_TX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP4_TX_EN` writer - enable USB endpoint 4 transmittal (IN)"]
        pub struct RB_UEP4_TX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP4_TX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP4_RX_EN` reader - enable USB endpoint 4 receiving (OUT)"]
        pub struct RB_UEP4_RX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP4_RX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP4_RX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP4_RX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP4_RX_EN` writer - enable USB endpoint 4 receiving (OUT)"]
        pub struct RB_UEP4_RX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP4_RX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u8 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `RB_UEP1_BUF_MOD` reader - buffer mode of USB endpoint 1"]
        pub struct RB_UEP1_BUF_MOD_R(crate::FieldReader<bool>);
        impl RB_UEP1_BUF_MOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP1_BUF_MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP1_BUF_MOD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP1_BUF_MOD` writer - buffer mode of USB endpoint 1"]
        pub struct RB_UEP1_BUF_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP1_BUF_MOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP1_TX_EN` reader - enable USB endpoint 1 transmittal (IN)"]
        pub struct RB_UEP1_TX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP1_TX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP1_TX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP1_TX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP1_TX_EN` writer - enable USB endpoint 1 transmittal (IN)"]
        pub struct RB_UEP1_TX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP1_TX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP1_RX_EN` reader - enable USB endpoint 1 receiving (OUT)"]
        pub struct RB_UEP1_RX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP1_RX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP1_RX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP1_RX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP1_RX_EN` writer - enable USB endpoint 1 receiving (OUT)"]
        pub struct RB_UEP1_RX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP1_RX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - buffer mode of USB endpoint 4"]
            #[inline(always)]
            pub fn rb_uep4_buf_mod(&self) -> RB_UEP4_BUF_MOD_R {
                RB_UEP4_BUF_MOD_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - enable USB endpoint 4 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep4_tx_en(&self) -> RB_UEP4_TX_EN_R {
                RB_UEP4_TX_EN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - enable USB endpoint 4 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep4_rx_en(&self) -> RB_UEP4_RX_EN_R {
                RB_UEP4_RX_EN_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - buffer mode of USB endpoint 1"]
            #[inline(always)]
            pub fn rb_uep1_buf_mod(&self) -> RB_UEP1_BUF_MOD_R {
                RB_UEP1_BUF_MOD_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - enable USB endpoint 1 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep1_tx_en(&self) -> RB_UEP1_TX_EN_R {
                RB_UEP1_TX_EN_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - enable USB endpoint 1 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep1_rx_en(&self) -> RB_UEP1_RX_EN_R {
                RB_UEP1_RX_EN_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - buffer mode of USB endpoint 4"]
            #[inline(always)]
            pub fn rb_uep4_buf_mod(&mut self) -> RB_UEP4_BUF_MOD_W {
                RB_UEP4_BUF_MOD_W { w: self }
            }
            #[doc = "Bit 2 - enable USB endpoint 4 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep4_tx_en(&mut self) -> RB_UEP4_TX_EN_W {
                RB_UEP4_TX_EN_W { w: self }
            }
            #[doc = "Bit 3 - enable USB endpoint 4 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep4_rx_en(&mut self) -> RB_UEP4_RX_EN_W {
                RB_UEP4_RX_EN_W { w: self }
            }
            #[doc = "Bit 4 - buffer mode of USB endpoint 1"]
            #[inline(always)]
            pub fn rb_uep1_buf_mod(&mut self) -> RB_UEP1_BUF_MOD_W {
                RB_UEP1_BUF_MOD_W { w: self }
            }
            #[doc = "Bit 6 - enable USB endpoint 1 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep1_tx_en(&mut self) -> RB_UEP1_TX_EN_W {
                RB_UEP1_TX_EN_W { w: self }
            }
            #[doc = "Bit 7 - enable USB endpoint 1 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep1_rx_en(&mut self) -> RB_UEP1_RX_EN_W {
                RB_UEP1_RX_EN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 4/1 mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep4_1_mod](index.html) module"]
        pub struct R8_UEP4_1_MOD_SPEC;
        impl crate::RegisterSpec for R8_UEP4_1_MOD_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep4_1_mod::R](R) reader structure"]
        impl crate::Readable for R8_UEP4_1_MOD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep4_1_mod::W](W) writer structure"]
        impl crate::Writable for R8_UEP4_1_MOD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP4_1_MOD to value 0"]
        impl crate::Resettable for R8_UEP4_1_MOD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP2_3_MOD__R8_UH_EP_MOD register accessor: an alias for `Reg<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>`"]
    pub type R8_UEP2_3_MOD__R8_UH_EP_MOD =
        crate::Reg<r8_uep2_3_mod__r8_uh_ep_mod::R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>;
    #[doc = "endpoint 2/3 mode;host endpoint mode"]
    pub mod r8_uep2_3_mod__r8_uh_ep_mod {
        #[doc = "Register `R8_UEP2_3_MOD__R8_UH_EP_MOD` reader"]
        pub struct R(crate::R<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP2_3_MOD__R8_UH_EP_MOD` writer"]
        pub struct W(crate::W<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD` reader - buffer mode of USB endpoint 2;buffer mode of USB host IN endpoint"]
        pub struct RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_R(crate::FieldReader<bool>);
        impl RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD` writer - buffer mode of USB endpoint 2;buffer mode of USB host IN endpoint"]
        pub struct RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UEP2_TX_EN` reader - enable USB endpoint 2 transmittal (IN)"]
        pub struct RB_UEP2_TX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP2_TX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP2_TX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP2_TX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP2_TX_EN` writer - enable USB endpoint 2 transmittal (IN)"]
        pub struct RB_UEP2_TX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP2_TX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP2_RX_EN__RB_UH_EP_RX_EN` reader - enable USB endpoint 2 receiving (OUT);enable USB host IN endpoint receiving"]
        pub struct RB_UEP2_RX_EN__RB_UH_EP_RX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP2_RX_EN__RB_UH_EP_RX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP2_RX_EN__RB_UH_EP_RX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP2_RX_EN__RB_UH_EP_RX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP2_RX_EN__RB_UH_EP_RX_EN` writer - enable USB endpoint 2 receiving (OUT);enable USB host IN endpoint receiving"]
        pub struct RB_UEP2_RX_EN__RB_UH_EP_RX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP2_RX_EN__RB_UH_EP_RX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u8 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD` reader - buffer mode of USB endpoint 3;buffer mode of USB host OUT endpoint"]
        pub struct RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_R(crate::FieldReader<bool>);
        impl RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD` writer - buffer mode of USB endpoint 3;buffer mode of USB host OUT endpoint"]
        pub struct RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP3_TX_EN__RB_UH_EP_TX_EN` reader - enable USB endpoint 3 transmittal (IN);enable USB host OUT endpoint transmittal"]
        pub struct RB_UEP3_TX_EN__RB_UH_EP_TX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP3_TX_EN__RB_UH_EP_TX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP3_TX_EN__RB_UH_EP_TX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP3_TX_EN__RB_UH_EP_TX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP3_TX_EN__RB_UH_EP_TX_EN` writer - enable USB endpoint 3 transmittal (IN);enable USB host OUT endpoint transmittal"]
        pub struct RB_UEP3_TX_EN__RB_UH_EP_TX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP3_TX_EN__RB_UH_EP_TX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP3_RX_EN` reader - enable USB endpoint 3 receiving (OUT)"]
        pub struct RB_UEP3_RX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP3_RX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP3_RX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP3_RX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP3_RX_EN` writer - enable USB endpoint 3 receiving (OUT)"]
        pub struct RB_UEP3_RX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP3_RX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - buffer mode of USB endpoint 2;buffer mode of USB host IN endpoint"]
            #[inline(always)]
            pub fn rb_uep2_buf_mod__rb_uh_ep_rbuf_mod(
                &self,
            ) -> RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_R {
                RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - enable USB endpoint 2 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep2_tx_en(&self) -> RB_UEP2_TX_EN_R {
                RB_UEP2_TX_EN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - enable USB endpoint 2 receiving (OUT);enable USB host IN endpoint receiving"]
            #[inline(always)]
            pub fn rb_uep2_rx_en__rb_uh_ep_rx_en(&self) -> RB_UEP2_RX_EN__RB_UH_EP_RX_EN_R {
                RB_UEP2_RX_EN__RB_UH_EP_RX_EN_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - buffer mode of USB endpoint 3;buffer mode of USB host OUT endpoint"]
            #[inline(always)]
            pub fn rb_uep3_buf_mod__rb_uh_ep_tbuf_mod(
                &self,
            ) -> RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_R {
                RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - enable USB endpoint 3 transmittal (IN);enable USB host OUT endpoint transmittal"]
            #[inline(always)]
            pub fn rb_uep3_tx_en__rb_uh_ep_tx_en(&self) -> RB_UEP3_TX_EN__RB_UH_EP_TX_EN_R {
                RB_UEP3_TX_EN__RB_UH_EP_TX_EN_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - enable USB endpoint 3 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep3_rx_en(&self) -> RB_UEP3_RX_EN_R {
                RB_UEP3_RX_EN_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - buffer mode of USB endpoint 2;buffer mode of USB host IN endpoint"]
            #[inline(always)]
            pub fn rb_uep2_buf_mod__rb_uh_ep_rbuf_mod(
                &mut self,
            ) -> RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_W {
                RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_W { w: self }
            }
            #[doc = "Bit 2 - enable USB endpoint 2 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep2_tx_en(&mut self) -> RB_UEP2_TX_EN_W {
                RB_UEP2_TX_EN_W { w: self }
            }
            #[doc = "Bit 3 - enable USB endpoint 2 receiving (OUT);enable USB host IN endpoint receiving"]
            #[inline(always)]
            pub fn rb_uep2_rx_en__rb_uh_ep_rx_en(&mut self) -> RB_UEP2_RX_EN__RB_UH_EP_RX_EN_W {
                RB_UEP2_RX_EN__RB_UH_EP_RX_EN_W { w: self }
            }
            #[doc = "Bit 4 - buffer mode of USB endpoint 3;buffer mode of USB host OUT endpoint"]
            #[inline(always)]
            pub fn rb_uep3_buf_mod__rb_uh_ep_tbuf_mod(
                &mut self,
            ) -> RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_W {
                RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_W { w: self }
            }
            #[doc = "Bit 6 - enable USB endpoint 3 transmittal (IN);enable USB host OUT endpoint transmittal"]
            #[inline(always)]
            pub fn rb_uep3_tx_en__rb_uh_ep_tx_en(&mut self) -> RB_UEP3_TX_EN__RB_UH_EP_TX_EN_W {
                RB_UEP3_TX_EN__RB_UH_EP_TX_EN_W { w: self }
            }
            #[doc = "Bit 7 - enable USB endpoint 3 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep3_rx_en(&mut self) -> RB_UEP3_RX_EN_W {
                RB_UEP3_RX_EN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 2/3 mode;host endpoint mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep2_3_mod__r8_uh_ep_mod](index.html) module"]
        pub struct R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC;
        impl crate::RegisterSpec for R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep2_3_mod__r8_uh_ep_mod::R](R) reader structure"]
        impl crate::Readable for R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep2_3_mod__r8_uh_ep_mod::W](W) writer structure"]
        impl crate::Writable for R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP2_3_MOD__R8_UH_EP_MOD to value 0"]
        impl crate::Resettable for R8_UEP2_3_MOD__R8_UH_EP_MOD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP5_6_MOD register accessor: an alias for `Reg<R8_UEP5_6_MOD_SPEC>`"]
    pub type R8_UEP5_6_MOD = crate::Reg<r8_uep5_6_mod::R8_UEP5_6_MOD_SPEC>;
    #[doc = "endpoint 5/6 mode"]
    pub mod r8_uep5_6_mod {
        #[doc = "Register `R8_UEP5_6_MOD` reader"]
        pub struct R(crate::R<R8_UEP5_6_MOD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP5_6_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP5_6_MOD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP5_6_MOD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP5_6_MOD` writer"]
        pub struct W(crate::W<R8_UEP5_6_MOD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP5_6_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP5_6_MOD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP5_6_MOD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UEP5_BUF_MOD` reader - buffer mode of USB endpoint 5"]
        pub struct RB_UEP5_BUF_MOD_R(crate::FieldReader<bool>);
        impl RB_UEP5_BUF_MOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP5_BUF_MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP5_BUF_MOD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP5_BUF_MOD` writer - buffer mode of USB endpoint 5"]
        pub struct RB_UEP5_BUF_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP5_BUF_MOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UEP5_TX_EN` reader - enable USB endpoint 5 transmittal (IN)"]
        pub struct RB_UEP5_TX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP5_TX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP5_TX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP5_TX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP5_TX_EN` writer - enable USB endpoint 5 transmittal (IN)"]
        pub struct RB_UEP5_TX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP5_TX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP5_RX_EN` reader - enable USB endpoint 5 receiving (OUT)"]
        pub struct RB_UEP5_RX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP5_RX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP5_RX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP5_RX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP5_RX_EN` writer - enable USB endpoint 5 receiving (OUT)"]
        pub struct RB_UEP5_RX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP5_RX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u8 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `RB_UEP6_BUF_MOD` reader - buffer mode of USB endpoint 6"]
        pub struct RB_UEP6_BUF_MOD_R(crate::FieldReader<bool>);
        impl RB_UEP6_BUF_MOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP6_BUF_MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP6_BUF_MOD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP6_BUF_MOD` writer - buffer mode of USB endpoint 6"]
        pub struct RB_UEP6_BUF_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP6_BUF_MOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP6_TX_EN` reader - enable USB endpoint 6 transmittal (IN)"]
        pub struct RB_UEP6_TX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP6_TX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP6_TX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP6_TX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP6_TX_EN` writer - enable USB endpoint 6 transmittal (IN)"]
        pub struct RB_UEP6_TX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP6_TX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP3_RX_EN` reader - enable USB endpoint 6 receiving (OUT)"]
        pub struct RB_UEP3_RX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP3_RX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP3_RX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP3_RX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP3_RX_EN` writer - enable USB endpoint 6 receiving (OUT)"]
        pub struct RB_UEP3_RX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP3_RX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - buffer mode of USB endpoint 5"]
            #[inline(always)]
            pub fn rb_uep5_buf_mod(&self) -> RB_UEP5_BUF_MOD_R {
                RB_UEP5_BUF_MOD_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - enable USB endpoint 5 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep5_tx_en(&self) -> RB_UEP5_TX_EN_R {
                RB_UEP5_TX_EN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - enable USB endpoint 5 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep5_rx_en(&self) -> RB_UEP5_RX_EN_R {
                RB_UEP5_RX_EN_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - buffer mode of USB endpoint 6"]
            #[inline(always)]
            pub fn rb_uep6_buf_mod(&self) -> RB_UEP6_BUF_MOD_R {
                RB_UEP6_BUF_MOD_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - enable USB endpoint 6 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep6_tx_en(&self) -> RB_UEP6_TX_EN_R {
                RB_UEP6_TX_EN_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - enable USB endpoint 6 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep3_rx_en(&self) -> RB_UEP3_RX_EN_R {
                RB_UEP3_RX_EN_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - buffer mode of USB endpoint 5"]
            #[inline(always)]
            pub fn rb_uep5_buf_mod(&mut self) -> RB_UEP5_BUF_MOD_W {
                RB_UEP5_BUF_MOD_W { w: self }
            }
            #[doc = "Bit 2 - enable USB endpoint 5 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep5_tx_en(&mut self) -> RB_UEP5_TX_EN_W {
                RB_UEP5_TX_EN_W { w: self }
            }
            #[doc = "Bit 3 - enable USB endpoint 5 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep5_rx_en(&mut self) -> RB_UEP5_RX_EN_W {
                RB_UEP5_RX_EN_W { w: self }
            }
            #[doc = "Bit 4 - buffer mode of USB endpoint 6"]
            #[inline(always)]
            pub fn rb_uep6_buf_mod(&mut self) -> RB_UEP6_BUF_MOD_W {
                RB_UEP6_BUF_MOD_W { w: self }
            }
            #[doc = "Bit 6 - enable USB endpoint 6 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep6_tx_en(&mut self) -> RB_UEP6_TX_EN_W {
                RB_UEP6_TX_EN_W { w: self }
            }
            #[doc = "Bit 7 - enable USB endpoint 6 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep3_rx_en(&mut self) -> RB_UEP3_RX_EN_W {
                RB_UEP3_RX_EN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 5/6 mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep5_6_mod](index.html) module"]
        pub struct R8_UEP5_6_MOD_SPEC;
        impl crate::RegisterSpec for R8_UEP5_6_MOD_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep5_6_mod::R](R) reader structure"]
        impl crate::Readable for R8_UEP5_6_MOD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep5_6_mod::W](W) writer structure"]
        impl crate::Writable for R8_UEP5_6_MOD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP5_6_MOD to value 0"]
        impl crate::Resettable for R8_UEP5_6_MOD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP7_MOD register accessor: an alias for `Reg<R8_UEP7_MOD_SPEC>`"]
    pub type R8_UEP7_MOD = crate::Reg<r8_uep7_mod::R8_UEP7_MOD_SPEC>;
    #[doc = "endpoint 7 mode"]
    pub mod r8_uep7_mod {
        #[doc = "Register `R8_UEP7_MOD` reader"]
        pub struct R(crate::R<R8_UEP7_MOD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP7_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP7_MOD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP7_MOD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP7_MOD` writer"]
        pub struct W(crate::W<R8_UEP7_MOD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP7_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP7_MOD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP7_MOD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RB_UEP7_BUF_MOD` reader - buffer mode of USB endpoint 7"]
        pub struct RB_UEP7_BUF_MOD_R(crate::FieldReader<bool>);
        impl RB_UEP7_BUF_MOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP7_BUF_MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP7_BUF_MOD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP7_BUF_MOD` writer - buffer mode of USB endpoint 7"]
        pub struct RB_UEP7_BUF_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP7_BUF_MOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u8 & 1);
                self.w
            }
        }
        #[doc = "Field `RB_UEP7_TX_EN` reader - enable USB endpoint 7 transmittal (IN)"]
        pub struct RB_UEP7_TX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP7_TX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP7_TX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP7_TX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP7_TX_EN` writer - enable USB endpoint 7 transmittal (IN)"]
        pub struct RB_UEP7_TX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP7_TX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u8 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP7_RX_EN` reader - enable USB endpoint 7 receiving (OUT)"]
        pub struct RB_UEP7_RX_EN_R(crate::FieldReader<bool>);
        impl RB_UEP7_RX_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP7_RX_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP7_RX_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP7_RX_EN` writer - enable USB endpoint 7 receiving (OUT)"]
        pub struct RB_UEP7_RX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP7_RX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u8 & 1) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - buffer mode of USB endpoint 7"]
            #[inline(always)]
            pub fn rb_uep7_buf_mod(&self) -> RB_UEP7_BUF_MOD_R {
                RB_UEP7_BUF_MOD_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - enable USB endpoint 7 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep7_tx_en(&self) -> RB_UEP7_TX_EN_R {
                RB_UEP7_TX_EN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - enable USB endpoint 7 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep7_rx_en(&self) -> RB_UEP7_RX_EN_R {
                RB_UEP7_RX_EN_R::new(((self.bits >> 3) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - buffer mode of USB endpoint 7"]
            #[inline(always)]
            pub fn rb_uep7_buf_mod(&mut self) -> RB_UEP7_BUF_MOD_W {
                RB_UEP7_BUF_MOD_W { w: self }
            }
            #[doc = "Bit 2 - enable USB endpoint 7 transmittal (IN)"]
            #[inline(always)]
            pub fn rb_uep7_tx_en(&mut self) -> RB_UEP7_TX_EN_W {
                RB_UEP7_TX_EN_W { w: self }
            }
            #[doc = "Bit 3 - enable USB endpoint 7 receiving (OUT)"]
            #[inline(always)]
            pub fn rb_uep7_rx_en(&mut self) -> RB_UEP7_RX_EN_W {
                RB_UEP7_RX_EN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 7 mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep7_mod](index.html) module"]
        pub struct R8_UEP7_MOD_SPEC;
        impl crate::RegisterSpec for R8_UEP7_MOD_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep7_mod::R](R) reader structure"]
        impl crate::Readable for R8_UEP7_MOD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep7_mod::W](W) writer structure"]
        impl crate::Writable for R8_UEP7_MOD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP7_MOD to value 0"]
        impl crate::Resettable for R8_UEP7_MOD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP0_DMA register accessor: an alias for `Reg<R16_UEP0_DMA_SPEC>`"]
    pub type R16_UEP0_DMA = crate::Reg<r16_uep0_dma::R16_UEP0_DMA_SPEC>;
    #[doc = "endpoint 0 DMA buffer address"]
    pub mod r16_uep0_dma {
        #[doc = "Register `R16_UEP0_DMA` reader"]
        pub struct R(crate::R<R16_UEP0_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP0_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP0_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP0_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP0_DMA` writer"]
        pub struct W(crate::W<R16_UEP0_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP0_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP0_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP0_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 0 DMA buffer address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep0_dma](index.html) module"]
        pub struct R16_UEP0_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP0_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep0_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP0_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep0_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP0_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP0_DMA to value 0"]
        impl crate::Resettable for R16_UEP0_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP1_DMA register accessor: an alias for `Reg<R16_UEP1_DMA_SPEC>`"]
    pub type R16_UEP1_DMA = crate::Reg<r16_uep1_dma::R16_UEP1_DMA_SPEC>;
    #[doc = "endpoint 1 DMA buffer address"]
    pub mod r16_uep1_dma {
        #[doc = "Register `R16_UEP1_DMA` reader"]
        pub struct R(crate::R<R16_UEP1_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP1_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP1_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP1_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP1_DMA` writer"]
        pub struct W(crate::W<R16_UEP1_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP1_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP1_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP1_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 1 DMA buffer address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep1_dma](index.html) module"]
        pub struct R16_UEP1_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP1_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep1_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP1_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep1_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP1_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP1_DMA to value 0"]
        impl crate::Resettable for R16_UEP1_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP2_DMA__R16_UH_RX_DMA register accessor: an alias for `Reg<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>`"]
    pub type R16_UEP2_DMA__R16_UH_RX_DMA =
        crate::Reg<r16_uep2_dma__r16_uh_rx_dma::R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>;
    #[doc = "endpoint 2 DMA buffer address;host rx endpoint buffer high address"]
    pub mod r16_uep2_dma__r16_uh_rx_dma {
        #[doc = "Register `R16_UEP2_DMA__R16_UH_RX_DMA` reader"]
        pub struct R(crate::R<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP2_DMA__R16_UH_RX_DMA` writer"]
        pub struct W(crate::W<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP2_DMA__R16_UH_RX_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 2 DMA buffer address;host rx endpoint buffer high address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep2_dma__r16_uh_rx_dma](index.html) module"]
        pub struct R16_UEP2_DMA__R16_UH_RX_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP2_DMA__R16_UH_RX_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep2_dma__r16_uh_rx_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP2_DMA__R16_UH_RX_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep2_dma__r16_uh_rx_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP2_DMA__R16_UH_RX_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP2_DMA__R16_UH_RX_DMA to value 0"]
        impl crate::Resettable for R16_UEP2_DMA__R16_UH_RX_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP3_DMA__R16_UH_TX_DMA register accessor: an alias for `Reg<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>`"]
    pub type R16_UEP3_DMA__R16_UH_TX_DMA =
        crate::Reg<r16_uep3_dma__r16_uh_tx_dma::R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>;
    #[doc = "endpoint 3 DMA buffer address;host tx endpoint buffer high address"]
    pub mod r16_uep3_dma__r16_uh_tx_dma {
        #[doc = "Register `R16_UEP3_DMA__R16_UH_TX_DMA` reader"]
        pub struct R(crate::R<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP3_DMA__R16_UH_TX_DMA` writer"]
        pub struct W(crate::W<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP3_DMA__R16_UH_TX_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 3 DMA buffer address;host tx endpoint buffer high address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep3_dma__r16_uh_tx_dma](index.html) module"]
        pub struct R16_UEP3_DMA__R16_UH_TX_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP3_DMA__R16_UH_TX_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep3_dma__r16_uh_tx_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP3_DMA__R16_UH_TX_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep3_dma__r16_uh_tx_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP3_DMA__R16_UH_TX_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP3_DMA__R16_UH_TX_DMA to value 0"]
        impl crate::Resettable for R16_UEP3_DMA__R16_UH_TX_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP4_DMA register accessor: an alias for `Reg<R16_UEP4_DMA_SPEC>`"]
    pub type R16_UEP4_DMA = crate::Reg<r16_uep4_dma::R16_UEP4_DMA_SPEC>;
    #[doc = "endpoint 4 DMA buffer address"]
    pub mod r16_uep4_dma {
        #[doc = "Register `R16_UEP4_DMA` reader"]
        pub struct R(crate::R<R16_UEP4_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP4_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP4_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP4_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP4_DMA` writer"]
        pub struct W(crate::W<R16_UEP4_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP4_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP4_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP4_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 4 DMA buffer address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep4_dma](index.html) module"]
        pub struct R16_UEP4_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP4_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep4_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP4_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep4_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP4_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP4_DMA to value 0"]
        impl crate::Resettable for R16_UEP4_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP5_DMA register accessor: an alias for `Reg<R16_UEP5_DMA_SPEC>`"]
    pub type R16_UEP5_DMA = crate::Reg<r16_uep5_dma::R16_UEP5_DMA_SPEC>;
    #[doc = "endpoint 5 DMA buffer address"]
    pub mod r16_uep5_dma {
        #[doc = "Register `R16_UEP5_DMA` reader"]
        pub struct R(crate::R<R16_UEP5_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP5_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP5_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP5_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP5_DMA` writer"]
        pub struct W(crate::W<R16_UEP5_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP5_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP5_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP5_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 5 DMA buffer address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep5_dma](index.html) module"]
        pub struct R16_UEP5_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP5_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep5_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP5_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep5_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP5_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP5_DMA to value 0"]
        impl crate::Resettable for R16_UEP5_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP6_DMA register accessor: an alias for `Reg<R16_UEP6_DMA_SPEC>`"]
    pub type R16_UEP6_DMA = crate::Reg<r16_uep6_dma::R16_UEP6_DMA_SPEC>;
    #[doc = "endpoint 6 DMA buffer address"]
    pub mod r16_uep6_dma {
        #[doc = "Register `R16_UEP6_DMA` reader"]
        pub struct R(crate::R<R16_UEP6_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP6_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP6_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP6_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP6_DMA` writer"]
        pub struct W(crate::W<R16_UEP6_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP6_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP6_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP6_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 6 DMA buffer address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep6_dma](index.html) module"]
        pub struct R16_UEP6_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP6_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep6_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP6_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep6_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP6_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP6_DMA to value 0"]
        impl crate::Resettable for R16_UEP6_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP7_DMA register accessor: an alias for `Reg<R16_UEP7_DMA_SPEC>`"]
    pub type R16_UEP7_DMA = crate::Reg<r16_uep7_dma::R16_UEP7_DMA_SPEC>;
    #[doc = "endpoint 7 DMA buffer address"]
    pub mod r16_uep7_dma {
        #[doc = "Register `R16_UEP7_DMA` reader"]
        pub struct R(crate::R<R16_UEP7_DMA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP7_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP7_DMA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP7_DMA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP7_DMA` writer"]
        pub struct W(crate::W<R16_UEP7_DMA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP7_DMA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP7_DMA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP7_DMA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 7 DMA buffer address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep7_dma](index.html) module"]
        pub struct R16_UEP7_DMA_SPEC;
        impl crate::RegisterSpec for R16_UEP7_DMA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep7_dma::R](R) reader structure"]
        impl crate::Readable for R16_UEP7_DMA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep7_dma::W](W) writer structure"]
        impl crate::Writable for R16_UEP7_DMA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP7_DMA to value 0"]
        impl crate::Resettable for R16_UEP7_DMA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP0_T_LEN register accessor: an alias for `Reg<R16_UEP0_T_LEN_SPEC>`"]
    pub type R16_UEP0_T_LEN = crate::Reg<r16_uep0_t_len::R16_UEP0_T_LEN_SPEC>;
    #[doc = "endpoint 0 transmittal length"]
    pub mod r16_uep0_t_len {
        #[doc = "Register `R16_UEP0_T_LEN` reader"]
        pub struct R(crate::R<R16_UEP0_T_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP0_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP0_T_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP0_T_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP0_T_LEN` writer"]
        pub struct W(crate::W<R16_UEP0_T_LEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP0_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP0_T_LEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP0_T_LEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 0 transmittal length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep0_t_len](index.html) module"]
        pub struct R16_UEP0_T_LEN_SPEC;
        impl crate::RegisterSpec for R16_UEP0_T_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep0_t_len::R](R) reader structure"]
        impl crate::Readable for R16_UEP0_T_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep0_t_len::W](W) writer structure"]
        impl crate::Writable for R16_UEP0_T_LEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP0_T_LEN to value 0"]
        impl crate::Resettable for R16_UEP0_T_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP0_CTRL register accessor: an alias for `Reg<R8_UEP0_CTRL_SPEC>`"]
    pub type R8_UEP0_CTRL = crate::Reg<r8_uep0_ctrl::R8_UEP0_CTRL_SPEC>;
    #[doc = "endpoint 0 control"]
    pub mod r8_uep0_ctrl {
        #[doc = "Register `R8_UEP0_CTRL` reader"]
        pub struct R(crate::R<R8_UEP0_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP0_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP0_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP0_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP0_CTRL` writer"]
        pub struct W(crate::W<R8_UEP0_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP0_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP0_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP0_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&self) -> RB_UEP_AUTO_TOG_R {
                RB_UEP_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&self) -> RB_UEP_T_TOG_R {
                RB_UEP_T_TOG_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&self) -> RB_UEP_R_TOG_R {
                RB_UEP_R_TOG_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&mut self) -> RB_UEP_AUTO_TOG_W {
                RB_UEP_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&mut self) -> RB_UEP_T_TOG_W {
                RB_UEP_T_TOG_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&mut self) -> RB_UEP_R_TOG_W {
                RB_UEP_R_TOG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 0 control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep0_ctrl](index.html) module"]
        pub struct R8_UEP0_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UEP0_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep0_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UEP0_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep0_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UEP0_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP0_CTRL to value 0"]
        impl crate::Resettable for R8_UEP0_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP1_T_LEN register accessor: an alias for `Reg<R16_UEP1_T_LEN_SPEC>`"]
    pub type R16_UEP1_T_LEN = crate::Reg<r16_uep1_t_len::R16_UEP1_T_LEN_SPEC>;
    #[doc = "endpoint 1 transmittal length"]
    pub mod r16_uep1_t_len {
        #[doc = "Register `R16_UEP1_T_LEN` reader"]
        pub struct R(crate::R<R16_UEP1_T_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP1_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP1_T_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP1_T_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP1_T_LEN` writer"]
        pub struct W(crate::W<R16_UEP1_T_LEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP1_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP1_T_LEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP1_T_LEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 1 transmittal length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep1_t_len](index.html) module"]
        pub struct R16_UEP1_T_LEN_SPEC;
        impl crate::RegisterSpec for R16_UEP1_T_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep1_t_len::R](R) reader structure"]
        impl crate::Readable for R16_UEP1_T_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep1_t_len::W](W) writer structure"]
        impl crate::Writable for R16_UEP1_T_LEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP1_T_LEN to value 0"]
        impl crate::Resettable for R16_UEP1_T_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP1_CTRL__R8_UH_SETUP register accessor: an alias for `Reg<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>`"]
    pub type R8_UEP1_CTRL__R8_UH_SETUP =
        crate::Reg<r8_uep1_ctrl__r8_uh_setup::R8_UEP1_CTRL__R8_UH_SETUP_SPEC>;
    #[doc = "endpoint 1 control;host aux setup"]
    pub mod r8_uep1_ctrl__r8_uh_setup {
        #[doc = "Register `R8_UEP1_CTRL__R8_UH_SETUP` reader"]
        pub struct R(crate::R<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP1_CTRL__R8_UH_SETUP` writer"]
        pub struct W(crate::W<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP1_CTRL__R8_UH_SETUP_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG__RB_UH_SOF_EN` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1;USB host automatic SOF enable"]
        pub struct RB_UEP_T_TOG__RB_UH_SOF_EN_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG__RB_UH_SOF_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG__RB_UH_SOF_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG__RB_UH_SOF_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG__RB_UH_SOF_EN` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1;USB host automatic SOF enable"]
        pub struct RB_UEP_T_TOG__RB_UH_SOF_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG__RB_UH_SOF_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG__RB_UH_PRE_PID_EN` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;RB_UH_PRE_PID_EN;USB host PRE PID enable for low speed device via hub"]
        pub struct RB_UEP_R_TOG__RB_UH_PRE_PID_EN_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG__RB_UH_PRE_PID_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG__RB_UH_PRE_PID_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG__RB_UH_PRE_PID_EN_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG__RB_UH_PRE_PID_EN` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;RB_UH_PRE_PID_EN;USB host PRE PID enable for low speed device via hub"]
        pub struct RB_UEP_R_TOG__RB_UH_PRE_PID_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG__RB_UH_PRE_PID_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&self) -> RB_UEP_AUTO_TOG_R {
                RB_UEP_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1;USB host automatic SOF enable"]
            #[inline(always)]
            pub fn rb_uep_t_tog__rb_uh_sof_en(&self) -> RB_UEP_T_TOG__RB_UH_SOF_EN_R {
                RB_UEP_T_TOG__RB_UH_SOF_EN_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;RB_UH_PRE_PID_EN;USB host PRE PID enable for low speed device via hub"]
            #[inline(always)]
            pub fn rb_uep_r_tog__rb_uh_pre_pid_en(&self) -> RB_UEP_R_TOG__RB_UH_PRE_PID_EN_R {
                RB_UEP_R_TOG__RB_UH_PRE_PID_EN_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&mut self) -> RB_UEP_AUTO_TOG_W {
                RB_UEP_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1;USB host automatic SOF enable"]
            #[inline(always)]
            pub fn rb_uep_t_tog__rb_uh_sof_en(&mut self) -> RB_UEP_T_TOG__RB_UH_SOF_EN_W {
                RB_UEP_T_TOG__RB_UH_SOF_EN_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;RB_UH_PRE_PID_EN;USB host PRE PID enable for low speed device via hub"]
            #[inline(always)]
            pub fn rb_uep_r_tog__rb_uh_pre_pid_en(&mut self) -> RB_UEP_R_TOG__RB_UH_PRE_PID_EN_W {
                RB_UEP_R_TOG__RB_UH_PRE_PID_EN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 1 control;host aux setup\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep1_ctrl__r8_uh_setup](index.html) module"]
        pub struct R8_UEP1_CTRL__R8_UH_SETUP_SPEC;
        impl crate::RegisterSpec for R8_UEP1_CTRL__R8_UH_SETUP_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep1_ctrl__r8_uh_setup::R](R) reader structure"]
        impl crate::Readable for R8_UEP1_CTRL__R8_UH_SETUP_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep1_ctrl__r8_uh_setup::W](W) writer structure"]
        impl crate::Writable for R8_UEP1_CTRL__R8_UH_SETUP_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP1_CTRL__R8_UH_SETUP to value 0"]
        impl crate::Resettable for R8_UEP1_CTRL__R8_UH_SETUP_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP2_T_LEN__R8_UH_EP_PID register accessor: an alias for `Reg<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>`"]
    pub type R16_UEP2_T_LEN__R8_UH_EP_PID =
        crate::Reg<r16_uep2_t_len__r8_uh_ep_pid::R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>;
    #[doc = "endpoint 2 transmittal length;host endpoint and PID"]
    pub mod r16_uep2_t_len__r8_uh_ep_pid {
        #[doc = "Register `R16_UEP2_T_LEN__R8_UH_EP_PID` reader"]
        pub struct R(crate::R<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP2_T_LEN__R8_UH_EP_PID` writer"]
        pub struct W(crate::W<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UH_ENDP` reader - bit mask of endpoint number for USB host transfer"]
        pub struct MASK_UH_ENDP_R(crate::FieldReader<u8>);
        impl MASK_UH_ENDP_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UH_ENDP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UH_ENDP_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UH_ENDP` writer - bit mask of endpoint number for USB host transfer"]
        pub struct MASK_UH_ENDP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UH_ENDP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u16 & 0x0f);
                self.w
            }
        }
        #[doc = "Field `MASK_UH_TOKEN` reader - bit mask of token PID for USB host transfer"]
        pub struct MASK_UH_TOKEN_R(crate::FieldReader<u8>);
        impl MASK_UH_TOKEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UH_TOKEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UH_TOKEN_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UH_TOKEN` writer - bit mask of token PID for USB host transfer"]
        pub struct MASK_UH_TOKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UH_TOKEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | ((value as u16 & 0x0f) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - bit mask of endpoint number for USB host transfer"]
            #[inline(always)]
            pub fn mask_uh_endp(&self) -> MASK_UH_ENDP_R {
                MASK_UH_ENDP_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - bit mask of token PID for USB host transfer"]
            #[inline(always)]
            pub fn mask_uh_token(&self) -> MASK_UH_TOKEN_R {
                MASK_UH_TOKEN_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - bit mask of endpoint number for USB host transfer"]
            #[inline(always)]
            pub fn mask_uh_endp(&mut self) -> MASK_UH_ENDP_W {
                MASK_UH_ENDP_W { w: self }
            }
            #[doc = "Bits 4:7 - bit mask of token PID for USB host transfer"]
            #[inline(always)]
            pub fn mask_uh_token(&mut self) -> MASK_UH_TOKEN_W {
                MASK_UH_TOKEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 2 transmittal length;host endpoint and PID\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep2_t_len__r8_uh_ep_pid](index.html) module"]
        pub struct R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC;
        impl crate::RegisterSpec for R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep2_t_len__r8_uh_ep_pid::R](R) reader structure"]
        impl crate::Readable for R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep2_t_len__r8_uh_ep_pid::W](W) writer structure"]
        impl crate::Writable for R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP2_T_LEN__R8_UH_EP_PID to value 0"]
        impl crate::Resettable for R16_UEP2_T_LEN__R8_UH_EP_PID_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP2_CTRL__R8_UH_RX_CTRL register accessor: an alias for `Reg<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>`"]
    pub type R8_UEP2_CTRL__R8_UH_RX_CTRL =
        crate::Reg<r8_uep2_ctrl__r8_uh_rx_ctrl::R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>;
    #[doc = "endpoint 2 control;host receiver endpoint control"]
    pub mod r8_uep2_ctrl__r8_uh_rx_ctrl {
        #[doc = "Register `R8_UEP2_CTRL__R8_UH_RX_CTRL` reader"]
        pub struct R(crate::R<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP2_CTRL__R8_UH_RX_CTRL` writer"]
        pub struct W(crate::W<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle;enable automatic toggle after successful transfer completion: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle;enable automatic toggle after successful transfer completion: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG__RB_UH_R_TOG` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;expected data toggle flag of host receiving (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG__RB_UH_R_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG__RB_UH_R_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG__RB_UH_R_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG__RB_UH_R_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG__RB_UH_R_TOG` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;expected data toggle flag of host receiving (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG__RB_UH_R_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG__RB_UH_R_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle;enable automatic toggle after successful transfer completion: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog__rb_uh_r_auto_tog(&self) -> RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_R {
                RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&self) -> RB_UEP_T_TOG_R {
                RB_UEP_T_TOG_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;expected data toggle flag of host receiving (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog__rb_uh_r_tog(&self) -> RB_UEP_R_TOG__RB_UH_R_TOG_R {
                RB_UEP_R_TOG__RB_UH_R_TOG_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle;enable automatic toggle after successful transfer completion: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog__rb_uh_r_auto_tog(
                &mut self,
            ) -> RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_W {
                RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&mut self) -> RB_UEP_T_TOG_W {
                RB_UEP_T_TOG_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1;expected data toggle flag of host receiving (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog__rb_uh_r_tog(&mut self) -> RB_UEP_R_TOG__RB_UH_R_TOG_W {
                RB_UEP_R_TOG__RB_UH_R_TOG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 2 control;host receiver endpoint control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep2_ctrl__r8_uh_rx_ctrl](index.html) module"]
        pub struct R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep2_ctrl__r8_uh_rx_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep2_ctrl__r8_uh_rx_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP2_CTRL__R8_UH_RX_CTRL to value 0"]
        impl crate::Resettable for R8_UEP2_CTRL__R8_UH_RX_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP3_T_LEN__R16_UH_TX_LEN register accessor: an alias for `Reg<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>`"]
    pub type R16_UEP3_T_LEN__R16_UH_TX_LEN =
        crate::Reg<r16_uep3_t_len__r16_uh_tx_len::R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>;
    #[doc = "endpoint 3 transmittal length;host transmittal endpoint transmittal length"]
    pub mod r16_uep3_t_len__r16_uh_tx_len {
        #[doc = "Register `R16_UEP3_T_LEN__R16_UH_TX_LEN` reader"]
        pub struct R(crate::R<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP3_T_LEN__R16_UH_TX_LEN` writer"]
        pub struct W(crate::W<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 3 transmittal length;host transmittal endpoint transmittal length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep3_t_len__r16_uh_tx_len](index.html) module"]
        pub struct R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC;
        impl crate::RegisterSpec for R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep3_t_len__r16_uh_tx_len::R](R) reader structure"]
        impl crate::Readable for R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep3_t_len__r16_uh_tx_len::W](W) writer structure"]
        impl crate::Writable for R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP3_T_LEN__R16_UH_TX_LEN to value 0"]
        impl crate::Resettable for R16_UEP3_T_LEN__R16_UH_TX_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP3_CTRL__R8_UH_TX_CTRL register accessor: an alias for `Reg<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>`"]
    pub type R8_UEP3_CTRL__R8_UH_TX_CTRL =
        crate::Reg<r8_uep3_ctrl__r8_uh_tx_ctrl::R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>;
    #[doc = "endpoint 3 control;host transmittal endpoint control"]
    pub mod r8_uep3_ctrl__r8_uh_tx_ctrl {
        #[doc = "Register `R8_UEP3_CTRL__R8_UH_TX_CTRL` reader"]
        pub struct R(crate::R<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP3_CTRL__R8_UH_TX_CTRL` writer"]
        pub struct W(crate::W<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG__TB_UH_T_TOG` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG__TB_UH_T_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG__TB_UH_T_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG__TB_UH_T_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG__TB_UH_T_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG__TB_UH_T_TOG` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG__TB_UH_T_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG__TB_UH_T_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog__rb_uh_t_auto_tog(&self) -> RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_R {
                RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog__tb_uh_t_tog(&self) -> RB_UEP_T_TOG__TB_UH_T_TOG_R {
                RB_UEP_T_TOG__TB_UH_T_TOG_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&self) -> RB_UEP_R_TOG_R {
                RB_UEP_R_TOG_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog__rb_uh_t_auto_tog(
                &mut self,
            ) -> RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_W {
                RB_UEP_AUTO_TOG__RB_UH_T_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog__tb_uh_t_tog(&mut self) -> RB_UEP_T_TOG__TB_UH_T_TOG_W {
                RB_UEP_T_TOG__TB_UH_T_TOG_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&mut self) -> RB_UEP_R_TOG_W {
                RB_UEP_R_TOG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 3 control;host transmittal endpoint control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep3_ctrl__r8_uh_tx_ctrl](index.html) module"]
        pub struct R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep3_ctrl__r8_uh_tx_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep3_ctrl__r8_uh_tx_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP3_CTRL__R8_UH_TX_CTRL to value 0"]
        impl crate::Resettable for R8_UEP3_CTRL__R8_UH_TX_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP4_T_LEN register accessor: an alias for `Reg<R16_UEP4_T_LEN_SPEC>`"]
    pub type R16_UEP4_T_LEN = crate::Reg<r16_uep4_t_len::R16_UEP4_T_LEN_SPEC>;
    #[doc = "endpoint 4 transmittal length"]
    pub mod r16_uep4_t_len {
        #[doc = "Register `R16_UEP4_T_LEN` reader"]
        pub struct R(crate::R<R16_UEP4_T_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP4_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP4_T_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP4_T_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP4_T_LEN` writer"]
        pub struct W(crate::W<R16_UEP4_T_LEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP4_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP4_T_LEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP4_T_LEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 4 transmittal length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep4_t_len](index.html) module"]
        pub struct R16_UEP4_T_LEN_SPEC;
        impl crate::RegisterSpec for R16_UEP4_T_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep4_t_len::R](R) reader structure"]
        impl crate::Readable for R16_UEP4_T_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep4_t_len::W](W) writer structure"]
        impl crate::Writable for R16_UEP4_T_LEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP4_T_LEN to value 0"]
        impl crate::Resettable for R16_UEP4_T_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP4_CTRL register accessor: an alias for `Reg<R8_UEP4_CTRL_SPEC>`"]
    pub type R8_UEP4_CTRL = crate::Reg<r8_uep4_ctrl::R8_UEP4_CTRL_SPEC>;
    #[doc = "endpoint 4 control"]
    pub mod r8_uep4_ctrl {
        #[doc = "Register `R8_UEP4_CTRL` reader"]
        pub struct R(crate::R<R8_UEP4_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP4_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP4_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP4_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP4_CTRL` writer"]
        pub struct W(crate::W<R8_UEP4_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP4_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP4_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP4_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&self) -> RB_UEP_AUTO_TOG_R {
                RB_UEP_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&self) -> RB_UEP_T_TOG_R {
                RB_UEP_T_TOG_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&self) -> RB_UEP_R_TOG_R {
                RB_UEP_R_TOG_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&mut self) -> RB_UEP_AUTO_TOG_W {
                RB_UEP_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&mut self) -> RB_UEP_T_TOG_W {
                RB_UEP_T_TOG_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&mut self) -> RB_UEP_R_TOG_W {
                RB_UEP_R_TOG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 4 control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep4_ctrl](index.html) module"]
        pub struct R8_UEP4_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UEP4_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep4_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UEP4_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep4_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UEP4_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP4_CTRL to value 0"]
        impl crate::Resettable for R8_UEP4_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP5_T_LEN register accessor: an alias for `Reg<R16_UEP5_T_LEN_SPEC>`"]
    pub type R16_UEP5_T_LEN = crate::Reg<r16_uep5_t_len::R16_UEP5_T_LEN_SPEC>;
    #[doc = "endpoint 5 transmittal length"]
    pub mod r16_uep5_t_len {
        #[doc = "Register `R16_UEP5_T_LEN` reader"]
        pub struct R(crate::R<R16_UEP5_T_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP5_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP5_T_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP5_T_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP5_T_LEN` writer"]
        pub struct W(crate::W<R16_UEP5_T_LEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP5_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP5_T_LEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP5_T_LEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 5 transmittal length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep5_t_len](index.html) module"]
        pub struct R16_UEP5_T_LEN_SPEC;
        impl crate::RegisterSpec for R16_UEP5_T_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep5_t_len::R](R) reader structure"]
        impl crate::Readable for R16_UEP5_T_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep5_t_len::W](W) writer structure"]
        impl crate::Writable for R16_UEP5_T_LEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP5_T_LEN to value 0"]
        impl crate::Resettable for R16_UEP5_T_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP5_CTRL register accessor: an alias for `Reg<R8_UEP5_CTRL_SPEC>`"]
    pub type R8_UEP5_CTRL = crate::Reg<r8_uep5_ctrl::R8_UEP5_CTRL_SPEC>;
    #[doc = "endpoint 5 control"]
    pub mod r8_uep5_ctrl {
        #[doc = "Register `R8_UEP5_CTRL` reader"]
        pub struct R(crate::R<R8_UEP5_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP5_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP5_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP5_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP5_CTRL` writer"]
        pub struct W(crate::W<R8_UEP5_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP5_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP5_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP5_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&self) -> RB_UEP_AUTO_TOG_R {
                RB_UEP_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&self) -> RB_UEP_T_TOG_R {
                RB_UEP_T_TOG_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&self) -> RB_UEP_R_TOG_R {
                RB_UEP_R_TOG_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&mut self) -> RB_UEP_AUTO_TOG_W {
                RB_UEP_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&mut self) -> RB_UEP_T_TOG_W {
                RB_UEP_T_TOG_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&mut self) -> RB_UEP_R_TOG_W {
                RB_UEP_R_TOG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 5 control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep5_ctrl](index.html) module"]
        pub struct R8_UEP5_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UEP5_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep5_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UEP5_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep5_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UEP5_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP5_CTRL to value 0"]
        impl crate::Resettable for R8_UEP5_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP6_T_LEN register accessor: an alias for `Reg<R16_UEP6_T_LEN_SPEC>`"]
    pub type R16_UEP6_T_LEN = crate::Reg<r16_uep6_t_len::R16_UEP6_T_LEN_SPEC>;
    #[doc = "endpoint 6 transmittal length"]
    pub mod r16_uep6_t_len {
        #[doc = "Register `R16_UEP6_T_LEN` reader"]
        pub struct R(crate::R<R16_UEP6_T_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP6_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP6_T_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP6_T_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP6_T_LEN` writer"]
        pub struct W(crate::W<R16_UEP6_T_LEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP6_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP6_T_LEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP6_T_LEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 6 transmittal length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep6_t_len](index.html) module"]
        pub struct R16_UEP6_T_LEN_SPEC;
        impl crate::RegisterSpec for R16_UEP6_T_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep6_t_len::R](R) reader structure"]
        impl crate::Readable for R16_UEP6_T_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep6_t_len::W](W) writer structure"]
        impl crate::Writable for R16_UEP6_T_LEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP6_T_LEN to value 0"]
        impl crate::Resettable for R16_UEP6_T_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP6_CTRL register accessor: an alias for `Reg<R8_UEP6_CTRL_SPEC>`"]
    pub type R8_UEP6_CTRL = crate::Reg<r8_uep6_ctrl::R8_UEP6_CTRL_SPEC>;
    #[doc = "endpoint 6 control"]
    pub mod r8_uep6_ctrl {
        #[doc = "Register `R8_UEP6_CTRL` reader"]
        pub struct R(crate::R<R8_UEP6_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP6_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP6_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP6_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP6_CTRL` writer"]
        pub struct W(crate::W<R8_UEP6_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP6_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP6_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP6_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&self) -> RB_UEP_AUTO_TOG_R {
                RB_UEP_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&self) -> RB_UEP_T_TOG_R {
                RB_UEP_T_TOG_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&self) -> RB_UEP_R_TOG_R {
                RB_UEP_R_TOG_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&mut self) -> RB_UEP_AUTO_TOG_W {
                RB_UEP_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&mut self) -> RB_UEP_T_TOG_W {
                RB_UEP_T_TOG_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&mut self) -> RB_UEP_R_TOG_W {
                RB_UEP_R_TOG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 6 control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep6_ctrl](index.html) module"]
        pub struct R8_UEP6_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UEP6_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep6_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UEP6_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep6_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UEP6_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP6_CTRL to value 0"]
        impl crate::Resettable for R8_UEP6_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R16_UEP7_T_LEN register accessor: an alias for `Reg<R16_UEP7_T_LEN_SPEC>`"]
    pub type R16_UEP7_T_LEN = crate::Reg<r16_uep7_t_len::R16_UEP7_T_LEN_SPEC>;
    #[doc = "endpoint 7 transmittal length"]
    pub mod r16_uep7_t_len {
        #[doc = "Register `R16_UEP7_T_LEN` reader"]
        pub struct R(crate::R<R16_UEP7_T_LEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R16_UEP7_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R16_UEP7_T_LEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R16_UEP7_T_LEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R16_UEP7_T_LEN` writer"]
        pub struct W(crate::W<R16_UEP7_T_LEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R16_UEP7_T_LEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R16_UEP7_T_LEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R16_UEP7_T_LEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 7 transmittal length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r16_uep7_t_len](index.html) module"]
        pub struct R16_UEP7_T_LEN_SPEC;
        impl crate::RegisterSpec for R16_UEP7_T_LEN_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [r16_uep7_t_len::R](R) reader structure"]
        impl crate::Readable for R16_UEP7_T_LEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r16_uep7_t_len::W](W) writer structure"]
        impl crate::Writable for R16_UEP7_T_LEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R16_UEP7_T_LEN to value 0"]
        impl crate::Resettable for R16_UEP7_T_LEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "R8_UEP7_CTRL register accessor: an alias for `Reg<R8_UEP7_CTRL_SPEC>`"]
    pub type R8_UEP7_CTRL = crate::Reg<r8_uep7_ctrl::R8_UEP7_CTRL_SPEC>;
    #[doc = "endpoint 7 control"]
    pub mod r8_uep7_ctrl {
        #[doc = "Register `R8_UEP7_CTRL` reader"]
        pub struct R(crate::R<R8_UEP7_CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<R8_UEP7_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<R8_UEP7_CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<R8_UEP7_CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `R8_UEP7_CTRL` writer"]
        pub struct W(crate::W<R8_UEP7_CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<R8_UEP7_CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<R8_UEP7_CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<R8_UEP7_CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` reader - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_T_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_T_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_T_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_T_RES` writer - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
        pub struct MASK_UEP_T_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_T_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !3) | (value as u8 & 3);
                self.w
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` reader - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_R(crate::FieldReader<u8>);
        impl MASK_UEP_R_RES_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASK_UEP_R_RES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASK_UEP_R_RES_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASK_UEP_R_RES` writer - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
        pub struct MASK_UEP_R_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_UEP_R_RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(3 << 2)) | ((value as u8 & 3) << 2);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` reader - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_AUTO_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_AUTO_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_AUTO_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_AUTO_TOG` writer - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
        pub struct RB_UEP_AUTO_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_AUTO_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u8 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` reader - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_T_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_T_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_T_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_T_TOG` writer - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_T_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_T_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u8 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` reader - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_R(crate::FieldReader<bool>);
        impl RB_UEP_R_TOG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RB_UEP_R_TOG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RB_UEP_R_TOG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RB_UEP_R_TOG` writer - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
        pub struct RB_UEP_R_TOG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RB_UEP_R_TOG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u8 & 1) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&self) -> MASK_UEP_T_RES_R {
                MASK_UEP_T_RES_R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&self) -> MASK_UEP_R_RES_R {
                MASK_UEP_R_RES_R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&self) -> RB_UEP_AUTO_TOG_R {
                RB_UEP_AUTO_TOG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&self) -> RB_UEP_T_TOG_R {
                RB_UEP_T_TOG_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&self) -> RB_UEP_R_TOG_R {
                RB_UEP_R_TOG_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - bit mask of handshake response type for USB endpoint X transmittal (IN)"]
            #[inline(always)]
            pub fn mask_uep_t_res(&mut self) -> MASK_UEP_T_RES_W {
                MASK_UEP_T_RES_W { w: self }
            }
            #[doc = "Bits 2:3 - bit mask of handshake response type for USB endpoint X receiving (OUT)"]
            #[inline(always)]
            pub fn mask_uep_r_res(&mut self) -> MASK_UEP_R_RES_W {
                MASK_UEP_R_RES_W { w: self }
            }
            #[doc = "Bit 4 - enable automatic toggle after successful transfer completion on endpoint 1/2/3: 0=manual toggle, 1=automatic toggle"]
            #[inline(always)]
            pub fn rb_uep_auto_tog(&mut self) -> RB_UEP_AUTO_TOG_W {
                RB_UEP_AUTO_TOG_W { w: self }
            }
            #[doc = "Bit 6 - prepared data toggle flag of USB endpoint X transmittal (IN): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_t_tog(&mut self) -> RB_UEP_T_TOG_W {
                RB_UEP_T_TOG_W { w: self }
            }
            #[doc = "Bit 7 - expected data toggle flag of USB endpoint X receiving (OUT): 0=DATA0, 1=DATA1"]
            #[inline(always)]
            pub fn rb_uep_r_tog(&mut self) -> RB_UEP_R_TOG_W {
                RB_UEP_R_TOG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "endpoint 7 control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r8_uep7_ctrl](index.html) module"]
        pub struct R8_UEP7_CTRL_SPEC;
        impl crate::RegisterSpec for R8_UEP7_CTRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [r8_uep7_ctrl::R](R) reader structure"]
        impl crate::Readable for R8_UEP7_CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [r8_uep7_ctrl::W](W) writer structure"]
        impl crate::Writable for R8_UEP7_CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets R8_UEP7_CTRL to value 0"]
        impl crate::Resettable for R8_UEP7_CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "CRC calculation unit"]
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const crc::RegisterBlock = 0x4002_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
#[doc = "CRC calculation unit"]
pub mod crc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Data register"]
        pub datar: crate::Reg<datar::DATAR_SPEC>,
        #[doc = "0x04 - Independent Data register"]
        pub idatar: crate::Reg<idatar::IDATAR_SPEC>,
        #[doc = "0x08 - Control register"]
        pub ctlr: crate::Reg<ctlr::CTLR_SPEC>,
    }
    #[doc = "DATAR register accessor: an alias for `Reg<DATAR_SPEC>`"]
    pub type DATAR = crate::Reg<datar::DATAR_SPEC>;
    #[doc = "Data register"]
    pub mod datar {
        #[doc = "Register `DATAR` reader"]
        pub struct R(crate::R<DATAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATAR` writer"]
        pub struct W(crate::W<DATAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATAR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DR` reader - Data Register"]
        pub struct DR_R(crate::FieldReader<u32>);
        impl DR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                DR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DR_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DR` writer - Data Register"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Data Register"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data Register"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datar](index.html) module"]
        pub struct DATAR_SPEC;
        impl crate::RegisterSpec for DATAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [datar::R](R) reader structure"]
        impl crate::Readable for DATAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [datar::W](W) writer structure"]
        impl crate::Writable for DATAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATAR to value 0xffff_ffff"]
        impl crate::Resettable for DATAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xffff_ffff
            }
        }
    }
    #[doc = "IDATAR register accessor: an alias for `Reg<IDATAR_SPEC>`"]
    pub type IDATAR = crate::Reg<idatar::IDATAR_SPEC>;
    #[doc = "Independent Data register"]
    pub mod idatar {
        #[doc = "Register `IDATAR` reader"]
        pub struct R(crate::R<IDATAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IDATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IDATAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IDATAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IDATAR` writer"]
        pub struct W(crate::W<IDATAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IDATAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IDATAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IDATAR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IDR` reader - Independent Data register"]
        pub struct IDR_R(crate::FieldReader<u8>);
        impl IDR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IDR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IDR_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IDR` writer - Independent Data register"]
        pub struct IDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Independent Data register"]
            #[inline(always)]
            pub fn idr(&self) -> IDR_R {
                IDR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Independent Data register"]
            #[inline(always)]
            pub fn idr(&mut self) -> IDR_W {
                IDR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Independent Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idatar](index.html) module"]
        pub struct IDATAR_SPEC;
        impl crate::RegisterSpec for IDATAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [idatar::R](R) reader structure"]
        impl crate::Readable for IDATAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [idatar::W](W) writer structure"]
        impl crate::Writable for IDATAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IDATAR to value 0"]
        impl crate::Resettable for IDATAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR register accessor: an alias for `Reg<CTLR_SPEC>`"]
    pub type CTLR = crate::Reg<ctlr::CTLR_SPEC>;
    #[doc = "Control register"]
    pub mod ctlr {
        #[doc = "Register `CTLR` writer"]
        pub struct W(crate::W<CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RESET` writer - Reset bit"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Reset bit"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr](index.html) module"]
        pub struct CTLR_SPEC;
        impl crate::RegisterSpec for CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr::W](W) writer structure"]
        impl crate::Writable for CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR to value 0"]
        impl crate::Resettable for CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "FLASH"]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flash::RegisterBlock = 0x4002_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
#[doc = "FLASH"]
pub mod flash {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Flash access control register"]
        pub actlr: crate::Reg<actlr::ACTLR_SPEC>,
        #[doc = "0x04 - Flash key register"]
        pub keyr: crate::Reg<keyr::KEYR_SPEC>,
        #[doc = "0x08 - Flash option key register"]
        pub obkeyr: crate::Reg<obkeyr::OBKEYR_SPEC>,
        #[doc = "0x0c - Status register"]
        pub statr: crate::Reg<statr::STATR_SPEC>,
        #[doc = "0x10 - Control register"]
        pub ctlr: crate::Reg<ctlr::CTLR_SPEC>,
        #[doc = "0x14 - Flash address register"]
        pub addr: crate::Reg<addr::ADDR_SPEC>,
        _reserved6: [u8; 0x04],
        #[doc = "0x1c - Option byte register"]
        pub obr: crate::Reg<obr::OBR_SPEC>,
        #[doc = "0x20 - Write protection register"]
        pub wpr: crate::Reg<wpr::WPR_SPEC>,
        #[doc = "0x24 - Mode select register"]
        pub modekeyr: crate::Reg<modekeyr::MODEKEYR_SPEC>,
    }
    #[doc = "ACTLR register accessor: an alias for `Reg<ACTLR_SPEC>`"]
    pub type ACTLR = crate::Reg<actlr::ACTLR_SPEC>;
    #[doc = "Flash access control register"]
    pub mod actlr {
        #[doc = "Register `ACTLR` reader"]
        pub struct R(crate::R<ACTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ACTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ACTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ACTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ACTLR` writer"]
        pub struct W(crate::W<ACTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ACTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ACTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ACTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LATENCY` reader - Latency"]
        pub struct LATENCY_R(crate::FieldReader<u8>);
        impl LATENCY_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                LATENCY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LATENCY_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LATENCY` writer - Latency"]
        pub struct LATENCY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LATENCY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !7) | (value as u32 & 7);
                self.w
            }
        }
        #[doc = "Field `PRFTBE` reader - Prefetch buffer enable"]
        pub struct PRFTBE_R(crate::FieldReader<bool>);
        impl PRFTBE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PRFTBE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PRFTBE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PRFTBE` writer - Prefetch buffer enable"]
        pub struct PRFTBE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRFTBE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `PRFTBS` reader - Prefetch buffer status"]
        pub struct PRFTBS_R(crate::FieldReader<bool>);
        impl PRFTBS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PRFTBS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PRFTBS_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Latency"]
            #[inline(always)]
            pub fn latency(&self) -> LATENCY_R {
                LATENCY_R::new((self.bits & 7) as u8)
            }
            #[doc = "Bit 4 - Prefetch buffer enable"]
            #[inline(always)]
            pub fn prftbe(&self) -> PRFTBE_R {
                PRFTBE_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Prefetch buffer status"]
            #[inline(always)]
            pub fn prftbs(&self) -> PRFTBS_R {
                PRFTBS_R::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Latency"]
            #[inline(always)]
            pub fn latency(&mut self) -> LATENCY_W {
                LATENCY_W { w: self }
            }
            #[doc = "Bit 4 - Prefetch buffer enable"]
            #[inline(always)]
            pub fn prftbe(&mut self) -> PRFTBE_W {
                PRFTBE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Flash access control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [actlr](index.html) module"]
        pub struct ACTLR_SPEC;
        impl crate::RegisterSpec for ACTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [actlr::R](R) reader structure"]
        impl crate::Readable for ACTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [actlr::W](W) writer structure"]
        impl crate::Writable for ACTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ACTLR to value 0x30"]
        impl crate::Resettable for ACTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x30
            }
        }
    }
    #[doc = "KEYR register accessor: an alias for `Reg<KEYR_SPEC>`"]
    pub type KEYR = crate::Reg<keyr::KEYR_SPEC>;
    #[doc = "Flash key register"]
    pub mod keyr {
        #[doc = "Register `KEYR` writer"]
        pub struct W(crate::W<KEYR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<KEYR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<KEYR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<KEYR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `KEYR` writer - FPEC key"]
        pub struct KEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FPEC key"]
            #[inline(always)]
            pub fn keyr(&mut self) -> KEYR_W {
                KEYR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Flash key register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyr](index.html) module"]
        pub struct KEYR_SPEC;
        impl crate::RegisterSpec for KEYR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [keyr::W](W) writer structure"]
        impl crate::Writable for KEYR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets KEYR to value 0"]
        impl crate::Resettable for KEYR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "OBKEYR register accessor: an alias for `Reg<OBKEYR_SPEC>`"]
    pub type OBKEYR = crate::Reg<obkeyr::OBKEYR_SPEC>;
    #[doc = "Flash option key register"]
    pub mod obkeyr {
        #[doc = "Register `OBKEYR` writer"]
        pub struct W(crate::W<OBKEYR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<OBKEYR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<OBKEYR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<OBKEYR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OPTKEY` writer - Option byte key"]
        pub struct OPTKEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTKEY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Option byte key"]
            #[inline(always)]
            pub fn optkey(&mut self) -> OPTKEY_W {
                OPTKEY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Flash option key register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [obkeyr](index.html) module"]
        pub struct OBKEYR_SPEC;
        impl crate::RegisterSpec for OBKEYR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [obkeyr::W](W) writer structure"]
        impl crate::Writable for OBKEYR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets OBKEYR to value 0"]
        impl crate::Resettable for OBKEYR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STATR register accessor: an alias for `Reg<STATR_SPEC>`"]
    pub type STATR = crate::Reg<statr::STATR_SPEC>;
    #[doc = "Status register"]
    pub mod statr {
        #[doc = "Register `STATR` reader"]
        pub struct R(crate::R<STATR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STATR` writer"]
        pub struct W(crate::W<STATR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STATR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STATR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STATR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EOP` reader - End of operation"]
        pub struct EOP_R(crate::FieldReader<bool>);
        impl EOP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EOP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EOP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EOP` writer - End of operation"]
        pub struct EOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `WRPRTERR` reader - Write protection error"]
        pub struct WRPRTERR_R(crate::FieldReader<bool>);
        impl WRPRTERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WRPRTERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRPRTERR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WRPRTERR` writer - Write protection error"]
        pub struct WRPRTERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRPRTERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `BSY` reader - Busy"]
        pub struct BSY_R(crate::FieldReader<bool>);
        impl BSY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BSY_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 5 - End of operation"]
            #[inline(always)]
            pub fn eop(&self) -> EOP_R {
                EOP_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - Write protection error"]
            #[inline(always)]
            pub fn wrprterr(&self) -> WRPRTERR_R {
                WRPRTERR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 0 - Busy"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - End of operation"]
            #[inline(always)]
            pub fn eop(&mut self) -> EOP_W {
                EOP_W { w: self }
            }
            #[doc = "Bit 4 - Write protection error"]
            #[inline(always)]
            pub fn wrprterr(&mut self) -> WRPRTERR_W {
                WRPRTERR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [statr](index.html) module"]
        pub struct STATR_SPEC;
        impl crate::RegisterSpec for STATR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [statr::R](R) reader structure"]
        impl crate::Readable for STATR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [statr::W](W) writer structure"]
        impl crate::Writable for STATR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STATR to value 0"]
        impl crate::Resettable for STATR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CTLR register accessor: an alias for `Reg<CTLR_SPEC>`"]
    pub type CTLR = crate::Reg<ctlr::CTLR_SPEC>;
    #[doc = "Control register"]
    pub mod ctlr {
        #[doc = "Register `CTLR` reader"]
        pub struct R(crate::R<CTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTLR` writer"]
        pub struct W(crate::W<CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PG` reader - Programming"]
        pub struct PG_R(crate::FieldReader<bool>);
        impl PG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PG` writer - Programming"]
        pub struct PG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `PER` reader - Page Erase"]
        pub struct PER_R(crate::FieldReader<bool>);
        impl PER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PER_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PER` writer - Page Erase"]
        pub struct PER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `MER` reader - Mass Erase"]
        pub struct MER_R(crate::FieldReader<bool>);
        impl MER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MER_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MER` writer - Mass Erase"]
        pub struct MER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `OBPG` reader - Option byte programming"]
        pub struct OBPG_R(crate::FieldReader<bool>);
        impl OBPG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OBPG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OBPG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OBPG` writer - Option byte programming"]
        pub struct OBPG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBPG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `OBER` reader - Option byte erase"]
        pub struct OBER_R(crate::FieldReader<bool>);
        impl OBER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OBER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OBER_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OBER` writer - Option byte erase"]
        pub struct OBER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `STRT` reader - Start"]
        pub struct STRT_R(crate::FieldReader<bool>);
        impl STRT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STRT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STRT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STRT` writer - Start"]
        pub struct STRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `LOCK` reader - Lock"]
        pub struct LOCK_R(crate::FieldReader<bool>);
        impl LOCK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LOCK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LOCK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LOCK` writer - Lock"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `OBWRE` reader - Option bytes write enable"]
        pub struct OBWRE_R(crate::FieldReader<bool>);
        impl OBWRE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OBWRE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OBWRE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OBWRE` writer - Option bytes write enable"]
        pub struct OBWRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBWRE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 9)) | ((value as u32 & 1) << 9);
                self.w
            }
        }
        #[doc = "Field `ERRIE` reader - Error interrupt enable"]
        pub struct ERRIE_R(crate::FieldReader<bool>);
        impl ERRIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ERRIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ERRIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ERRIE` writer - Error interrupt enable"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 10)) | ((value as u32 & 1) << 10);
                self.w
            }
        }
        #[doc = "Field `EOPIE` reader - End of operation interrupt enable"]
        pub struct EOPIE_R(crate::FieldReader<bool>);
        impl EOPIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EOPIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EOPIE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EOPIE` writer - End of operation interrupt enable"]
        pub struct EOPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 12)) | ((value as u32 & 1) << 12);
                self.w
            }
        }
        #[doc = "Field `FLOCK` reader - Fast programmable lock"]
        pub struct FLOCK_R(crate::FieldReader<bool>);
        impl FLOCK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FLOCK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FLOCK_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FLOCK` writer - Fast programmable lock"]
        pub struct FLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 15)) | ((value as u32 & 1) << 15);
                self.w
            }
        }
        #[doc = "Field `FTPG` reader - Fast programming"]
        pub struct FTPG_R(crate::FieldReader<bool>);
        impl FTPG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FTPG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FTPG_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FTPG` writer - Fast programming"]
        pub struct FTPG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTPG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 16)) | ((value as u32 & 1) << 16);
                self.w
            }
        }
        #[doc = "Field `FTER` reader - Fast erase"]
        pub struct FTER_R(crate::FieldReader<bool>);
        impl FTER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FTER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FTER_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FTER` writer - Fast erase"]
        pub struct FTER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 17)) | ((value as u32 & 1) << 17);
                self.w
            }
        }
        #[doc = "Field `BUFLOAD` reader - Buffer load"]
        pub struct BUFLOAD_R(crate::FieldReader<bool>);
        impl BUFLOAD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUFLOAD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUFLOAD_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUFLOAD` writer - Buffer load"]
        pub struct BUFLOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUFLOAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 18)) | ((value as u32 & 1) << 18);
                self.w
            }
        }
        #[doc = "Field `BUFRST` reader - Buffer reset"]
        pub struct BUFRST_R(crate::FieldReader<bool>);
        impl BUFRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUFRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUFRST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUFRST` writer - Buffer reset"]
        pub struct BUFRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUFRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 19)) | ((value as u32 & 1) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Programming"]
            #[inline(always)]
            pub fn pg(&self) -> PG_R {
                PG_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Page Erase"]
            #[inline(always)]
            pub fn per(&self) -> PER_R {
                PER_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Mass Erase"]
            #[inline(always)]
            pub fn mer(&self) -> MER_R {
                MER_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - Option byte programming"]
            #[inline(always)]
            pub fn obpg(&self) -> OBPG_R {
                OBPG_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Option byte erase"]
            #[inline(always)]
            pub fn ober(&self) -> OBER_R {
                OBER_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Start"]
            #[inline(always)]
            pub fn strt(&self) -> STRT_R {
                STRT_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Lock"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 9 - Option bytes write enable"]
            #[inline(always)]
            pub fn obwre(&self) -> OBWRE_R {
                OBWRE_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 12 - End of operation interrupt enable"]
            #[inline(always)]
            pub fn eopie(&self) -> EOPIE_R {
                EOPIE_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 15 - Fast programmable lock"]
            #[inline(always)]
            pub fn flock(&self) -> FLOCK_R {
                FLOCK_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Fast programming"]
            #[inline(always)]
            pub fn ftpg(&self) -> FTPG_R {
                FTPG_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Fast erase"]
            #[inline(always)]
            pub fn fter(&self) -> FTER_R {
                FTER_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Buffer load"]
            #[inline(always)]
            pub fn bufload(&self) -> BUFLOAD_R {
                BUFLOAD_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Buffer reset"]
            #[inline(always)]
            pub fn bufrst(&self) -> BUFRST_R {
                BUFRST_R::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Programming"]
            #[inline(always)]
            pub fn pg(&mut self) -> PG_W {
                PG_W { w: self }
            }
            #[doc = "Bit 1 - Page Erase"]
            #[inline(always)]
            pub fn per(&mut self) -> PER_W {
                PER_W { w: self }
            }
            #[doc = "Bit 2 - Mass Erase"]
            #[inline(always)]
            pub fn mer(&mut self) -> MER_W {
                MER_W { w: self }
            }
            #[doc = "Bit 4 - Option byte programming"]
            #[inline(always)]
            pub fn obpg(&mut self) -> OBPG_W {
                OBPG_W { w: self }
            }
            #[doc = "Bit 5 - Option byte erase"]
            #[inline(always)]
            pub fn ober(&mut self) -> OBER_W {
                OBER_W { w: self }
            }
            #[doc = "Bit 6 - Start"]
            #[inline(always)]
            pub fn strt(&mut self) -> STRT_W {
                STRT_W { w: self }
            }
            #[doc = "Bit 7 - Lock"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bit 9 - Option bytes write enable"]
            #[inline(always)]
            pub fn obwre(&mut self) -> OBWRE_W {
                OBWRE_W { w: self }
            }
            #[doc = "Bit 10 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 12 - End of operation interrupt enable"]
            #[inline(always)]
            pub fn eopie(&mut self) -> EOPIE_W {
                EOPIE_W { w: self }
            }
            #[doc = "Bit 15 - Fast programmable lock"]
            #[inline(always)]
            pub fn flock(&mut self) -> FLOCK_W {
                FLOCK_W { w: self }
            }
            #[doc = "Bit 16 - Fast programming"]
            #[inline(always)]
            pub fn ftpg(&mut self) -> FTPG_W {
                FTPG_W { w: self }
            }
            #[doc = "Bit 17 - Fast erase"]
            #[inline(always)]
            pub fn fter(&mut self) -> FTER_W {
                FTER_W { w: self }
            }
            #[doc = "Bit 18 - Buffer load"]
            #[inline(always)]
            pub fn bufload(&mut self) -> BUFLOAD_W {
                BUFLOAD_W { w: self }
            }
            #[doc = "Bit 19 - Buffer reset"]
            #[inline(always)]
            pub fn bufrst(&mut self) -> BUFRST_W {
                BUFRST_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctlr](index.html) module"]
        pub struct CTLR_SPEC;
        impl crate::RegisterSpec for CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctlr::R](R) reader structure"]
        impl crate::Readable for CTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctlr::W](W) writer structure"]
        impl crate::Writable for CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTLR to value 0x80"]
        impl crate::Resettable for CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x80
            }
        }
    }
    #[doc = "ADDR register accessor: an alias for `Reg<ADDR_SPEC>`"]
    pub type ADDR = crate::Reg<addr::ADDR_SPEC>;
    #[doc = "Flash address register"]
    pub mod addr {
        #[doc = "Register `ADDR` writer"]
        pub struct W(crate::W<ADDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADDR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `FAR` writer - Flash Address"]
        pub struct FAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Flash Address"]
            #[inline(always)]
            pub fn far(&mut self) -> FAR_W {
                FAR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Flash address register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [addr](index.html) module"]
        pub struct ADDR_SPEC;
        impl crate::RegisterSpec for ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [addr::W](W) writer structure"]
        impl crate::Writable for ADDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADDR to value 0"]
        impl crate::Resettable for ADDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "OBR register accessor: an alias for `Reg<OBR_SPEC>`"]
    pub type OBR = crate::Reg<obr::OBR_SPEC>;
    #[doc = "Option byte register"]
    pub mod obr {
        #[doc = "Register `OBR` reader"]
        pub struct R(crate::R<OBR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<OBR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<OBR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<OBR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `OBERR` reader - Option byte error"]
        pub struct OBERR_R(crate::FieldReader<bool>);
        impl OBERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OBERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OBERR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RDPRT` reader - Read protection"]
        pub struct RDPRT_R(crate::FieldReader<bool>);
        impl RDPRT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RDPRT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RDPRT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IWDG_SW` reader - IWDG_SW"]
        pub struct IWDG_SW_R(crate::FieldReader<bool>);
        impl IWDG_SW_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IWDG_SW_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IWDG_SW_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STOP_RST` reader - STOP_RST"]
        pub struct STOP_RST_R(crate::FieldReader<bool>);
        impl STOP_RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STOP_RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STOP_RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STANDY_RST` reader - STANDY_RST"]
        pub struct STANDY_RST_R(crate::FieldReader<bool>);
        impl STANDY_RST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STANDY_RST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STANDY_RST_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBD_MODE` reader - USBD_MODE"]
        pub struct USBD_MODE_R(crate::FieldReader<bool>);
        impl USBD_MODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBD_MODE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBD_MODE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBD_PU` reader - USBD_PU"]
        pub struct USBD_PU_R(crate::FieldReader<bool>);
        impl USBD_PU_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBD_PU_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBD_PU_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POR_CTR` reader - POR_CTR"]
        pub struct POR_CTR_R(crate::FieldReader<bool>);
        impl POR_CTR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POR_CTR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POR_CTR_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Option byte error"]
            #[inline(always)]
            pub fn oberr(&self) -> OBERR_R {
                OBERR_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Read protection"]
            #[inline(always)]
            pub fn rdprt(&self) -> RDPRT_R {
                RDPRT_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - IWDG_SW"]
            #[inline(always)]
            pub fn iwdg_sw(&self) -> IWDG_SW_R {
                IWDG_SW_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - STOP_RST"]
            #[inline(always)]
            pub fn stop_rst(&self) -> STOP_RST_R {
                STOP_RST_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - STANDY_RST"]
            #[inline(always)]
            pub fn standy_rst(&self) -> STANDY_RST_R {
                STANDY_RST_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - USBD_MODE"]
            #[inline(always)]
            pub fn usbd_mode(&self) -> USBD_MODE_R {
                USBD_MODE_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - USBD_PU"]
            #[inline(always)]
            pub fn usbd_pu(&self) -> USBD_PU_R {
                USBD_PU_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - POR_CTR"]
            #[inline(always)]
            pub fn por_ctr(&self) -> POR_CTR_R {
                POR_CTR_R::new(((self.bits >> 7) & 1) != 0)
            }
        }
        #[doc = "Option byte register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [obr](index.html) module"]
        pub struct OBR_SPEC;
        impl crate::RegisterSpec for OBR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [obr::R](R) reader structure"]
        impl crate::Readable for OBR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets OBR to value 0x03ff_fffc"]
        impl crate::Resettable for OBR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x03ff_fffc
            }
        }
    }
    #[doc = "WPR register accessor: an alias for `Reg<WPR_SPEC>`"]
    pub type WPR = crate::Reg<wpr::WPR_SPEC>;
    #[doc = "Write protection register"]
    pub mod wpr {
        #[doc = "Register `WPR` reader"]
        pub struct R(crate::R<WPR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WPR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WPR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WPR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `WRP` reader - Write protect"]
        pub struct WRP_R(crate::FieldReader<u32>);
        impl WRP_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                WRP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRP_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Write protect"]
            #[inline(always)]
            pub fn wrp(&self) -> WRP_R {
                WRP_R::new(self.bits)
            }
        }
        #[doc = "Write protection register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wpr](index.html) module"]
        pub struct WPR_SPEC;
        impl crate::RegisterSpec for WPR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wpr::R](R) reader structure"]
        impl crate::Readable for WPR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets WPR to value 0xffff_ffff"]
        impl crate::Resettable for WPR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xffff_ffff
            }
        }
    }
    #[doc = "MODEKEYR register accessor: an alias for `Reg<MODEKEYR_SPEC>`"]
    pub type MODEKEYR = crate::Reg<modekeyr::MODEKEYR_SPEC>;
    #[doc = "Mode select register"]
    pub mod modekeyr {
        #[doc = "Register `MODEKEYR` writer"]
        pub struct W(crate::W<MODEKEYR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MODEKEYR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MODEKEYR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MODEKEYR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MODEKEYR` writer - Mode select"]
        pub struct MODEKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODEKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Mode select"]
            #[inline(always)]
            pub fn modekeyr(&mut self) -> MODEKEYR_W {
                MODEKEYR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Mode select register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [modekeyr](index.html) module"]
        pub struct MODEKEYR_SPEC;
        impl crate::RegisterSpec for MODEKEYR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [modekeyr::W](W) writer structure"]
        impl crate::Writable for MODEKEYR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MODEKEYR to value 0"]
        impl crate::Resettable for MODEKEYR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Programmable Fast Interrupt Controller"]
pub struct PFIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PFIC {}
impl PFIC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pfic::RegisterBlock = 0xe000_e000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pfic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PFIC {
    type Target = pfic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PFIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PFIC").finish()
    }
}
#[doc = "Programmable Fast Interrupt Controller"]
pub mod pfic {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Interrupt Status Register"]
        pub isr1: crate::Reg<isr1::ISR1_SPEC>,
        #[doc = "0x04 - Interrupt Status Register"]
        pub isr2: crate::Reg<isr2::ISR2_SPEC>,
        _reserved2: [u8; 0x18],
        #[doc = "0x20 - Interrupt Pending Register"]
        pub ipr1: crate::Reg<ipr1::IPR1_SPEC>,
        #[doc = "0x24 - Interrupt Pending Register"]
        pub ipr2: crate::Reg<ipr2::IPR2_SPEC>,
        _reserved4: [u8; 0x18],
        #[doc = "0x40 - Interrupt Priority Register"]
        pub ithresdr: crate::Reg<ithresdr::ITHRESDR_SPEC>,
        #[doc = "0x44 - Interrupt Fast Address Register"]
        pub fibaddrr: crate::Reg<fibaddrr::FIBADDRR_SPEC>,
        #[doc = "0x48 - Interrupt Config Register"]
        pub cfgr: crate::Reg<cfgr::CFGR_SPEC>,
        #[doc = "0x4c - Interrupt Global Register"]
        pub gisr: crate::Reg<gisr::GISR_SPEC>,
        _reserved8: [u8; 0x10],
        #[doc = "0x60 - Interrupt 0 address Register"]
        pub fifoaddrr0: crate::Reg<fifoaddrr0::FIFOADDRR0_SPEC>,
        #[doc = "0x64 - Interrupt 1 address Register"]
        pub fifoaddrr1: crate::Reg<fifoaddrr1::FIFOADDRR1_SPEC>,
        #[doc = "0x68 - Interrupt 2 address Register"]
        pub fifoaddrr2: crate::Reg<fifoaddrr2::FIFOADDRR2_SPEC>,
        #[doc = "0x6c - Interrupt 3 address Register"]
        pub fifoaddrr3: crate::Reg<fifoaddrr3::FIFOADDRR3_SPEC>,
        _reserved12: [u8; 0x90],
        #[doc = "0x100 - Interrupt Setting Register"]
        pub ienr1: crate::Reg<ienr1::IENR1_SPEC>,
        #[doc = "0x104 - Interrupt Setting Register"]
        pub ienr2: crate::Reg<ienr2::IENR2_SPEC>,
        _reserved14: [u8; 0x78],
        #[doc = "0x180 - Interrupt Clear Register"]
        pub irer1: crate::Reg<irer1::IRER1_SPEC>,
        #[doc = "0x184 - Interrupt Clear Register"]
        pub irer2: crate::Reg<irer2::IRER2_SPEC>,
        _reserved16: [u8; 0x78],
        #[doc = "0x200 - Interrupt Pending Register"]
        pub ipsr1: crate::Reg<ipsr1::IPSR1_SPEC>,
        #[doc = "0x204 - Interrupt Pending Register"]
        pub ipsr2: crate::Reg<ipsr2::IPSR2_SPEC>,
        _reserved18: [u8; 0x78],
        #[doc = "0x280 - Interrupt Pending Clear Register"]
        pub iprr1: crate::Reg<iprr1::IPRR1_SPEC>,
        #[doc = "0x284 - Interrupt Pending Clear Register"]
        pub iprr2: crate::Reg<iprr2::IPRR2_SPEC>,
        _reserved20: [u8; 0x78],
        #[doc = "0x300 - Interrupt ACTIVE Register"]
        pub iactr1: crate::Reg<iactr1::IACTR1_SPEC>,
        #[doc = "0x304 - Interrupt ACTIVE Register"]
        pub iactr2: crate::Reg<iactr2::IACTR2_SPEC>,
        _reserved22: [u8; 0x0a08],
        #[doc = "0xd10 - System Control Register"]
        pub sctlr: crate::Reg<sctlr::SCTLR_SPEC>,
        _reserved23: [u8; 0x02ec],
        #[doc = "0x1000 - System counter control register"]
        pub stk_ctlr: crate::Reg<stk_ctlr::STK_CTLR_SPEC>,
        #[doc = "0x1004 - System counter low register"]
        pub stk_cntl: crate::Reg<stk_cntl::STK_CNTL_SPEC>,
        #[doc = "0x1008 - System counter high register"]
        pub stk_cnth: crate::Reg<stk_cnth::STK_CNTH_SPEC>,
        #[doc = "0x100c - System compare low register"]
        pub stk_cmplr: crate::Reg<stk_cmplr::STK_CMPLR_SPEC>,
        #[doc = "0x1010 - System compare high register"]
        pub stk_cmphr: crate::Reg<stk_cmphr::STK_CMPHR_SPEC>,
    }
    #[doc = "ISR1 register accessor: an alias for `Reg<ISR1_SPEC>`"]
    pub type ISR1 = crate::Reg<isr1::ISR1_SPEC>;
    #[doc = "Interrupt Status Register"]
    pub mod isr1 {
        #[doc = "Register `ISR1` reader"]
        pub struct R(crate::R<ISR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ISR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ISR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ISR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `INTS` reader - Interrupt ID Status"]
        pub struct INTS_R(crate::FieldReader<u32>);
        impl INTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                INTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTS_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Interrupt ID Status"]
            #[inline(always)]
            pub fn ints(&self) -> INTS_R {
                INTS_R::new(self.bits)
            }
        }
        #[doc = "Interrupt Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr1](index.html) module"]
        pub struct ISR1_SPEC;
        impl crate::RegisterSpec for ISR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [isr1::R](R) reader structure"]
        impl crate::Readable for ISR1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets ISR1 to value 0"]
        impl crate::Resettable for ISR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ISR2 register accessor: an alias for `Reg<ISR2_SPEC>`"]
    pub type ISR2 = crate::Reg<isr2::ISR2_SPEC>;
    #[doc = "Interrupt Status Register"]
    pub mod isr2 {
        #[doc = "Register `ISR2` reader"]
        pub struct R(crate::R<ISR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ISR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ISR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ISR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `INTS` reader - Interrupt ID Status"]
        pub struct INTS_R(crate::FieldReader<u32>);
        impl INTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                INTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTS_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Interrupt ID Status"]
            #[inline(always)]
            pub fn ints(&self) -> INTS_R {
                INTS_R::new(self.bits)
            }
        }
        #[doc = "Interrupt Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr2](index.html) module"]
        pub struct ISR2_SPEC;
        impl crate::RegisterSpec for ISR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [isr2::R](R) reader structure"]
        impl crate::Readable for ISR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets ISR2 to value 0"]
        impl crate::Resettable for ISR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPR1 register accessor: an alias for `Reg<IPR1_SPEC>`"]
    pub type IPR1 = crate::Reg<ipr1::IPR1_SPEC>;
    #[doc = "Interrupt Pending Register"]
    pub mod ipr1 {
        #[doc = "Register `IPR1` reader"]
        pub struct R(crate::R<IPR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PENDSTA` reader - PENDSTA"]
        pub struct PENDSTA_R(crate::FieldReader<u32>);
        impl PENDSTA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PENDSTA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDSTA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PENDSTA"]
            #[inline(always)]
            pub fn pendsta(&self) -> PENDSTA_R {
                PENDSTA_R::new(self.bits)
            }
        }
        #[doc = "Interrupt Pending Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ipr1](index.html) module"]
        pub struct IPR1_SPEC;
        impl crate::RegisterSpec for IPR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ipr1::R](R) reader structure"]
        impl crate::Readable for IPR1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets IPR1 to value 0"]
        impl crate::Resettable for IPR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPR2 register accessor: an alias for `Reg<IPR2_SPEC>`"]
    pub type IPR2 = crate::Reg<ipr2::IPR2_SPEC>;
    #[doc = "Interrupt Pending Register"]
    pub mod ipr2 {
        #[doc = "Register `IPR2` reader"]
        pub struct R(crate::R<IPR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PENDSTA` reader - PENDSTA"]
        pub struct PENDSTA_R(crate::FieldReader<u32>);
        impl PENDSTA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PENDSTA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDSTA_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PENDSTA"]
            #[inline(always)]
            pub fn pendsta(&self) -> PENDSTA_R {
                PENDSTA_R::new(self.bits)
            }
        }
        #[doc = "Interrupt Pending Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ipr2](index.html) module"]
        pub struct IPR2_SPEC;
        impl crate::RegisterSpec for IPR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ipr2::R](R) reader structure"]
        impl crate::Readable for IPR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets IPR2 to value 0"]
        impl crate::Resettable for IPR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ITHRESDR register accessor: an alias for `Reg<ITHRESDR_SPEC>`"]
    pub type ITHRESDR = crate::Reg<ithresdr::ITHRESDR_SPEC>;
    #[doc = "Interrupt Priority Register"]
    pub mod ithresdr {
        #[doc = "Register `ITHRESDR` reader"]
        pub struct R(crate::R<ITHRESDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ITHRESDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ITHRESDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ITHRESDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ITHRESDR` writer"]
        pub struct W(crate::W<ITHRESDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ITHRESDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ITHRESDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ITHRESDR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `THRESHOLD` reader - THRESHOLD"]
        pub struct THRESHOLD_R(crate::FieldReader<u8>);
        impl THRESHOLD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                THRESHOLD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for THRESHOLD_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `THRESHOLD` writer - THRESHOLD"]
        pub struct THRESHOLD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> THRESHOLD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - THRESHOLD"]
            #[inline(always)]
            pub fn threshold(&self) -> THRESHOLD_R {
                THRESHOLD_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - THRESHOLD"]
            #[inline(always)]
            pub fn threshold(&mut self) -> THRESHOLD_W {
                THRESHOLD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Priority Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ithresdr](index.html) module"]
        pub struct ITHRESDR_SPEC;
        impl crate::RegisterSpec for ITHRESDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ithresdr::R](R) reader structure"]
        impl crate::Readable for ITHRESDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ithresdr::W](W) writer structure"]
        impl crate::Writable for ITHRESDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ITHRESDR to value 0"]
        impl crate::Resettable for ITHRESDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIBADDRR register accessor: an alias for `Reg<FIBADDRR_SPEC>`"]
    pub type FIBADDRR = crate::Reg<fibaddrr::FIBADDRR_SPEC>;
    #[doc = "Interrupt Fast Address Register"]
    pub mod fibaddrr {
        #[doc = "Register `FIBADDRR` reader"]
        pub struct R(crate::R<FIBADDRR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIBADDRR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIBADDRR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIBADDRR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIBADDRR` writer"]
        pub struct W(crate::W<FIBADDRR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIBADDRR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIBADDRR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIBADDRR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BASEADDR` reader - BASEADDR"]
        pub struct BASEADDR_R(crate::FieldReader<u8>);
        impl BASEADDR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                BASEADDR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BASEADDR_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BASEADDR` writer - BASEADDR"]
        pub struct BASEADDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BASEADDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | ((value as u32 & 0x0f) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - BASEADDR"]
            #[inline(always)]
            pub fn baseaddr(&self) -> BASEADDR_R {
                BASEADDR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - BASEADDR"]
            #[inline(always)]
            pub fn baseaddr(&mut self) -> BASEADDR_W {
                BASEADDR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Fast Address Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fibaddrr](index.html) module"]
        pub struct FIBADDRR_SPEC;
        impl crate::RegisterSpec for FIBADDRR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fibaddrr::R](R) reader structure"]
        impl crate::Readable for FIBADDRR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fibaddrr::W](W) writer structure"]
        impl crate::Writable for FIBADDRR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIBADDRR to value 0"]
        impl crate::Resettable for FIBADDRR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CFGR register accessor: an alias for `Reg<CFGR_SPEC>`"]
    pub type CFGR = crate::Reg<cfgr::CFGR_SPEC>;
    #[doc = "Interrupt Config Register"]
    pub mod cfgr {
        #[doc = "Register `CFGR` reader"]
        pub struct R(crate::R<CFGR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CFGR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CFGR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CFGR` writer"]
        pub struct W(crate::W<CFGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CFGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CFGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CFGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HWSTKCTRL` reader - HWSTKCTRL"]
        pub struct HWSTKCTRL_R(crate::FieldReader<bool>);
        impl HWSTKCTRL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HWSTKCTRL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HWSTKCTRL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HWSTKCTRL` writer - HWSTKCTRL"]
        pub struct HWSTKCTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWSTKCTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        #[doc = "Field `NESTCTRL` reader - NESTCTRL"]
        pub struct NESTCTRL_R(crate::FieldReader<bool>);
        impl NESTCTRL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NESTCTRL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NESTCTRL_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NESTCTRL` writer - NESTCTRL"]
        pub struct NESTCTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NESTCTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `NMISET` writer - NMISET"]
        pub struct NMISET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NMISET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `NMIRESET` writer - NMIRESET"]
        pub struct NMIRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NMIRESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `EXCSET` writer - EXCSET"]
        pub struct EXCSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXCSET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `EXCRESET` writer - EXCRESET"]
        pub struct EXCRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXCRESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        #[doc = "Field `PFICRSET` writer - PFICRSET"]
        pub struct PFICRSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PFICRSET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 6)) | ((value as u32 & 1) << 6);
                self.w
            }
        }
        #[doc = "Field `SYSRESET` writer - SYSRESET"]
        pub struct SYSRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSRESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 7)) | ((value as u32 & 1) << 7);
                self.w
            }
        }
        #[doc = "Field `KEYCODE` writer - KEYCODE"]
        pub struct KEYCODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYCODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - HWSTKCTRL"]
            #[inline(always)]
            pub fn hwstkctrl(&self) -> HWSTKCTRL_R {
                HWSTKCTRL_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - NESTCTRL"]
            #[inline(always)]
            pub fn nestctrl(&self) -> NESTCTRL_R {
                NESTCTRL_R::new(((self.bits >> 1) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - HWSTKCTRL"]
            #[inline(always)]
            pub fn hwstkctrl(&mut self) -> HWSTKCTRL_W {
                HWSTKCTRL_W { w: self }
            }
            #[doc = "Bit 1 - NESTCTRL"]
            #[inline(always)]
            pub fn nestctrl(&mut self) -> NESTCTRL_W {
                NESTCTRL_W { w: self }
            }
            #[doc = "Bit 2 - NMISET"]
            #[inline(always)]
            pub fn nmiset(&mut self) -> NMISET_W {
                NMISET_W { w: self }
            }
            #[doc = "Bit 3 - NMIRESET"]
            #[inline(always)]
            pub fn nmireset(&mut self) -> NMIRESET_W {
                NMIRESET_W { w: self }
            }
            #[doc = "Bit 4 - EXCSET"]
            #[inline(always)]
            pub fn excset(&mut self) -> EXCSET_W {
                EXCSET_W { w: self }
            }
            #[doc = "Bit 5 - EXCRESET"]
            #[inline(always)]
            pub fn excreset(&mut self) -> EXCRESET_W {
                EXCRESET_W { w: self }
            }
            #[doc = "Bit 6 - PFICRSET"]
            #[inline(always)]
            pub fn pficrset(&mut self) -> PFICRSET_W {
                PFICRSET_W { w: self }
            }
            #[doc = "Bit 7 - SYSRESET"]
            #[inline(always)]
            pub fn sysreset(&mut self) -> SYSRESET_W {
                SYSRESET_W { w: self }
            }
            #[doc = "Bits 16:31 - KEYCODE"]
            #[inline(always)]
            pub fn keycode(&mut self) -> KEYCODE_W {
                KEYCODE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Config Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](index.html) module"]
        pub struct CFGR_SPEC;
        impl crate::RegisterSpec for CFGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cfgr::R](R) reader structure"]
        impl crate::Readable for CFGR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cfgr::W](W) writer structure"]
        impl crate::Writable for CFGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CFGR to value 0"]
        impl crate::Resettable for CFGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GISR register accessor: an alias for `Reg<GISR_SPEC>`"]
    pub type GISR = crate::Reg<gisr::GISR_SPEC>;
    #[doc = "Interrupt Global Register"]
    pub mod gisr {
        #[doc = "Register `GISR` reader"]
        pub struct R(crate::R<GISR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GISR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GISR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GISR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `NESTSTA` reader - NESTSTA"]
        pub struct NESTSTA_R(crate::FieldReader<u8>);
        impl NESTSTA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                NESTSTA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NESTSTA_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GACTSTA` reader - GACTSTA"]
        pub struct GACTSTA_R(crate::FieldReader<bool>);
        impl GACTSTA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GACTSTA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GACTSTA_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPENDSTA` reader - GPENDSTA"]
        pub struct GPENDSTA_R(crate::FieldReader<bool>);
        impl GPENDSTA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPENDSTA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPENDSTA_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:7 - NESTSTA"]
            #[inline(always)]
            pub fn neststa(&self) -> NESTSTA_R {
                NESTSTA_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - GACTSTA"]
            #[inline(always)]
            pub fn gactsta(&self) -> GACTSTA_R {
                GACTSTA_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - GPENDSTA"]
            #[inline(always)]
            pub fn gpendsta(&self) -> GPENDSTA_R {
                GPENDSTA_R::new(((self.bits >> 9) & 1) != 0)
            }
        }
        #[doc = "Interrupt Global Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gisr](index.html) module"]
        pub struct GISR_SPEC;
        impl crate::RegisterSpec for GISR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gisr::R](R) reader structure"]
        impl crate::Readable for GISR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GISR to value 0"]
        impl crate::Resettable for GISR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIFOADDRR0 register accessor: an alias for `Reg<FIFOADDRR0_SPEC>`"]
    pub type FIFOADDRR0 = crate::Reg<fifoaddrr0::FIFOADDRR0_SPEC>;
    #[doc = "Interrupt 0 address Register"]
    pub mod fifoaddrr0 {
        #[doc = "Register `FIFOADDRR0` reader"]
        pub struct R(crate::R<FIFOADDRR0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIFOADDRR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIFOADDRR0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIFOADDRR0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIFOADDRR0` writer"]
        pub struct W(crate::W<FIFOADDRR0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIFOADDRR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIFOADDRR0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIFOADDRR0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OFFADDR0` reader - OFFADDR0"]
        pub struct OFFADDR0_R(crate::FieldReader<u32>);
        impl OFFADDR0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                OFFADDR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OFFADDR0_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OFFADDR0` writer - OFFADDR0"]
        pub struct OFFADDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OFFADDR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | (value as u32 & 0x00ff_ffff);
                self.w
            }
        }
        #[doc = "Field `IRQID0` reader - IRQID0"]
        pub struct IRQID0_R(crate::FieldReader<u8>);
        impl IRQID0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IRQID0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IRQID0_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IRQID0` writer - IRQID0"]
        pub struct IRQID0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQID0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - OFFADDR0"]
            #[inline(always)]
            pub fn offaddr0(&self) -> OFFADDR0_R {
                OFFADDR0_R::new((self.bits & 0x00ff_ffff) as u32)
            }
            #[doc = "Bits 24:31 - IRQID0"]
            #[inline(always)]
            pub fn irqid0(&self) -> IRQID0_R {
                IRQID0_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - OFFADDR0"]
            #[inline(always)]
            pub fn offaddr0(&mut self) -> OFFADDR0_W {
                OFFADDR0_W { w: self }
            }
            #[doc = "Bits 24:31 - IRQID0"]
            #[inline(always)]
            pub fn irqid0(&mut self) -> IRQID0_W {
                IRQID0_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt 0 address Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifoaddrr0](index.html) module"]
        pub struct FIFOADDRR0_SPEC;
        impl crate::RegisterSpec for FIFOADDRR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fifoaddrr0::R](R) reader structure"]
        impl crate::Readable for FIFOADDRR0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fifoaddrr0::W](W) writer structure"]
        impl crate::Writable for FIFOADDRR0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIFOADDRR0 to value 0"]
        impl crate::Resettable for FIFOADDRR0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIFOADDRR1 register accessor: an alias for `Reg<FIFOADDRR1_SPEC>`"]
    pub type FIFOADDRR1 = crate::Reg<fifoaddrr1::FIFOADDRR1_SPEC>;
    #[doc = "Interrupt 1 address Register"]
    pub mod fifoaddrr1 {
        #[doc = "Register `FIFOADDRR1` reader"]
        pub struct R(crate::R<FIFOADDRR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIFOADDRR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIFOADDRR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIFOADDRR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIFOADDRR1` writer"]
        pub struct W(crate::W<FIFOADDRR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIFOADDRR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIFOADDRR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIFOADDRR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OFFADDR1` reader - OFFADDR1"]
        pub struct OFFADDR1_R(crate::FieldReader<u32>);
        impl OFFADDR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                OFFADDR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OFFADDR1_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OFFADDR1` writer - OFFADDR1"]
        pub struct OFFADDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OFFADDR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | (value as u32 & 0x00ff_ffff);
                self.w
            }
        }
        #[doc = "Field `IRQID1` reader - IRQID1"]
        pub struct IRQID1_R(crate::FieldReader<u8>);
        impl IRQID1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IRQID1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IRQID1_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IRQID1` writer - IRQID1"]
        pub struct IRQID1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQID1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - OFFADDR1"]
            #[inline(always)]
            pub fn offaddr1(&self) -> OFFADDR1_R {
                OFFADDR1_R::new((self.bits & 0x00ff_ffff) as u32)
            }
            #[doc = "Bits 24:31 - IRQID1"]
            #[inline(always)]
            pub fn irqid1(&self) -> IRQID1_R {
                IRQID1_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - OFFADDR1"]
            #[inline(always)]
            pub fn offaddr1(&mut self) -> OFFADDR1_W {
                OFFADDR1_W { w: self }
            }
            #[doc = "Bits 24:31 - IRQID1"]
            #[inline(always)]
            pub fn irqid1(&mut self) -> IRQID1_W {
                IRQID1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt 1 address Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifoaddrr1](index.html) module"]
        pub struct FIFOADDRR1_SPEC;
        impl crate::RegisterSpec for FIFOADDRR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fifoaddrr1::R](R) reader structure"]
        impl crate::Readable for FIFOADDRR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fifoaddrr1::W](W) writer structure"]
        impl crate::Writable for FIFOADDRR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIFOADDRR1 to value 0"]
        impl crate::Resettable for FIFOADDRR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIFOADDRR2 register accessor: an alias for `Reg<FIFOADDRR2_SPEC>`"]
    pub type FIFOADDRR2 = crate::Reg<fifoaddrr2::FIFOADDRR2_SPEC>;
    #[doc = "Interrupt 2 address Register"]
    pub mod fifoaddrr2 {
        #[doc = "Register `FIFOADDRR2` reader"]
        pub struct R(crate::R<FIFOADDRR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIFOADDRR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIFOADDRR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIFOADDRR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIFOADDRR2` writer"]
        pub struct W(crate::W<FIFOADDRR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIFOADDRR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIFOADDRR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIFOADDRR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OFFADDR2` reader - OFFADDR2"]
        pub struct OFFADDR2_R(crate::FieldReader<u32>);
        impl OFFADDR2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                OFFADDR2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OFFADDR2_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OFFADDR2` writer - OFFADDR2"]
        pub struct OFFADDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OFFADDR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | (value as u32 & 0x00ff_ffff);
                self.w
            }
        }
        #[doc = "Field `IRQID2` reader - IRQID2"]
        pub struct IRQID2_R(crate::FieldReader<u8>);
        impl IRQID2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IRQID2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IRQID2_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IRQID2` writer - IRQID2"]
        pub struct IRQID2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQID2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - OFFADDR2"]
            #[inline(always)]
            pub fn offaddr2(&self) -> OFFADDR2_R {
                OFFADDR2_R::new((self.bits & 0x00ff_ffff) as u32)
            }
            #[doc = "Bits 24:31 - IRQID2"]
            #[inline(always)]
            pub fn irqid2(&self) -> IRQID2_R {
                IRQID2_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - OFFADDR2"]
            #[inline(always)]
            pub fn offaddr2(&mut self) -> OFFADDR2_W {
                OFFADDR2_W { w: self }
            }
            #[doc = "Bits 24:31 - IRQID2"]
            #[inline(always)]
            pub fn irqid2(&mut self) -> IRQID2_W {
                IRQID2_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt 2 address Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifoaddrr2](index.html) module"]
        pub struct FIFOADDRR2_SPEC;
        impl crate::RegisterSpec for FIFOADDRR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fifoaddrr2::R](R) reader structure"]
        impl crate::Readable for FIFOADDRR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fifoaddrr2::W](W) writer structure"]
        impl crate::Writable for FIFOADDRR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIFOADDRR2 to value 0"]
        impl crate::Resettable for FIFOADDRR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIFOADDRR3 register accessor: an alias for `Reg<FIFOADDRR3_SPEC>`"]
    pub type FIFOADDRR3 = crate::Reg<fifoaddrr3::FIFOADDRR3_SPEC>;
    #[doc = "Interrupt 3 address Register"]
    pub mod fifoaddrr3 {
        #[doc = "Register `FIFOADDRR3` reader"]
        pub struct R(crate::R<FIFOADDRR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIFOADDRR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIFOADDRR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIFOADDRR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIFOADDRR3` writer"]
        pub struct W(crate::W<FIFOADDRR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIFOADDRR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIFOADDRR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIFOADDRR3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `OFFADDR3` reader - OFFADDR3"]
        pub struct OFFADDR3_R(crate::FieldReader<u32>);
        impl OFFADDR3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                OFFADDR3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OFFADDR3_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OFFADDR3` writer - OFFADDR3"]
        pub struct OFFADDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OFFADDR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | (value as u32 & 0x00ff_ffff);
                self.w
            }
        }
        #[doc = "Field `IRQID3` reader - IRQID3"]
        pub struct IRQID3_R(crate::FieldReader<u8>);
        impl IRQID3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                IRQID3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IRQID3_R {
            type Target = crate::FieldReader<u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IRQID3` writer - IRQID3"]
        pub struct IRQID3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQID3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - OFFADDR3"]
            #[inline(always)]
            pub fn offaddr3(&self) -> OFFADDR3_R {
                OFFADDR3_R::new((self.bits & 0x00ff_ffff) as u32)
            }
            #[doc = "Bits 24:31 - IRQID3"]
            #[inline(always)]
            pub fn irqid3(&self) -> IRQID3_R {
                IRQID3_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - OFFADDR3"]
            #[inline(always)]
            pub fn offaddr3(&mut self) -> OFFADDR3_W {
                OFFADDR3_W { w: self }
            }
            #[doc = "Bits 24:31 - IRQID3"]
            #[inline(always)]
            pub fn irqid3(&mut self) -> IRQID3_W {
                IRQID3_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt 3 address Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifoaddrr3](index.html) module"]
        pub struct FIFOADDRR3_SPEC;
        impl crate::RegisterSpec for FIFOADDRR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fifoaddrr3::R](R) reader structure"]
        impl crate::Readable for FIFOADDRR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fifoaddrr3::W](W) writer structure"]
        impl crate::Writable for FIFOADDRR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIFOADDRR3 to value 0"]
        impl crate::Resettable for FIFOADDRR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IENR1 register accessor: an alias for `Reg<IENR1_SPEC>`"]
    pub type IENR1 = crate::Reg<ienr1::IENR1_SPEC>;
    #[doc = "Interrupt Setting Register"]
    pub mod ienr1 {
        #[doc = "Register `IENR1` reader"]
        pub struct R(crate::R<IENR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IENR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IENR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IENR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IENR1` writer"]
        pub struct W(crate::W<IENR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IENR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IENR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IENR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INTEN` reader - INTEN"]
        pub struct INTEN_R(crate::FieldReader<u32>);
        impl INTEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                INTEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTEN_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTEN` writer - INTEN"]
        pub struct INTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - INTEN"]
            #[inline(always)]
            pub fn inten(&self) -> INTEN_R {
                INTEN_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - INTEN"]
            #[inline(always)]
            pub fn inten(&mut self) -> INTEN_W {
                INTEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Setting Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ienr1](index.html) module"]
        pub struct IENR1_SPEC;
        impl crate::RegisterSpec for IENR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ienr1::R](R) reader structure"]
        impl crate::Readable for IENR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ienr1::W](W) writer structure"]
        impl crate::Writable for IENR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IENR1 to value 0"]
        impl crate::Resettable for IENR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IENR2 register accessor: an alias for `Reg<IENR2_SPEC>`"]
    pub type IENR2 = crate::Reg<ienr2::IENR2_SPEC>;
    #[doc = "Interrupt Setting Register"]
    pub mod ienr2 {
        #[doc = "Register `IENR2` reader"]
        pub struct R(crate::R<IENR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IENR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IENR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IENR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IENR2` writer"]
        pub struct W(crate::W<IENR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IENR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IENR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IENR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INTEN` reader - INTEN"]
        pub struct INTEN_R(crate::FieldReader<u32>);
        impl INTEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                INTEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTEN_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTEN` writer - INTEN"]
        pub struct INTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff_ffff) | (value as u32 & 0x0fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:27 - INTEN"]
            #[inline(always)]
            pub fn inten(&self) -> INTEN_R {
                INTEN_R::new((self.bits & 0x0fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:27 - INTEN"]
            #[inline(always)]
            pub fn inten(&mut self) -> INTEN_W {
                INTEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Setting Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ienr2](index.html) module"]
        pub struct IENR2_SPEC;
        impl crate::RegisterSpec for IENR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ienr2::R](R) reader structure"]
        impl crate::Readable for IENR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ienr2::W](W) writer structure"]
        impl crate::Writable for IENR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IENR2 to value 0"]
        impl crate::Resettable for IENR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IRER1 register accessor: an alias for `Reg<IRER1_SPEC>`"]
    pub type IRER1 = crate::Reg<irer1::IRER1_SPEC>;
    #[doc = "Interrupt Clear Register"]
    pub mod irer1 {
        #[doc = "Register `IRER1` reader"]
        pub struct R(crate::R<IRER1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IRER1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IRER1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IRER1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IRER1` writer"]
        pub struct W(crate::W<IRER1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IRER1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IRER1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IRER1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INTRSET` reader - INTRSET"]
        pub struct INTRSET_R(crate::FieldReader<u32>);
        impl INTRSET_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                INTRSET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTRSET_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTRSET` writer - INTRSET"]
        pub struct INTRSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTRSET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - INTRSET"]
            #[inline(always)]
            pub fn intrset(&self) -> INTRSET_R {
                INTRSET_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - INTRSET"]
            #[inline(always)]
            pub fn intrset(&mut self) -> INTRSET_W {
                INTRSET_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Clear Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irer1](index.html) module"]
        pub struct IRER1_SPEC;
        impl crate::RegisterSpec for IRER1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [irer1::R](R) reader structure"]
        impl crate::Readable for IRER1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [irer1::W](W) writer structure"]
        impl crate::Writable for IRER1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IRER1 to value 0"]
        impl crate::Resettable for IRER1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IRER2 register accessor: an alias for `Reg<IRER2_SPEC>`"]
    pub type IRER2 = crate::Reg<irer2::IRER2_SPEC>;
    #[doc = "Interrupt Clear Register"]
    pub mod irer2 {
        #[doc = "Register `IRER2` reader"]
        pub struct R(crate::R<IRER2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IRER2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IRER2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IRER2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IRER2` writer"]
        pub struct W(crate::W<IRER2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IRER2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IRER2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IRER2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INTRSET` reader - INTRSET"]
        pub struct INTRSET_R(crate::FieldReader<u32>);
        impl INTRSET_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                INTRSET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTRSET_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTRSET` writer - INTRSET"]
        pub struct INTRSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTRSET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff_ffff) | (value as u32 & 0x0fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:27 - INTRSET"]
            #[inline(always)]
            pub fn intrset(&self) -> INTRSET_R {
                INTRSET_R::new((self.bits & 0x0fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:27 - INTRSET"]
            #[inline(always)]
            pub fn intrset(&mut self) -> INTRSET_W {
                INTRSET_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Clear Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irer2](index.html) module"]
        pub struct IRER2_SPEC;
        impl crate::RegisterSpec for IRER2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [irer2::R](R) reader structure"]
        impl crate::Readable for IRER2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [irer2::W](W) writer structure"]
        impl crate::Writable for IRER2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IRER2 to value 0"]
        impl crate::Resettable for IRER2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPSR1 register accessor: an alias for `Reg<IPSR1_SPEC>`"]
    pub type IPSR1 = crate::Reg<ipsr1::IPSR1_SPEC>;
    #[doc = "Interrupt Pending Register"]
    pub mod ipsr1 {
        #[doc = "Register `IPSR1` reader"]
        pub struct R(crate::R<IPSR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPSR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPSR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPSR1` writer"]
        pub struct W(crate::W<IPSR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPSR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPSR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PENDSET` reader - PENDSET"]
        pub struct PENDSET_R(crate::FieldReader<u32>);
        impl PENDSET_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PENDSET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDSET_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENDSET` writer - PENDSET"]
        pub struct PENDSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PENDSET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PENDSET"]
            #[inline(always)]
            pub fn pendset(&self) -> PENDSET_R {
                PENDSET_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - PENDSET"]
            #[inline(always)]
            pub fn pendset(&mut self) -> PENDSET_W {
                PENDSET_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Pending Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ipsr1](index.html) module"]
        pub struct IPSR1_SPEC;
        impl crate::RegisterSpec for IPSR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ipsr1::R](R) reader structure"]
        impl crate::Readable for IPSR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ipsr1::W](W) writer structure"]
        impl crate::Writable for IPSR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPSR1 to value 0"]
        impl crate::Resettable for IPSR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPSR2 register accessor: an alias for `Reg<IPSR2_SPEC>`"]
    pub type IPSR2 = crate::Reg<ipsr2::IPSR2_SPEC>;
    #[doc = "Interrupt Pending Register"]
    pub mod ipsr2 {
        #[doc = "Register `IPSR2` reader"]
        pub struct R(crate::R<IPSR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPSR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPSR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPSR2` writer"]
        pub struct W(crate::W<IPSR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPSR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPSR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PENDSET` reader - PENDSET"]
        pub struct PENDSET_R(crate::FieldReader<u32>);
        impl PENDSET_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PENDSET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDSET_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENDSET` writer - PENDSET"]
        pub struct PENDSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PENDSET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff_ffff) | (value as u32 & 0x0fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:27 - PENDSET"]
            #[inline(always)]
            pub fn pendset(&self) -> PENDSET_R {
                PENDSET_R::new((self.bits & 0x0fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:27 - PENDSET"]
            #[inline(always)]
            pub fn pendset(&mut self) -> PENDSET_W {
                PENDSET_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Pending Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ipsr2](index.html) module"]
        pub struct IPSR2_SPEC;
        impl crate::RegisterSpec for IPSR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ipsr2::R](R) reader structure"]
        impl crate::Readable for IPSR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ipsr2::W](W) writer structure"]
        impl crate::Writable for IPSR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPSR2 to value 0"]
        impl crate::Resettable for IPSR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPRR1 register accessor: an alias for `Reg<IPRR1_SPEC>`"]
    pub type IPRR1 = crate::Reg<iprr1::IPRR1_SPEC>;
    #[doc = "Interrupt Pending Clear Register"]
    pub mod iprr1 {
        #[doc = "Register `IPRR1` reader"]
        pub struct R(crate::R<IPRR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPRR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPRR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPRR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPRR1` writer"]
        pub struct W(crate::W<IPRR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPRR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPRR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPRR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PENDRESET` reader - PENDRESET"]
        pub struct PENDRESET_R(crate::FieldReader<u32>);
        impl PENDRESET_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PENDRESET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDRESET_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENDRESET` writer - PENDRESET"]
        pub struct PENDRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PENDRESET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PENDRESET"]
            #[inline(always)]
            pub fn pendreset(&self) -> PENDRESET_R {
                PENDRESET_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - PENDRESET"]
            #[inline(always)]
            pub fn pendreset(&mut self) -> PENDRESET_W {
                PENDRESET_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Pending Clear Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iprr1](index.html) module"]
        pub struct IPRR1_SPEC;
        impl crate::RegisterSpec for IPRR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iprr1::R](R) reader structure"]
        impl crate::Readable for IPRR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iprr1::W](W) writer structure"]
        impl crate::Writable for IPRR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPRR1 to value 0"]
        impl crate::Resettable for IPRR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPRR2 register accessor: an alias for `Reg<IPRR2_SPEC>`"]
    pub type IPRR2 = crate::Reg<iprr2::IPRR2_SPEC>;
    #[doc = "Interrupt Pending Clear Register"]
    pub mod iprr2 {
        #[doc = "Register `IPRR2` reader"]
        pub struct R(crate::R<IPRR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPRR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPRR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPRR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPRR2` writer"]
        pub struct W(crate::W<IPRR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPRR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPRR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPRR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PENDRESET` reader - PENDRESET"]
        pub struct PENDRESET_R(crate::FieldReader<u32>);
        impl PENDRESET_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PENDRESET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDRESET_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENDRESET` writer - PENDRESET"]
        pub struct PENDRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PENDRESET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff_ffff) | (value as u32 & 0x0fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:27 - PENDRESET"]
            #[inline(always)]
            pub fn pendreset(&self) -> PENDRESET_R {
                PENDRESET_R::new((self.bits & 0x0fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:27 - PENDRESET"]
            #[inline(always)]
            pub fn pendreset(&mut self) -> PENDRESET_W {
                PENDRESET_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Pending Clear Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iprr2](index.html) module"]
        pub struct IPRR2_SPEC;
        impl crate::RegisterSpec for IPRR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iprr2::R](R) reader structure"]
        impl crate::Readable for IPRR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iprr2::W](W) writer structure"]
        impl crate::Writable for IPRR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPRR2 to value 0"]
        impl crate::Resettable for IPRR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IACTR1 register accessor: an alias for `Reg<IACTR1_SPEC>`"]
    pub type IACTR1 = crate::Reg<iactr1::IACTR1_SPEC>;
    #[doc = "Interrupt ACTIVE Register"]
    pub mod iactr1 {
        #[doc = "Register `IACTR1` reader"]
        pub struct R(crate::R<IACTR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IACTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IACTR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IACTR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IACTR1` writer"]
        pub struct W(crate::W<IACTR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IACTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IACTR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IACTR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IACTS` reader - IACTS"]
        pub struct IACTS_R(crate::FieldReader<u32>);
        impl IACTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                IACTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IACTS_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IACTS` writer - IACTS"]
        pub struct IACTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IACTS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - IACTS"]
            #[inline(always)]
            pub fn iacts(&self) -> IACTS_R {
                IACTS_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - IACTS"]
            #[inline(always)]
            pub fn iacts(&mut self) -> IACTS_W {
                IACTS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt ACTIVE Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iactr1](index.html) module"]
        pub struct IACTR1_SPEC;
        impl crate::RegisterSpec for IACTR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iactr1::R](R) reader structure"]
        impl crate::Readable for IACTR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iactr1::W](W) writer structure"]
        impl crate::Writable for IACTR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IACTR1 to value 0"]
        impl crate::Resettable for IACTR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IACTR2 register accessor: an alias for `Reg<IACTR2_SPEC>`"]
    pub type IACTR2 = crate::Reg<iactr2::IACTR2_SPEC>;
    #[doc = "Interrupt ACTIVE Register"]
    pub mod iactr2 {
        #[doc = "Register `IACTR2` reader"]
        pub struct R(crate::R<IACTR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IACTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IACTR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IACTR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IACTR2` writer"]
        pub struct W(crate::W<IACTR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IACTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IACTR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IACTR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IACTS` reader - IACTS"]
        pub struct IACTS_R(crate::FieldReader<u32>);
        impl IACTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                IACTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IACTS_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IACTS` writer - IACTS"]
        pub struct IACTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IACTS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff_ffff) | (value as u32 & 0x0fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:27 - IACTS"]
            #[inline(always)]
            pub fn iacts(&self) -> IACTS_R {
                IACTS_R::new((self.bits & 0x0fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:27 - IACTS"]
            #[inline(always)]
            pub fn iacts(&mut self) -> IACTS_W {
                IACTS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt ACTIVE Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iactr2](index.html) module"]
        pub struct IACTR2_SPEC;
        impl crate::RegisterSpec for IACTR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iactr2::R](R) reader structure"]
        impl crate::Readable for IACTR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iactr2::W](W) writer structure"]
        impl crate::Writable for IACTR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IACTR2 to value 0"]
        impl crate::Resettable for IACTR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SCTLR register accessor: an alias for `Reg<SCTLR_SPEC>`"]
    pub type SCTLR = crate::Reg<sctlr::SCTLR_SPEC>;
    #[doc = "System Control Register"]
    pub mod sctlr {
        #[doc = "Register `SCTLR` reader"]
        pub struct R(crate::R<SCTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SCTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SCTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SCTLR` writer"]
        pub struct W(crate::W<SCTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SCTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SCTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SCTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SLEEPONEXIT` reader - SLEEPONEXIT"]
        pub struct SLEEPONEXIT_R(crate::FieldReader<bool>);
        impl SLEEPONEXIT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SLEEPONEXIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SLEEPONEXIT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SLEEPONEXIT` writer - SLEEPONEXIT"]
        pub struct SLEEPONEXIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEEPONEXIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 1)) | ((value as u32 & 1) << 1);
                self.w
            }
        }
        #[doc = "Field `SLEEPDEEP` reader - SLEEPDEEP"]
        pub struct SLEEPDEEP_R(crate::FieldReader<bool>);
        impl SLEEPDEEP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SLEEPDEEP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SLEEPDEEP_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SLEEPDEEP` writer - SLEEPDEEP"]
        pub struct SLEEPDEEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEEPDEEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 2)) | ((value as u32 & 1) << 2);
                self.w
            }
        }
        #[doc = "Field `WFITOWFE` reader - WFITOWFE"]
        pub struct WFITOWFE_R(crate::FieldReader<bool>);
        impl WFITOWFE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WFITOWFE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WFITOWFE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WFITOWFE` writer - WFITOWFE"]
        pub struct WFITOWFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WFITOWFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 3)) | ((value as u32 & 1) << 3);
                self.w
            }
        }
        #[doc = "Field `SEVONPEND` reader - SEVONPEND"]
        pub struct SEVONPEND_R(crate::FieldReader<bool>);
        impl SEVONPEND_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SEVONPEND_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SEVONPEND_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SEVONPEND` writer - SEVONPEND"]
        pub struct SEVONPEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SEVONPEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 4)) | ((value as u32 & 1) << 4);
                self.w
            }
        }
        #[doc = "Field `SETEVENT` reader - SETEVENT"]
        pub struct SETEVENT_R(crate::FieldReader<bool>);
        impl SETEVENT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SETEVENT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SETEVENT_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SETEVENT` writer - SETEVENT"]
        pub struct SETEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETEVENT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(1 << 5)) | ((value as u32 & 1) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - SLEEPONEXIT"]
            #[inline(always)]
            pub fn sleeponexit(&self) -> SLEEPONEXIT_R {
                SLEEPONEXIT_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - SLEEPDEEP"]
            #[inline(always)]
            pub fn sleepdeep(&self) -> SLEEPDEEP_R {
                SLEEPDEEP_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - WFITOWFE"]
            #[inline(always)]
            pub fn wfitowfe(&self) -> WFITOWFE_R {
                WFITOWFE_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - SEVONPEND"]
            #[inline(always)]
            pub fn sevonpend(&self) -> SEVONPEND_R {
                SEVONPEND_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - SETEVENT"]
            #[inline(always)]
            pub fn setevent(&self) -> SETEVENT_R {
                SETEVENT_R::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - SLEEPONEXIT"]
            #[inline(always)]
            pub fn sleeponexit(&mut self) -> SLEEPONEXIT_W {
                SLEEPONEXIT_W { w: self }
            }
            #[doc = "Bit 2 - SLEEPDEEP"]
            #[inline(always)]
            pub fn sleepdeep(&mut self) -> SLEEPDEEP_W {
                SLEEPDEEP_W { w: self }
            }
            #[doc = "Bit 3 - WFITOWFE"]
            #[inline(always)]
            pub fn wfitowfe(&mut self) -> WFITOWFE_W {
                WFITOWFE_W { w: self }
            }
            #[doc = "Bit 4 - SEVONPEND"]
            #[inline(always)]
            pub fn sevonpend(&mut self) -> SEVONPEND_W {
                SEVONPEND_W { w: self }
            }
            #[doc = "Bit 5 - SETEVENT"]
            #[inline(always)]
            pub fn setevent(&mut self) -> SETEVENT_W {
                SETEVENT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "System Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sctlr](index.html) module"]
        pub struct SCTLR_SPEC;
        impl crate::RegisterSpec for SCTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sctlr::R](R) reader structure"]
        impl crate::Readable for SCTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sctlr::W](W) writer structure"]
        impl crate::Writable for SCTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SCTLR to value 0"]
        impl crate::Resettable for SCTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STK_CTLR register accessor: an alias for `Reg<STK_CTLR_SPEC>`"]
    pub type STK_CTLR = crate::Reg<stk_ctlr::STK_CTLR_SPEC>;
    #[doc = "System counter control register"]
    pub mod stk_ctlr {
        #[doc = "Register `STK_CTLR` reader"]
        pub struct R(crate::R<STK_CTLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STK_CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STK_CTLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STK_CTLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STK_CTLR` writer"]
        pub struct W(crate::W<STK_CTLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STK_CTLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STK_CTLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STK_CTLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `STE` reader - System counter enable"]
        pub struct STE_R(crate::FieldReader<bool>);
        impl STE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STE_R {
            type Target = crate::FieldReader<bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STE` writer - System counter enable"]
        pub struct STE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !1) | (value as u32 & 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - System counter enable"]
            #[inline(always)]
            pub fn ste(&self) -> STE_R {
                STE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - System counter enable"]
            #[inline(always)]
            pub fn ste(&mut self) -> STE_W {
                STE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "System counter control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stk_ctlr](index.html) module"]
        pub struct STK_CTLR_SPEC;
        impl crate::RegisterSpec for STK_CTLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stk_ctlr::R](R) reader structure"]
        impl crate::Readable for STK_CTLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stk_ctlr::W](W) writer structure"]
        impl crate::Writable for STK_CTLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STK_CTLR to value 0"]
        impl crate::Resettable for STK_CTLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STK_CNTL register accessor: an alias for `Reg<STK_CNTL_SPEC>`"]
    pub type STK_CNTL = crate::Reg<stk_cntl::STK_CNTL_SPEC>;
    #[doc = "System counter low register"]
    pub mod stk_cntl {
        #[doc = "Register `STK_CNTL` reader"]
        pub struct R(crate::R<STK_CNTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STK_CNTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STK_CNTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STK_CNTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STK_CNTL` writer"]
        pub struct W(crate::W<STK_CNTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STK_CNTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STK_CNTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STK_CNTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CNTL` reader - CNTL"]
        pub struct CNTL_R(crate::FieldReader<u32>);
        impl CNTL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                CNTL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNTL_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNTL` writer - CNTL"]
        pub struct CNTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CNTL"]
            #[inline(always)]
            pub fn cntl(&self) -> CNTL_R {
                CNTL_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CNTL"]
            #[inline(always)]
            pub fn cntl(&mut self) -> CNTL_W {
                CNTL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "System counter low register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stk_cntl](index.html) module"]
        pub struct STK_CNTL_SPEC;
        impl crate::RegisterSpec for STK_CNTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stk_cntl::R](R) reader structure"]
        impl crate::Readable for STK_CNTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stk_cntl::W](W) writer structure"]
        impl crate::Writable for STK_CNTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STK_CNTL to value 0"]
        impl crate::Resettable for STK_CNTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STK_CNTH register accessor: an alias for `Reg<STK_CNTH_SPEC>`"]
    pub type STK_CNTH = crate::Reg<stk_cnth::STK_CNTH_SPEC>;
    #[doc = "System counter high register"]
    pub mod stk_cnth {
        #[doc = "Register `STK_CNTH` reader"]
        pub struct R(crate::R<STK_CNTH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STK_CNTH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STK_CNTH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STK_CNTH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STK_CNTH` writer"]
        pub struct W(crate::W<STK_CNTH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STK_CNTH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STK_CNTH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STK_CNTH_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CNTH` reader - CNTH"]
        pub struct CNTH_R(crate::FieldReader<u32>);
        impl CNTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                CNTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CNTH_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CNTH` writer - CNTH"]
        pub struct CNTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CNTH"]
            #[inline(always)]
            pub fn cnth(&self) -> CNTH_R {
                CNTH_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CNTH"]
            #[inline(always)]
            pub fn cnth(&mut self) -> CNTH_W {
                CNTH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "System counter high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stk_cnth](index.html) module"]
        pub struct STK_CNTH_SPEC;
        impl crate::RegisterSpec for STK_CNTH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stk_cnth::R](R) reader structure"]
        impl crate::Readable for STK_CNTH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stk_cnth::W](W) writer structure"]
        impl crate::Writable for STK_CNTH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STK_CNTH to value 0"]
        impl crate::Resettable for STK_CNTH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STK_CMPLR register accessor: an alias for `Reg<STK_CMPLR_SPEC>`"]
    pub type STK_CMPLR = crate::Reg<stk_cmplr::STK_CMPLR_SPEC>;
    #[doc = "System compare low register"]
    pub mod stk_cmplr {
        #[doc = "Register `STK_CMPLR` reader"]
        pub struct R(crate::R<STK_CMPLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STK_CMPLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STK_CMPLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STK_CMPLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STK_CMPLR` writer"]
        pub struct W(crate::W<STK_CMPLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STK_CMPLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STK_CMPLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STK_CMPLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CMPL` reader - CMPL"]
        pub struct CMPL_R(crate::FieldReader<u32>);
        impl CMPL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                CMPL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMPL_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMPL` writer - CMPL"]
        pub struct CMPL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMPL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CMPL"]
            #[inline(always)]
            pub fn cmpl(&self) -> CMPL_R {
                CMPL_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CMPL"]
            #[inline(always)]
            pub fn cmpl(&mut self) -> CMPL_W {
                CMPL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "System compare low register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stk_cmplr](index.html) module"]
        pub struct STK_CMPLR_SPEC;
        impl crate::RegisterSpec for STK_CMPLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stk_cmplr::R](R) reader structure"]
        impl crate::Readable for STK_CMPLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stk_cmplr::W](W) writer structure"]
        impl crate::Writable for STK_CMPLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STK_CMPLR to value 0"]
        impl crate::Resettable for STK_CMPLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STK_CMPHR register accessor: an alias for `Reg<STK_CMPHR_SPEC>`"]
    pub type STK_CMPHR = crate::Reg<stk_cmphr::STK_CMPHR_SPEC>;
    #[doc = "System compare high register"]
    pub mod stk_cmphr {
        #[doc = "Register `STK_CMPHR` reader"]
        pub struct R(crate::R<STK_CMPHR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STK_CMPHR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STK_CMPHR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STK_CMPHR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STK_CMPHR` writer"]
        pub struct W(crate::W<STK_CMPHR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STK_CMPHR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STK_CMPHR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STK_CMPHR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CMPH` reader - CMPH"]
        pub struct CMPH_R(crate::FieldReader<u32>);
        impl CMPH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                CMPH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMPH_R {
            type Target = crate::FieldReader<u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMPH` writer - CMPH"]
        pub struct CMPH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMPH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CMPH"]
            #[inline(always)]
            pub fn cmph(&self) -> CMPH_R {
                CMPH_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CMPH"]
            #[inline(always)]
            pub fn cmph(&mut self) -> CMPH_W {
                CMPH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "System compare high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stk_cmphr](index.html) module"]
        pub struct STK_CMPHR_SPEC;
        impl crate::RegisterSpec for STK_CMPHR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stk_cmphr::R](R) reader structure"]
        impl crate::Readable for STK_CMPHR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stk_cmphr::W](W) writer structure"]
        impl crate::Writable for STK_CMPHR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STK_CMPHR to value 0"]
        impl crate::Resettable for STK_CMPHR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "PWR"]
    pub PWR: PWR,
    #[doc = "RCC"]
    pub RCC: RCC,
    #[doc = "EXTEND"]
    pub EXTEND: EXTEND,
    #[doc = "GPIOA"]
    pub GPIOA: GPIOA,
    #[doc = "GPIOB"]
    pub GPIOB: GPIOB,
    #[doc = "GPIOC"]
    pub GPIOC: GPIOC,
    #[doc = "GPIOD"]
    pub GPIOD: GPIOD,
    #[doc = "AFIO"]
    pub AFIO: AFIO,
    #[doc = "EXTI"]
    pub EXTI: EXTI,
    #[doc = "DMA"]
    pub DMA: DMA,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "BKP"]
    pub BKP: BKP,
    #[doc = "IWDG"]
    pub IWDG: IWDG,
    #[doc = "WWDG"]
    pub WWDG: WWDG,
    #[doc = "TIM1"]
    pub TIM1: TIM1,
    #[doc = "TIM2"]
    pub TIM2: TIM2,
    #[doc = "TIM3"]
    pub TIM3: TIM3,
    #[doc = "TIM4"]
    pub TIM4: TIM4,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2C2"]
    pub I2C2: I2C2,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "USART1"]
    pub USART1: USART1,
    #[doc = "USART2"]
    pub USART2: USART2,
    #[doc = "USART3"]
    pub USART3: USART3,
    #[doc = "ADC__TKEY"]
    pub ADC__TKEY: ADC__TKEY,
    #[doc = "DBG"]
    pub DBG: DBG,
    #[doc = "USBHD"]
    pub USBHD: USBHD,
    #[doc = "CRC"]
    pub CRC: CRC,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "PFIC"]
    pub PFIC: PFIC,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        riscv::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            PWR: PWR {
                _marker: PhantomData,
            },
            RCC: RCC {
                _marker: PhantomData,
            },
            EXTEND: EXTEND {
                _marker: PhantomData,
            },
            GPIOA: GPIOA {
                _marker: PhantomData,
            },
            GPIOB: GPIOB {
                _marker: PhantomData,
            },
            GPIOC: GPIOC {
                _marker: PhantomData,
            },
            GPIOD: GPIOD {
                _marker: PhantomData,
            },
            AFIO: AFIO {
                _marker: PhantomData,
            },
            EXTI: EXTI {
                _marker: PhantomData,
            },
            DMA: DMA {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            BKP: BKP {
                _marker: PhantomData,
            },
            IWDG: IWDG {
                _marker: PhantomData,
            },
            WWDG: WWDG {
                _marker: PhantomData,
            },
            TIM1: TIM1 {
                _marker: PhantomData,
            },
            TIM2: TIM2 {
                _marker: PhantomData,
            },
            TIM3: TIM3 {
                _marker: PhantomData,
            },
            TIM4: TIM4 {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            USART1: USART1 {
                _marker: PhantomData,
            },
            USART2: USART2 {
                _marker: PhantomData,
            },
            USART3: USART3 {
                _marker: PhantomData,
            },
            ADC__TKEY: ADC__TKEY {
                _marker: PhantomData,
            },
            DBG: DBG {
                _marker: PhantomData,
            },
            USBHD: USBHD {
                _marker: PhantomData,
            },
            CRC: CRC {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            PFIC: PFIC {
                _marker: PhantomData,
            },
        }
    }
}
